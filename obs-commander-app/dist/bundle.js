!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/dist",t.w={},t(t.s=200)}([function(e,n,t){"use strict";t.d(n,"P",function(){return l}),t.d(n,"w",function(){return f}),t.d(n,"O",function(){return d}),t.d(n,"v",function(){return m}),t.d(n,"M",function(){return h}),t.d(n,"t",function(){return v}),t.d(n,"G",function(){return g}),t.d(n,"n",function(){return y}),t.d(n,"Q",function(){return b}),t.d(n,"x",function(){return x}),t.d(n,"D",function(){return w}),t.d(n,"k",function(){return E}),t.d(n,"E",function(){return O}),t.d(n,"l",function(){return T}),t.d(n,"I",function(){return _}),t.d(n,"p",function(){return j}),t.d(n,"K",function(){return k}),t.d(n,"r",function(){return N}),t.d(n,"F",function(){return S}),t.d(n,"m",function(){return I}),t.d(n,"N",function(){return A}),t.d(n,"u",function(){return L}),t.d(n,"H",function(){return C}),t.d(n,"o",function(){return D}),t.d(n,"C",function(){return F}),t.d(n,"j",function(){return R}),t.d(n,"B",function(){return P}),t.d(n,"i",function(){return q}),t.d(n,"d",function(){return M}),t.d(n,"e",function(){return Q}),t.d(n,"R",function(){return V}),t.d(n,"y",function(){return B}),t.d(n,"L",function(){return z}),t.d(n,"s",function(){return K}),t.d(n,"A",function(){return H}),t.d(n,"J",function(){return $}),t.d(n,"q",function(){return J}),t.d(n,"z",function(){return Y}),t.d(n,"g",function(){return Z}),t.d(n,"f",function(){return X}),t.d(n,"c",function(){return te}),t.d(n,"h",function(){return re}),t.d(n,"a",function(){return ae}),t.d(n,"b",function(){return ie});var r=t(16),a=t(3),i=t(4),o=t(1),s=t(31),c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function p(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function l(e){return d(e)||h(e)||g(e)||b(e)||w(e)||O(e)||_(e)||k(e)}function f(e){return l(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL type."),e}function d(e){return Object(r.a)(e,Z)}function m(e){return d(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Scalar type."),e}function h(e){return Object(r.a)(e,X)}function v(e){return h(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Object type."),e}function g(e){return Object(r.a)(e,te)}function y(e){return g(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Interface type."),e}function b(e){return Object(r.a)(e,re)}function x(e){return b(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Union type."),e}function w(e){return Object(r.a)(e,ae)}function E(e){return w(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Enum type."),e}function O(e){return Object(r.a)(e,ie)}function T(e){return O(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Input Object type."),e}function _(e){return Object(r.a)(e,M)}function j(e){return _(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL List type."),e}function k(e){return Object(r.a)(e,Q)}function N(e){return k(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL Non-Null type."),e}function S(e){return d(e)||w(e)||O(e)||V(e)&&S(e.ofType)}function I(e){return S(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL input type."),e}function A(e){return d(e)||h(e)||g(e)||b(e)||w(e)||V(e)&&A(e.ofType)}function L(e){return A(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL output type."),e}function C(e){return d(e)||w(e)}function D(e){return C(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL leaf type."),e}function F(e){return h(e)||g(e)||b(e)}function R(e){return F(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL composite type."),e}function P(e){return g(e)||b(e)}function q(e){return P(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL abstract type."),e}function M(e){if(!(this instanceof M))return new M(e);this.ofType=f(e)}var U=M.prototype;function Q(e){if(!(this instanceof Q))return new Q(e);this.ofType=K(e)}U.toString=U.toJSON=U.inspect=function(){return"["+String(this.ofType)+"]"};var G=Q.prototype;function V(e){return _(e)||k(e)}function B(e){return V(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL wrapping type."),e}function z(e){return l(e)&&!k(e)}function K(e){return z(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL nullable type."),e}function H(e){if(e)return k(e)?e.ofType:e}function $(e){return d(e)||h(e)||g(e)||b(e)||w(e)||O(e)}function J(e){return $(e)||Object(a.a)(0,"Expected "+String(e)+" to be a GraphQL named type."),e}function Y(e){if(e){for(var n=e;V(n);)n=n.ofType;return n}}function W(e){return"function"==typeof e?e():e}G.toString=G.toJSON=G.inspect=function(){return String(this.ofType)+"!"};var Z=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this._scalarConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name."),"function"!=typeof n.serialize&&Object(a.a)(0,this.name+' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.'),(n.parseValue||n.parseLiteral)&&("function"!=typeof n.parseValue||"function"!=typeof n.parseLiteral)&&Object(a.a)(0,this.name+' must provide both "parseValue" and "parseLiteral" functions.')}return e.prototype.serialize=function(e){return(0,this._scalarConfig.serialize)(e)},e.prototype.parseValue=function(e){var n=this._scalarConfig.parseValue;if(!Object(i.a)(e))return n?n(e):e},e.prototype.parseLiteral=function(e,n){var t=this._scalarConfig.parseLiteral;return t?t(e,n):Object(s.a)(e,n)},e.prototype.toString=function(){return this.name},e}();Z.prototype.toJSON=Z.prototype.inspect=Z.prototype.toString;var X=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this.extensionASTNodes=n.extensionASTNodes,this.isTypeOf=n.isTypeOf,this._typeConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name."),n.isTypeOf&&"function"!=typeof n.isTypeOf&&Object(a.a)(0,this.name+' must provide "isTypeOf" as a function.')}return e.prototype.getFields=function(){return this._fields||(this._fields=ee(this,this._typeConfig.fields))},e.prototype.getInterfaces=function(){return this._interfaces||(this._interfaces=(e=this,n=this._typeConfig.interfaces,t=W(n)||[],Array.isArray(t)||Object(a.a)(0,e.name+" interfaces must be an Array or a function which returns an Array."),t));var e,n,t},e.prototype.toString=function(){return this.name},e}();function ee(e,n){var t=W(n)||{};ne(t)||Object(a.a)(0,e.name+" fields must be an object with field names as keys or a function which returns such an object.");var r=Object.create(null);return Object.keys(t).forEach(function(n){var i=t[n];ne(i)||Object(a.a)(0,e.name+"."+n+" field config must be an object"),i.hasOwnProperty("isDeprecated")&&Object(a.a)(0,e.name+"."+n+' should provide "deprecationReason" instead of "isDeprecated".');var o,s=u({},i,{isDeprecated:Boolean(i.deprecationReason),name:n});null!=(o=s.resolve)&&"function"!=typeof o&&Object(a.a)(0,e.name+"."+n+" field resolver must be a function if provided, but got: "+String(s.resolve)+".");var c=i.args;c?(ne(c)||Object(a.a)(0,e.name+"."+n+" args must be an object with argument names as keys."),s.args=Object.keys(c).map(function(e){var n=c[e];return{name:e,description:void 0===n.description?null:n.description,type:n.type,defaultValue:n.defaultValue,astNode:n.astNode}})):s.args=[],r[n]=s}),r}function ne(e){return e&&"object"===(void 0===e?"undefined":c(e))&&!Array.isArray(e)}X.prototype.toJSON=X.prototype.inspect=X.prototype.toString;var te=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this.extensionASTNodes=n.extensionASTNodes,this.resolveType=n.resolveType,this._typeConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name."),n.resolveType&&"function"!=typeof n.resolveType&&Object(a.a)(0,this.name+' must provide "resolveType" as a function.')}return e.prototype.getFields=function(){return this._fields||(this._fields=ee(this,this._typeConfig.fields))},e.prototype.toString=function(){return this.name},e}();te.prototype.toJSON=te.prototype.inspect=te.prototype.toString;var re=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this.resolveType=n.resolveType,this._typeConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name."),n.resolveType&&"function"!=typeof n.resolveType&&Object(a.a)(0,this.name+' must provide "resolveType" as a function.')}return e.prototype.getTypes=function(){return this._types||(this._types=(e=this,n=this._typeConfig.types,t=W(n)||[],Array.isArray(t)||Object(a.a)(0,"Must provide Array of types or a function which returns such an array for Union "+e.name+"."),t));var e,n,t},e.prototype.toString=function(){return this.name},e}();re.prototype.toJSON=re.prototype.inspect=re.prototype.toString;var ae=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this._enumConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name.")}return e.prototype.getValues=function(){return this._values||(this._values=(e=this,ne(n=this._enumConfig.values)||Object(a.a)(0,e.name+" values must be an object with value names as keys."),Object.keys(n).map(function(t){var r=n[t];return ne(r)||Object(a.a)(0,e.name+"."+t+' must refer to an object with a "value" key representing an internal value but got: '+String(r)+"."),r.hasOwnProperty("isDeprecated")&&Object(a.a)(0,e.name+"."+t+' should provide "deprecationReason" instead of "isDeprecated".'),{name:t,description:r.description,isDeprecated:Boolean(r.deprecationReason),deprecationReason:r.deprecationReason,astNode:r.astNode,value:r.hasOwnProperty("value")?r.value:t}})));var e,n},e.prototype.getValue=function(e){return this._getNameLookup()[e]},e.prototype.serialize=function(e){var n=this._getValueLookup().get(e);if(n)return n.name},e.prototype.parseValue=function(e){if("string"==typeof e){var n=this._getNameLookup()[e];if(n)return n.value}},e.prototype.parseLiteral=function(e,n){if(e.kind===o.a.ENUM){var t=this._getNameLookup()[e.value];if(t)return t.value}},e.prototype._getValueLookup=function(){if(!this._valueLookup){var e=new Map;this.getValues().forEach(function(n){e.set(n.value,n)}),this._valueLookup=e}return this._valueLookup},e.prototype._getNameLookup=function(){if(!this._nameLookup){var e=Object.create(null);this.getValues().forEach(function(n){e[n.name]=n}),this._nameLookup=e}return this._nameLookup},e.prototype.toString=function(){return this.name},e}();ae.prototype.toJSON=ae.prototype.inspect=ae.prototype.toString;var ie=function(){function e(n){p(this,e),this.name=n.name,this.description=n.description,this.astNode=n.astNode,this._typeConfig=n,"string"!=typeof n.name&&Object(a.a)(0,"Must provide name.")}return e.prototype.getFields=function(){return this._fields||(this._fields=this._defineFieldMap())},e.prototype._defineFieldMap=function(){var e=this,n=W(this._typeConfig.fields)||{};ne(n)||Object(a.a)(0,this.name+" fields must be an object with field names as keys or a function which returns such an object.");var t=Object.create(null);return Object.keys(n).forEach(function(r){var i=u({},n[r],{name:r});i.hasOwnProperty("resolve")&&Object(a.a)(0,e.name+"."+r+" field type has a resolve property, but Input Types cannot define resolvers."),t[r]=i}),t},e.prototype.toString=function(){return this.name},e}();ie.prototype.toJSON=ie.prototype.toString,ie.prototype.inspect=ie.prototype.toString},function(e,n,t){"use strict";t.d(n,"a",function(){return r});var r=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",VARIABLE:"Variable",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension",DIRECTIVE_DEFINITION:"DirectiveDefinition"})},function(e,n,t){"use strict";t.r(n);var r=t(6);function a(e,n,t){return new r.a("Syntax Error: "+t,void 0,e,[n])}var i=t(29),o=t(30),s=t(3),c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function u(e){return e||Object(s.a)(0,"Received null or undefined error."),c({},e.extensions,{message:e.message||"An unknown error occurred.",locations:e.locations,path:e.path})}t.d(n,"GraphQLError",function(){return r.a}),t.d(n,"syntaxError",function(){return a}),t.d(n,"locatedError",function(){return i.a}),t.d(n,"printError",function(){return o.a}),t.d(n,"formatError",function(){return u})},function(e,n,t){"use strict";function r(e,n){if(!e)throw new Error(n)}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";function r(e){return void 0===e||e!=e}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";t.d(n,"a",function(){return a});var r=t(8);function a(e){return Object(r.c)(e,{leave:i})}var i={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return s(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var n=e.operation,t=e.name,r=u("(",s(e.variableDefinitions,", "),")"),a=s(e.directives," "),i=e.selectionSet;return t||a||r||"query"!==n?s([n,s([t,r]),a,i]," "):i},VariableDefinition:function(e){return e.variable+": "+e.type+u(" = ",e.defaultValue)},SelectionSet:function(e){return c(e.selections)},Field:function(e){var n=e.alias,t=e.name,r=e.arguments,a=e.directives,i=e.selectionSet;return s([u("",n,": ")+t+u("(",s(r,", "),")"),s(a," "),i]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+u(" ",s(e.directives," "))},InlineFragment:function(e){var n=e.typeCondition,t=e.directives,r=e.selectionSet;return s(["...",u("on ",n),s(t," "),r]," ")},FragmentDefinition:function(e){var n=e.name,t=e.typeCondition,r=e.variableDefinitions,a=e.directives,i=e.selectionSet;return"fragment "+n+u("(",s(r,", "),")")+" on "+t+" "+u("",s(a," ")," ")+i},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,n){var t=e.value;return e.block?function(e,n){var t=e.replace(/"""/g,'\\"""');return" "!==e[0]&&"\t"!==e[0]||-1!==e.indexOf("\n")?'"""\n'+(n?t:p(t))+'\n"""':'"""'+t.replace(/"$/,'"\n')+'"""'}(t,"description"===n):JSON.stringify(t)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+s(e.values,", ")+"]"},ObjectValue:function(e){return"{"+s(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+u("(",s(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:function(e){var n=e.directives,t=e.operationTypes;return s(["schema",s(n," "),c(t)]," ")},OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:o(function(e){return s(["scalar",e.name,s(e.directives," ")]," ")}),ObjectTypeDefinition:o(function(e){var n=e.name,t=e.interfaces,r=e.directives,a=e.fields;return s(["type",n,u("implements ",s(t," & ")),s(r," "),c(a)]," ")}),FieldDefinition:o(function(e){var n=e.name,t=e.arguments,r=e.type,a=e.directives;return n+u("(",s(t,", "),")")+": "+r+u(" ",s(a," "))}),InputValueDefinition:o(function(e){var n=e.name,t=e.type,r=e.defaultValue,a=e.directives;return s([n+": "+t,u("= ",r),s(a," ")]," ")}),InterfaceTypeDefinition:o(function(e){var n=e.name,t=e.directives,r=e.fields;return s(["interface",n,s(t," "),c(r)]," ")}),UnionTypeDefinition:o(function(e){var n=e.name,t=e.directives,r=e.types;return s(["union",n,s(t," "),r&&0!==r.length?"= "+s(r," | "):""]," ")}),EnumTypeDefinition:o(function(e){var n=e.name,t=e.directives,r=e.values;return s(["enum",n,s(t," "),c(r)]," ")}),EnumValueDefinition:o(function(e){return s([e.name,s(e.directives," ")]," ")}),InputObjectTypeDefinition:o(function(e){var n=e.name,t=e.directives,r=e.fields;return s(["input",n,s(t," "),c(r)]," ")}),ScalarTypeExtension:function(e){return s(["extend scalar",e.name,s(e.directives," ")]," ")},ObjectTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,a=e.fields;return s(["extend type",n,u("implements ",s(t," & ")),s(r," "),c(a)]," ")},InterfaceTypeExtension:function(e){var n=e.name,t=e.directives,r=e.fields;return s(["extend interface",n,s(t," "),c(r)]," ")},UnionTypeExtension:function(e){var n=e.name,t=e.directives,r=e.types;return s(["extend union",n,s(t," "),r&&0!==r.length?"= "+s(r," | "):""]," ")},EnumTypeExtension:function(e){var n=e.name,t=e.directives,r=e.values;return s(["extend enum",n,s(t," "),c(r)]," ")},InputObjectTypeExtension:function(e){var n=e.name,t=e.directives,r=e.fields;return s(["extend input",n,s(t," "),c(r)]," ")},DirectiveDefinition:o(function(e){var n=e.name,t=e.arguments,r=e.locations;return"directive @"+n+u("(",s(t,", "),")")+" on "+s(r," | ")})};function o(e){return function(n){return s([n.description,e(n)],"\n")}}function s(e,n){return e?e.filter(function(e){return e}).join(n||""):""}function c(e){return e&&0!==e.length?"{\n"+p(s(e,"\n"))+"\n}":""}function u(e,n,t){return n?e+n+(t||""):""}function p(e){return e&&"  "+e.replace(/\n/g,"\n  ")}},function(e,n,t){"use strict";t.d(n,"a",function(){return i});var r=t(30),a=t(22);function i(e,n,t,r,o,s,c){var u=Array.isArray(n)?0!==n.length?n:void 0:n?[n]:void 0,p=t;if(!p&&u){var l=u[0];p=l&&l.loc&&l.loc.source}var f=r;!f&&u&&(f=u.reduce(function(e,n){return n.loc&&e.push(n.loc.start),e},[])),f&&0===f.length&&(f=void 0);var d=void 0;r&&t?d=r.map(function(e){return Object(a.a)(t,e)}):u&&(d=u.reduce(function(e,n){return n.loc&&e.push(Object(a.a)(n.loc.source,n.loc.start)),e},[])),Object.defineProperties(this,{message:{value:e,enumerable:!0,writable:!0},locations:{value:d||void 0,enumerable:!0},path:{value:o||void 0,enumerable:!0},nodes:{value:u||void 0},source:{value:p||void 0},positions:{value:f||void 0},originalError:{value:s},extensions:{value:c||s&&s.extensions}}),s&&s.stack?Object.defineProperty(this,"stack",{value:s.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,i):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}i.prototype=Object.create(Error.prototype,{constructor:{value:i},name:{value:"GraphQLError"},toString:{value:function(){return Object(r.a)(this)}}})},function(e,n,t){"use strict";var r=Object.values||function(e){return Object.keys(e).map(function(n){return e[n]})};n.a=r},function(e,n,t){"use strict";t.d(n,"a",function(){return a}),t.d(n,"c",function(){return i}),t.d(n,"d",function(){return s}),t.d(n,"e",function(){return c}),t.d(n,"b",function(){return u});var r={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"]},a={};function i(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r,i=void 0,s=Array.isArray(e),c=[e],p=-1,l=[],f=void 0,d=void 0,m=void 0,h=[],v=[],g=e;do{var y=++p===c.length,b=y&&0!==l.length;if(y){if(d=0===v.length?void 0:h[h.length-1],f=m,m=v.pop(),b){if(s)f=f.slice();else{var x={};for(var w in f)f.hasOwnProperty(w)&&(x[w]=f[w]);f=x}for(var E=0,O=0;O<l.length;O++){var T=l[O][0],_=l[O][1];s&&(T-=E),s&&null===_?(f.splice(T,1),E++):f[T]=_}}p=i.index,c=i.keys,l=i.edits,s=i.inArray,i=i.prev}else{if(d=m?s?p:c[p]:void 0,null===(f=m?m[d]:g)||void 0===f)continue;m&&h.push(d)}var j=void 0;if(!Array.isArray(f)){if(!o(f))throw new Error("Invalid AST Node: "+JSON.stringify(f));var k=u(n,f.kind,y);if(k){if((j=k.call(n,f,d,m,h,v))===a)break;if(!1===j){if(!y){h.pop();continue}}else if(void 0!==j&&(l.push([d,j]),!y)){if(!o(j)){h.pop();continue}f=j}}}void 0===j&&b&&l.push([d,f]),y?h.pop():(i={inArray:s,index:p,keys:c,edits:l,prev:i},c=(s=Array.isArray(f))?f:t[f.kind]||[],p=-1,l=[],m&&v.push(m),m=f)}while(void 0!==i);return 0!==l.length&&(g=l[l.length-1][1]),g}function o(e){return Boolean(e&&"string"==typeof e.kind)}function s(e){var n=new Array(e.length);return{enter:function(t){for(var r=0;r<e.length;r++)if(!n[r]){var i=u(e[r],t.kind,!1);if(i){var o=i.apply(e[r],arguments);if(!1===o)n[r]=t;else if(o===a)n[r]=a;else if(void 0!==o)return o}}},leave:function(t){for(var r=0;r<e.length;r++)if(n[r])n[r]===t&&(n[r]=null);else{var i=u(e[r],t.kind,!0);if(i){var o=i.apply(e[r],arguments);if(o===a)n[r]=a;else if(void 0!==o&&!1!==o)return o}}}}}function c(e,n){return{enter:function(t){e.enter(t);var r=u(n,t.kind,!1);if(r){var a=r.apply(n,arguments);return void 0!==a&&(e.leave(t),o(a)&&e.enter(a)),a}},leave:function(t){var r=u(n,t.kind,!0),a=void 0;return r&&(a=r.apply(n,arguments)),e.leave(t),a}}}function u(e,n,t){var r=e[n];if(r){if(!t&&"function"==typeof r)return r;var a=t?r.leave:r.enter;if("function"==typeof a)return a}else{var i=t?e.leave:e.enter;if(i){if("function"==typeof i)return i;var o=i[n];if("function"==typeof o)return o}}}},function(e,n,t){"use strict";t.d(n,"a",function(){return i});var r=t(1),a=t(0);function i(e,n){var t=void 0;if(n.kind===r.a.LIST_TYPE)return(t=i(e,n.type))&&Object(a.d)(t);if(n.kind===r.a.NON_NULL_TYPE)return(t=i(e,n.type))&&Object(a.e)(t);if(n.kind===r.a.NAMED_TYPE)return e.getType(n.name.value);throw new Error("Unexpected type kind: "+n.kind+".")}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t(1),i=2147483647,o=-2147483648;function s(e){if(""===e)throw new TypeError("Int cannot represent non 32-bit signed integer value: (empty string)");var n=Number(e);if(n!=n||n>i||n<o)throw new TypeError("Int cannot represent non 32-bit signed integer value: "+String(e));var t=Math.floor(n);if(t!==n)throw new TypeError("Int cannot represent non-integer value: "+String(e));return t}var c=new r.g({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",serialize:s,parseValue:s,parseLiteral:function(e){if(e.kind===a.a.INT){var n=parseInt(e.value,10);if(n<=i&&n>=o)return n}}});function u(e){if(""===e)throw new TypeError("Float cannot represent non numeric value: (empty string)");var n=Number(e);if(n==n)return n;throw new TypeError("Float cannot represent non numeric value: "+String(e))}var p=new r.g({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ",serialize:u,parseValue:u,parseLiteral:function(e){return e.kind===a.a.FLOAT||e.kind===a.a.INT?parseFloat(e.value):void 0}});function l(e){if(Array.isArray(e))throw new TypeError("String cannot represent an array value: ["+String(e)+"]");return String(e)}var f=new r.g({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:l,parseValue:l,parseLiteral:function(e){return e.kind===a.a.STRING?e.value:void 0}}),d=new r.g({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:Boolean,parseValue:Boolean,parseLiteral:function(e){return e.kind===a.a.BOOLEAN?e.value:void 0}}),m=new r.g({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:String,parseValue:String,parseLiteral:function(e){return e.kind===a.a.STRING||e.kind===a.a.INT?e.value:void 0}}),h=[f,c,p,d,m];function v(e){return Object(r.J)(e)&&(e.name===f.name||e.name===c.name||e.name===p.name||e.name===d.name||e.name===m.name)}var g=t(16),y=t(3),b=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function x(e){return Object(g.a)(e,w)}var w=function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=n.name,this.description=n.description,this.locations=n.locations,this.astNode=n.astNode,n.name||Object(y.a)(0,"Directive must be named."),Array.isArray(n.locations)||Object(y.a)(0,"Must provide locations for directive.");var t=n.args;t?(Array.isArray(t)&&Object(y.a)(0,"@"+n.name+" args must be an object with argument names as keys."),this.args=Object.keys(t).map(function(e){var n=t[e];return{name:e,description:void 0===n.description?null:n.description,type:n.type,defaultValue:n.defaultValue,astNode:n.astNode}})):this.args=[]},E=new w({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[b.FIELD,b.FRAGMENT_SPREAD,b.INLINE_FRAGMENT],args:{if:{type:Object(r.e)(d),description:"Included when true."}}}),O=new w({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[b.FIELD,b.FRAGMENT_SPREAD,b.INLINE_FRAGMENT],args:{if:{type:Object(r.e)(d),description:"Skipped when true."}}}),T="No longer supported",_=new w({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[b.FIELD_DEFINITION,b.ENUM_VALUE],args:{reason:{type:f,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).",defaultValue:T}}}),j=[E,O,_];function k(e){return j.some(function(n){return n.name===e.name})}var N=t(4),S=t(7),I=t(12),A=t(20),L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function C(e,n){if(Object(r.K)(n)){var t=C(e,n.ofType);return t&&t.kind===a.a.NULL?null:t}if(null===e)return{kind:a.a.NULL};if(Object(N.a)(e))return null;if(Object(r.I)(n)){var i=n.ofType;if(Object(I.isCollection)(e)){var o=[];return Object(I.forEach)(e,function(e){var n=C(e,i);n&&o.push(n)}),{kind:a.a.LIST,values:o}}return C(e,i)}if(Object(r.E)(n)){if(null===e||"object"!==(void 0===e?"undefined":L(e)))return null;var s=[];return Object(S.a)(n.getFields()).forEach(function(n){var t=C(e[n.name],n.type);t&&s.push({kind:a.a.OBJECT_FIELD,name:{kind:a.a.NAME,value:n.name},value:t})}),{kind:a.a.OBJECT,fields:s}}if(Object(r.O)(n)||Object(r.D)(n)){var c=n.serialize(e);if(Object(A.a)(c))return null;if("boolean"==typeof c)return{kind:a.a.BOOLEAN,value:c};if("number"==typeof c){var u=String(c);return D.test(u)?{kind:a.a.INT,value:u}:{kind:a.a.FLOAT,value:u}}if("string"==typeof c)return Object(r.D)(n)?{kind:a.a.ENUM,value:c}:n===m&&D.test(c)?{kind:a.a.INT,value:c}:{kind:a.a.STRING,value:c};throw new TypeError("Cannot convert value to AST: "+String(c))}throw new Error("Unknown type: "+n+".")}var D=/^-?(0|[1-9][0-9]*)$/,F=t(5),R=new r.f({name:"__Schema",isIntrospection:!0,description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:function(){return{types:{description:"A list of all types supported by this server.",type:Object(r.e)(Object(r.d)(Object(r.e)(M))),resolve:function(e){return Object(S.a)(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:Object(r.e)(M),resolve:function(e){return e.getQueryType()}},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:M,resolve:function(e){return e.getMutationType()}},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:M,resolve:function(e){return e.getSubscriptionType()}},directives:{description:"A list of all directives supported by this server.",type:Object(r.e)(Object(r.d)(Object(r.e)(P))),resolve:function(e){return e.getDirectives()}}}}}),P=new r.f({name:"__Directive",isIntrospection:!0,description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:function(){return{name:{type:Object(r.e)(f)},description:{type:f},locations:{type:Object(r.e)(Object(r.d)(Object(r.e)(q)))},args:{type:Object(r.e)(Object(r.d)(Object(r.e)(Q))),resolve:function(e){return e.args||[]}},onOperation:{deprecationReason:"Use `locations`.",type:Object(r.e)(d),resolve:function(e){return-1!==e.locations.indexOf(b.QUERY)||-1!==e.locations.indexOf(b.MUTATION)||-1!==e.locations.indexOf(b.SUBSCRIPTION)}},onFragment:{deprecationReason:"Use `locations`.",type:Object(r.e)(d),resolve:function(e){return-1!==e.locations.indexOf(b.FRAGMENT_SPREAD)||-1!==e.locations.indexOf(b.INLINE_FRAGMENT)||-1!==e.locations.indexOf(b.FRAGMENT_DEFINITION)}},onField:{deprecationReason:"Use `locations`.",type:Object(r.e)(d),resolve:function(e){return-1!==e.locations.indexOf(b.FIELD)}}}}}),q=new r.a({name:"__DirectiveLocation",isIntrospection:!0,description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:b.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:b.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:b.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:b.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:b.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:b.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:b.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},SCHEMA:{value:b.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:b.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:b.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:b.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:b.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:b.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:b.UNION,description:"Location adjacent to a union definition."},ENUM:{value:b.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:b.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:b.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:b.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),M=new r.f({name:"__Type",isIntrospection:!0,description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:function(){return{kind:{type:Object(r.e)(B),resolve:function(e){if(Object(r.O)(e))return V.SCALAR;if(Object(r.M)(e))return V.OBJECT;if(Object(r.G)(e))return V.INTERFACE;if(Object(r.Q)(e))return V.UNION;if(Object(r.D)(e))return V.ENUM;if(Object(r.E)(e))return V.INPUT_OBJECT;if(Object(r.I)(e))return V.LIST;if(Object(r.K)(e))return V.NON_NULL;throw new Error("Unknown kind of type: "+e)}},name:{type:f},description:{type:f},fields:{type:Object(r.d)(Object(r.e)(U)),args:{includeDeprecated:{type:d,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if(Object(r.M)(e)||Object(r.G)(e)){var a=Object(S.a)(e.getFields());return t||(a=a.filter(function(e){return!e.deprecationReason})),a}return null}},interfaces:{type:Object(r.d)(Object(r.e)(M)),resolve:function(e){if(Object(r.M)(e))return e.getInterfaces()}},possibleTypes:{type:Object(r.d)(Object(r.e)(M)),resolve:function(e,n,t,a){var i=a.schema;if(Object(r.B)(e))return i.getPossibleTypes(e)}},enumValues:{type:Object(r.d)(Object(r.e)(G)),args:{includeDeprecated:{type:d,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if(Object(r.D)(e)){var a=e.getValues();return t||(a=a.filter(function(e){return!e.deprecationReason})),a}}},inputFields:{type:Object(r.d)(Object(r.e)(Q)),resolve:function(e){if(Object(r.E)(e))return Object(S.a)(e.getFields())}},ofType:{type:M}}}}),U=new r.f({name:"__Field",isIntrospection:!0,description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:function(){return{name:{type:Object(r.e)(f)},description:{type:f},args:{type:Object(r.e)(Object(r.d)(Object(r.e)(Q))),resolve:function(e){return e.args||[]}},type:{type:Object(r.e)(M)},isDeprecated:{type:Object(r.e)(d)},deprecationReason:{type:f}}}}),Q=new r.f({name:"__InputValue",isIntrospection:!0,description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:function(){return{name:{type:Object(r.e)(f)},description:{type:f},type:{type:Object(r.e)(M)},defaultValue:{type:f,description:"A GraphQL-formatted string representing the default value for this input value.",resolve:function(e){return Object(N.a)(e.defaultValue)?null:Object(F.a)(C(e.defaultValue,e.type))}}}}}),G=new r.f({name:"__EnumValue",isIntrospection:!0,description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:function(){return{name:{type:Object(r.e)(f)},description:{type:f},isDeprecated:{type:Object(r.e)(d)},deprecationReason:{type:f}}}}),V={SCALAR:"SCALAR",OBJECT:"OBJECT",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",INPUT_OBJECT:"INPUT_OBJECT",LIST:"LIST",NON_NULL:"NON_NULL"},B=new r.a({name:"__TypeKind",isIntrospection:!0,description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:V.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:V.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:V.INTERFACE,description:"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields."},UNION:{value:V.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:V.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:V.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:V.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:V.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),z={name:"__schema",type:Object(r.e)(R),description:"Access the current type schema of this server.",args:[],resolve:function(e,n,t,r){return r.schema}},K={name:"__type",type:M,description:"Request the type information of a single type.",args:[{name:"name",type:Object(r.e)(f)}],resolve:function(e,n,t,r){var a=n.name;return r.schema.getType(a)}},H={name:"__typename",type:Object(r.e)(f),description:"The name of the current Object type at runtime.",args:[],resolve:function(e,n,t,r){return r.parentType.name}},$=[R,P,q,M,U,Q,G,B];function J(e){return Object(r.J)(e)&&(e.name===R.name||e.name===P.name||e.name===q.name||e.name===M.name||e.name===U.name||e.name===Q.name||e.name===G.name||e.name===B.name)}var Y=t(13),W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function Z(e){return Object(g.a)(e,X)}var X=function(){function e(n){var t=this;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),n&&n.assumeValid?this.__validationErrors=[]:("object"!==(void 0===n?"undefined":W(n))&&Object(y.a)(0,"Must provide configuration object."),n.types&&!Array.isArray(n.types)&&Object(y.a)(0,'"types" must be Array if provided but got: '+String(n.types)+"."),n.directives&&!Array.isArray(n.directives)&&Object(y.a)(0,'"directives" must be Array if provided but got: '+String(n.directives)+"."),n.allowedLegacyNames&&!Array.isArray(n.allowedLegacyNames)&&Object(y.a)(0,'"allowedLegacyNames" must be Array if provided but got: '+String(n.allowedLegacyNames)+".")),this.__allowedLegacyNames=n.allowedLegacyNames,this._queryType=n.query,this._mutationType=n.mutation,this._subscriptionType=n.subscription,this._directives=n.directives||j,this.astNode=n.astNode;var a=[this.getQueryType(),this.getMutationType(),this.getSubscriptionType(),R],i=n.types;i&&(a=a.concat(i));var o=Object.create(null);o=a.reduce(ee,o),o=this._directives.reduce(ne,o),this._typeMap=o,this._implementations=Object.create(null),Object.keys(this._typeMap).forEach(function(e){var n=t._typeMap[e];Object(r.M)(n)&&n.getInterfaces().forEach(function(e){if(Object(r.G)(e)){var a=t._implementations[e.name];a?a.push(n):t._implementations[e.name]=[n]}})})}return e.prototype.getQueryType=function(){return this._queryType},e.prototype.getMutationType=function(){return this._mutationType},e.prototype.getSubscriptionType=function(){return this._subscriptionType},e.prototype.getTypeMap=function(){return this._typeMap},e.prototype.getType=function(e){return this.getTypeMap()[e]},e.prototype.getPossibleTypes=function(e){return Object(r.Q)(e)?e.getTypes():this._implementations[e.name]},e.prototype.isPossibleType=function(e,n){var t=this._possibleTypeMap;if(t||(this._possibleTypeMap=t=Object.create(null)),!t[e.name]){var r=this.getPossibleTypes(e);Array.isArray(r)||Object(y.a)(0,"Could not find possible implementing types for "+e.name+" in schema. Check that schema.types is defined and is an array of all possible types in the schema."),t[e.name]=r.reduce(function(e,n){return e[n.name]=!0,e},Object.create(null))}return Boolean(t[e.name][n.name])},e.prototype.getDirectives=function(){return this._directives},e.prototype.getDirective=function(e){return Object(Y.a)(this.getDirectives(),function(n){return n.name===e})},e}();function ee(e,n){if(!n)return e;if(Object(r.R)(n))return ee(e,n.ofType);if(e[n.name])return e[n.name]!==n&&Object(y.a)(0,'Schema must contain unique named types but contains multiple types named "'+n.name+'".'),e;e[n.name]=n;var t=e;return Object(r.Q)(n)&&(t=n.getTypes().reduce(ee,t)),Object(r.M)(n)&&(t=n.getInterfaces().reduce(ee,t)),(Object(r.M)(n)||Object(r.G)(n))&&Object(S.a)(n.getFields()).forEach(function(e){if(e.args){var n=e.args.map(function(e){return e.type});t=n.reduce(ee,t)}t=ee(t,e.type)}),Object(r.E)(n)&&Object(S.a)(n.getFields()).forEach(function(e){t=ee(t,e.type)}),t}function ne(e,n){return x(n)?n.args.reduce(function(e,n){return ee(e,n.type)},e):e}var te=t(6),re=/^[_a-zA-Z][_a-zA-Z0-9]*$/;function ae(e){var n=ie(e);if(n)throw n;return e}function ie(e,n){return"string"!=typeof e&&Object(y.a)(0,"Expected string"),e.length>1&&"_"===e[0]&&"_"===e[1]?new te.a('Name "'+e+'" must not begin with "__", which is reserved by GraphQL introspection.',n):re.test(e)?void 0:new te.a('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'+e+'" does not.',n)}function oe(e,n){return e===n||(Object(r.K)(e)&&Object(r.K)(n)?oe(e.ofType,n.ofType):!(!Object(r.I)(e)||!Object(r.I)(n))&&oe(e.ofType,n.ofType))}function se(e,n,t){return n===t||(Object(r.K)(t)?!!Object(r.K)(n)&&se(e,n.ofType,t.ofType):Object(r.K)(n)?se(e,n.ofType,t):Object(r.I)(t)?!!Object(r.I)(n)&&se(e,n.ofType,t.ofType):!Object(r.I)(n)&&!!(Object(r.B)(t)&&Object(r.M)(n)&&e.isPossibleType(t,n)))}function ce(e,n,t){return n===t||(Object(r.B)(n)?Object(r.B)(t)?e.getPossibleTypes(n).some(function(n){return e.isPossibleType(t,n)}):e.isPossibleType(n,t):!!Object(r.B)(t)&&e.isPossibleType(t,n))}function ue(e){if(Z(e)||Object(y.a)(0,"Expected "+String(e)+" to be a GraphQL schema."),e.__validationErrors)return e.__validationErrors;var n=new le(e);!function(e){var n=e.schema,t=n.getQueryType();t?Object(r.M)(t)||e.reportError("Query root type must be Object type, it cannot be "+String(t)+".",fe(n,t,"query")):e.reportError("Query root type must be provided.",n.astNode);var a=n.getMutationType();a&&!Object(r.M)(a)&&e.reportError("Mutation root type must be Object type if provided, it cannot be "+String(a)+".",fe(n,a,"mutation"));var i=n.getSubscriptionType();i&&!Object(r.M)(i)&&e.reportError("Subscription root type must be Object type if provided, it cannot be "+String(i)+".",fe(n,i,"subscription"))}(n),function(e){e.schema.getDirectives().forEach(function(n){if(x(n)){de(e,n);var t=Object.create(null);n.args.forEach(function(a){var i=a.name;de(e,a),t[i]?e.reportError("Argument @"+n.name+"("+i+":) can only be defined once.",Oe(n,i)):(t[i]=!0,Object(r.F)(a.type)||e.reportError("The type of @"+n.name+"("+i+":) must be Input Type but got: "+String(a.type)+".",function(e,n){var t=Oe(e,n)[0];return t&&t.type}(n,i)))})}else e.reportError("Expected directive but got: "+String(n)+".",n&&n.astNode)})}(n),function(e){var n=e.schema.getTypeMap();Object(S.a)(n).forEach(function(n){Object(r.J)(n)?(J(n)||de(e,n),Object(r.M)(n)?(me(e,n),function(e,n){var t=Object.create(null);n.getInterfaces().forEach(function(a){Object(r.G)(a)?t[a.name]?e.reportError("Type "+n.name+" can only implement "+a.name+" once.",ve(n,a)):(t[a.name]=!0,function(e,n,t){var a=n.getFields(),i=t.getFields();Object.keys(i).forEach(function(o){var s=a[o],c=i[o];s?(se(e.schema,s.type,c.type)||e.reportError("Interface field "+t.name+"."+o+" expects type "+String(c.type)+" but "+n.name+"."+o+" is type "+String(s.type)+".",[be(t,o),be(n,o)]),c.args.forEach(function(r){var a=r.name,i=Object(Y.a)(s.args,function(e){return e.name===a});i?oe(r.type,i.type)||e.reportError("Interface field argument "+t.name+"."+o+"("+a+":) expects type "+String(r.type)+" but "+n.name+"."+o+"("+a+":) is type "+String(i.type)+".",[Ee(t,o,a),Ee(n,o,a)]):e.reportError("Interface field argument "+t.name+"."+o+"("+a+":) expected but "+n.name+"."+o+" does not provide it.",[xe(t,o,a),ge(n,o)])}),s.args.forEach(function(a){var i=a.name,s=Object(Y.a)(c.args,function(e){return e.name===i});!s&&Object(r.K)(a.type)&&e.reportError("Object field argument "+n.name+"."+o+"("+i+":) is of required type "+String(a.type)+" but is not also provided by the Interface field "+t.name+"."+o+".",[Ee(n,o,i),ge(t,o)])})):e.reportError("Interface field "+t.name+"."+o+" expected but "+n.name+" does not provide it.",[ge(t,o),n.astNode])})}(e,n,a)):e.reportError("Type "+String(n)+" must only implement Interface types, it cannot implement "+String(a)+".",function(e,n){return ve(e,n)[0]}(n,a))})}(e,n)):Object(r.G)(n)?me(e,n):Object(r.Q)(n)?function(e,n){var t=n.getTypes();0===t.length&&e.reportError("Union type "+n.name+" must define one or more member types.",n.astNode);var a=Object.create(null);t.forEach(function(t){a[t.name]?e.reportError("Union type "+n.name+" can only include type "+t.name+" once.",Te(n,t.name)):(a[t.name]=!0,Object(r.M)(t)||e.reportError("Union type "+n.name+" can only include Object types, it cannot include "+String(t)+".",Te(n,String(t))))})}(e,n):Object(r.D)(n)?function(e,n){var t=n.getValues();0===t.length&&e.reportError("Enum type "+n.name+" must define one or more values.",n.astNode);t.forEach(function(t){var r=t.name,a=function(e,n){return e.astNode&&e.astNode.values&&e.astNode.values.filter(function(e){return e.name.value===n})}(n,r);a&&a.length>1&&e.reportError("Enum type "+n.name+" can include value "+r+" only once.",a),de(e,t),"true"!==r&&"false"!==r&&"null"!==r||e.reportError("Enum type "+n.name+" cannot include value: "+r+".",t.astNode)})}(e,n):Object(r.E)(n)&&function(e,n){var t=Object(S.a)(n.getFields());0===t.length&&e.reportError("Input Object type "+n.name+" must define one or more fields.",n.astNode);t.forEach(function(t){de(e,t),Object(r.F)(t.type)||e.reportError("The type of "+n.name+"."+t.name+" must be Input Type but got: "+String(t.type)+".",t.astNode&&t.astNode.type)})}(e,n)):e.reportError("Expected GraphQL named type but got: "+String(n)+".",n&&n.astNode)})}(n);var t=n.getErrors();return e.__validationErrors=t,t}function pe(e){var n=ue(e);if(0!==n.length)throw new Error(n.map(function(e){return e.message}).join("\n\n"))}var le=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._errors=[],this.schema=n}return e.prototype.reportError=function(e,n){var t=(Array.isArray(n)?n:[n]).filter(Boolean);this.addError(new te.a(e,t))},e.prototype.addError=function(e){this._errors.push(e)},e.prototype.getErrors=function(){return this._errors},e}();function fe(e,n,t){var r=e.astNode,a=r&&r.operationTypes.find(function(e){return e.operation===t});return a?a.type:n&&n.astNode}function de(e,n){if(!e.schema.__allowedLegacyNames||-1===e.schema.__allowedLegacyNames.indexOf(n.name)){var t=ie(n.name,n.astNode||void 0);t&&e.addError(t)}}function me(e,n){var t=Object(S.a)(n.getFields());0===t.length&&e.reportError("Type "+n.name+" must define one or more fields.",he(n)),t.forEach(function(t){de(e,t);var a=ye(n,t.name);if(a.length>1)e.reportError("Field "+n.name+"."+t.name+" can only be defined once.",a);else{Object(r.N)(t.type)||e.reportError("The type of "+n.name+"."+t.name+" must be Output Type but got: "+String(t.type)+".",be(n,t.name));var i=Object.create(null);t.args.forEach(function(a){var o=a.name;de(e,a),i[o]&&e.reportError("Field argument "+n.name+"."+t.name+"("+o+":) can only be defined once.",we(n,t.name,o)),i[o]=!0,Object(r.F)(a.type)||e.reportError("The type of "+n.name+"."+t.name+"("+o+":) must be Input Type but got: "+String(a.type)+".",Ee(n,t.name,o))})}})}function he(e){return e.astNode?e.extensionASTNodes?[e.astNode].concat(e.extensionASTNodes):[e.astNode]:e.extensionASTNodes||[]}function ve(e,n){for(var t=[],r=function(e){return e.astNode?e.extensionASTNodes?[e.astNode].concat(e.extensionASTNodes):[e.astNode]:e.extensionASTNodes||[]}(e),a=0;a<r.length;a++){var i=r[a];i&&i.interfaces&&i.interfaces.forEach(function(e){e.name.value===n.name&&t.push(e)})}return t}function ge(e,n){return ye(e,n)[0]}function ye(e,n){for(var t=[],r=he(e),a=0;a<r.length;a++){var i=r[a];i&&i.fields&&i.fields.forEach(function(e){e.name.value===n&&t.push(e)})}return t}function be(e,n){var t=ge(e,n);return t&&t.type}function xe(e,n,t){return we(e,n,t)[0]}function we(e,n,t){var r=[],a=ge(e,n);return a&&a.arguments&&a.arguments.forEach(function(e){e.name.value===t&&r.push(e)}),r}function Ee(e,n,t){var r=xe(e,n,t);return r&&r.type}function Oe(e,n){var t=[],r=e.astNode;return r&&r.arguments&&r.arguments.forEach(function(e){e.name.value===n&&t.push(e)}),t}function Te(e,n){return e.astNode&&e.astNode.types&&e.astNode.types.filter(function(e){return e.name.value===n})}var _e=function e(n,t,r){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.body=n,this.name=t||"GraphQL request",this.locationOffset=r||{line:1,column:1},this.locationOffset.line>0||Object(y.a)(0,"line in locationOffset is 1-indexed and must be positive"),this.locationOffset.column>0||Object(y.a)(0,"column in locationOffset is 1-indexed and must be positive")},je=t(2);function ke(e){for(var n=e.split(/\r\n|[\n\r]/g),t=null,r=1;r<n.length;r++){var a=n[r],i=Ne(a);if(i<a.length&&(null===t||i<t)&&0===(t=i))break}if(t)for(var o=1;o<n.length;o++)n[o]=n[o].slice(t);for(;n.length>0&&Se(n[0]);)n.shift();for(;n.length>0&&Se(n[n.length-1]);)n.pop();return n.join("\n")}function Ne(e){for(var n=0;n<e.length&&(" "===e[n]||"\t"===e[n]);)n++;return n}function Se(e){return Ne(e)===e.length}function Ie(e,n){var t=new Pe(Ce.SOF,0,0,0,0,null);return{source:e,options:n,lastToken:t,token:t,line:1,lineStart:0,advance:Ae,lookahead:Le}}function Ae(){return this.lastToken=this.token,this.token=this.lookahead()}function Le(){var e=this.token;if(e.kind!==Ce.EOF)do{e=e.next||(e.next=Me(this,e))}while(e.kind===Ce.COMMENT);return e}var Ce=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function De(e){var n=e.value;return n?e.kind+' "'+n+'"':e.kind}var Fe=String.prototype.charCodeAt,Re=String.prototype.slice;function Pe(e,n,t,r,a,i,o){this.kind=e,this.start=n,this.end=t,this.line=r,this.column=a,this.value=o,this.prev=i,this.next=null}function qe(e){return isNaN(e)?Ce.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'+("00"+e.toString(16).toUpperCase()).slice(-4)+'"'}function Me(e,n){var t=e.source,r=t.body,a=r.length,i=function(e,n,t){var r=e.length,a=n;for(;a<r;){var i=Fe.call(e,a);if(9===i||32===i||44===i||65279===i)++a;else if(10===i)++a,++t.line,t.lineStart=a;else{if(13!==i)break;10===Fe.call(e,a+1)?a+=2:++a,++t.line,t.lineStart=a}}return a}(r,n.end,e),o=e.line,s=1+i-e.lineStart;if(i>=a)return new Pe(Ce.EOF,a,a,o,s,n);var c=Fe.call(r,i);if(c<32&&9!==c&&10!==c&&13!==c)throw Object(je.syntaxError)(t,i,"Cannot contain the invalid character "+qe(c)+".");switch(c){case 33:return new Pe(Ce.BANG,i,i+1,o,s,n);case 35:return function(e,n,t,r,a){var i=e.body,o=void 0,s=n;do{o=Fe.call(i,++s)}while(null!==o&&(o>31||9===o));return new Pe(Ce.COMMENT,n,s,t,r,a,Re.call(i,n+1,s))}(t,i,o,s,n);case 36:return new Pe(Ce.DOLLAR,i,i+1,o,s,n);case 38:return new Pe(Ce.AMP,i,i+1,o,s,n);case 40:return new Pe(Ce.PAREN_L,i,i+1,o,s,n);case 41:return new Pe(Ce.PAREN_R,i,i+1,o,s,n);case 46:if(46===Fe.call(r,i+1)&&46===Fe.call(r,i+2))return new Pe(Ce.SPREAD,i,i+3,o,s,n);break;case 58:return new Pe(Ce.COLON,i,i+1,o,s,n);case 61:return new Pe(Ce.EQUALS,i,i+1,o,s,n);case 64:return new Pe(Ce.AT,i,i+1,o,s,n);case 91:return new Pe(Ce.BRACKET_L,i,i+1,o,s,n);case 93:return new Pe(Ce.BRACKET_R,i,i+1,o,s,n);case 123:return new Pe(Ce.BRACE_L,i,i+1,o,s,n);case 124:return new Pe(Ce.PIPE,i,i+1,o,s,n);case 125:return new Pe(Ce.BRACE_R,i,i+1,o,s,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return function(e,n,t,r,a){var i=e.body,o=i.length,s=n+1,c=0;for(;s!==o&&null!==(c=Fe.call(i,s))&&(95===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122);)++s;return new Pe(Ce.NAME,n,s,t,r,a,Re.call(i,n,s))}(t,i,o,s,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e,n,t,r,a,i){var o=e.body,s=t,c=n,u=!1;45===s&&(s=Fe.call(o,++c));if(48===s){if((s=Fe.call(o,++c))>=48&&s<=57)throw Object(je.syntaxError)(e,c,"Invalid number, unexpected digit after 0: "+qe(s)+".")}else c=Ue(e,c,s),s=Fe.call(o,c);46===s&&(u=!0,s=Fe.call(o,++c),c=Ue(e,c,s),s=Fe.call(o,c));69!==s&&101!==s||(u=!0,43!==(s=Fe.call(o,++c))&&45!==s||(s=Fe.call(o,++c)),c=Ue(e,c,s));return new Pe(u?Ce.FLOAT:Ce.INT,n,c,r,a,i,Re.call(o,n,c))}(t,i,c,o,s,n);case 34:return 34===Fe.call(r,i+1)&&34===Fe.call(r,i+2)?function(e,n,t,r,a){var i=e.body,o=n+3,s=o,c=0,u="";for(;o<i.length&&null!==(c=Fe.call(i,o));){if(34===c&&34===Fe.call(i,o+1)&&34===Fe.call(i,o+2))return u+=Re.call(i,s,o),new Pe(Ce.BLOCK_STRING,n,o+3,t,r,a,ke(u));if(c<32&&9!==c&&10!==c&&13!==c)throw Object(je.syntaxError)(e,o,"Invalid character within String: "+qe(c)+".");92===c&&34===Fe.call(i,o+1)&&34===Fe.call(i,o+2)&&34===Fe.call(i,o+3)?(u+=Re.call(i,s,o)+'"""',s=o+=4):++o}throw Object(je.syntaxError)(e,o,"Unterminated string.")}(t,i,o,s,n):function(e,n,t,r,a){var i=e.body,o=n+1,s=o,c=0,u="";for(;o<i.length&&null!==(c=Fe.call(i,o))&&10!==c&&13!==c;){if(34===c)return u+=Re.call(i,s,o),new Pe(Ce.STRING,n,o+1,t,r,a,u);if(c<32&&9!==c)throw Object(je.syntaxError)(e,o,"Invalid character within String: "+qe(c)+".");if(++o,92===c){switch(u+=Re.call(i,s,o-1),c=Fe.call(i,o)){case 34:u+='"';break;case 47:u+="/";break;case 92:u+="\\";break;case 98:u+="\b";break;case 102:u+="\f";break;case 110:u+="\n";break;case 114:u+="\r";break;case 116:u+="\t";break;case 117:var p=(l=Fe.call(i,o+1),f=Fe.call(i,o+2),d=Fe.call(i,o+3),m=Fe.call(i,o+4),Qe(l)<<12|Qe(f)<<8|Qe(d)<<4|Qe(m));if(p<0)throw Object(je.syntaxError)(e,o,"Invalid character escape sequence: \\u"+i.slice(o+1,o+5)+".");u+=String.fromCharCode(p),o+=4;break;default:throw Object(je.syntaxError)(e,o,"Invalid character escape sequence: \\"+String.fromCharCode(c)+".")}s=++o}}var l,f,d,m;throw Object(je.syntaxError)(e,o,"Unterminated string.")}(t,i,o,s,n)}throw Object(je.syntaxError)(t,i,function(e){if(39===e)return"Unexpected single quote character ('), did you mean to use a double quote (\")?";return"Cannot parse the unexpected character "+qe(e)+"."}(c))}function Ue(e,n,t){var r=e.body,a=n,i=t;if(i>=48&&i<=57){do{i=Fe.call(r,++a)}while(i>=48&&i<=57);return a}throw Object(je.syntaxError)(e,a,"Invalid number, expected digit but got: "+qe(i)+".")}function Qe(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function Ge(e,n){var t="string"==typeof e?new _e(e):e;if(!(t instanceof _e))throw new TypeError("Must provide Source. Received: "+String(t));return function(e){var n=e.token;Cn(e,Ce.SOF);var t=[];do{t.push(Ke(e))}while(!Ln(e,Ce.EOF));return{kind:a.a.DOCUMENT,definitions:t,loc:Sn(e,n)}}(Ie(t,n||{}))}function Ve(e,n){var t=Ie("string"==typeof e?new _e(e):e,n||{});Cn(t,Ce.SOF);var r=on(t,!1);return Cn(t,Ce.EOF),r}function Be(e,n){var t=Ie("string"==typeof e?new _e(e):e,n||{});Cn(t,Ce.SOF);var r=dn(t);return Cn(t,Ce.EOF),r}function ze(e){var n=Cn(e,Ce.NAME);return{kind:a.a.NAME,value:n.value,loc:Sn(e,n)}}function Ke(e){if(An(e,Ce.NAME))switch(e.token.value){case"query":case"mutation":case"subscription":case"fragment":return He(e);case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"extend":case"directive":return hn(e)}else{if(An(e,Ce.BRACE_L))return He(e);if(vn(e))return hn(e)}throw Fn(e)}function He(e){if(An(e,Ce.NAME))switch(e.token.value){case"query":case"mutation":case"subscription":return $e(e);case"fragment":return function(e){var n=e.token;if(Dn(e,"fragment"),e.options.experimentalFragmentVariables)return{kind:a.a.FRAGMENT_DEFINITION,name:an(e),variableDefinitions:Ye(e),typeCondition:(Dn(e,"on"),mn(e)),directives:ln(e,!1),selectionSet:Xe(e),loc:Sn(e,n)};return{kind:a.a.FRAGMENT_DEFINITION,name:an(e),typeCondition:(Dn(e,"on"),mn(e)),directives:ln(e,!1),selectionSet:Xe(e),loc:Sn(e,n)}}(e)}else if(An(e,Ce.BRACE_L))return $e(e);throw Fn(e)}function $e(e){var n=e.token;if(An(e,Ce.BRACE_L))return{kind:a.a.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:Xe(e),loc:Sn(e,n)};var t=Je(e),r=void 0;return An(e,Ce.NAME)&&(r=ze(e)),{kind:a.a.OPERATION_DEFINITION,operation:t,name:r,variableDefinitions:Ye(e),directives:ln(e,!1),selectionSet:Xe(e),loc:Sn(e,n)}}function Je(e){var n=Cn(e,Ce.NAME);switch(n.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw Fn(e,n)}function Ye(e){return An(e,Ce.PAREN_L)?Rn(e,Ce.PAREN_L,We,Ce.PAREN_R):[]}function We(e){var n=e.token;return{kind:a.a.VARIABLE_DEFINITION,variable:Ze(e),type:(Cn(e,Ce.COLON),dn(e)),defaultValue:Ln(e,Ce.EQUALS)?on(e,!0):void 0,loc:Sn(e,n)}}function Ze(e){var n=e.token;return Cn(e,Ce.DOLLAR),{kind:a.a.VARIABLE,name:ze(e),loc:Sn(e,n)}}function Xe(e){var n=e.token;return{kind:a.a.SELECTION_SET,selections:Rn(e,Ce.BRACE_L,en,Ce.BRACE_R),loc:Sn(e,n)}}function en(e){return An(e,Ce.SPREAD)?function(e){var n=e.token;if(Cn(e,Ce.SPREAD),An(e,Ce.NAME)&&"on"!==e.token.value)return{kind:a.a.FRAGMENT_SPREAD,name:an(e),directives:ln(e,!1),loc:Sn(e,n)};var t=void 0;"on"===e.token.value&&(e.advance(),t=mn(e));return{kind:a.a.INLINE_FRAGMENT,typeCondition:t,directives:ln(e,!1),selectionSet:Xe(e),loc:Sn(e,n)}}(e):function(e){var n=e.token,t=ze(e),r=void 0,i=void 0;Ln(e,Ce.COLON)?(r=t,i=ze(e)):i=t;return{kind:a.a.FIELD,alias:r,name:i,arguments:nn(e,!1),directives:ln(e,!1),selectionSet:An(e,Ce.BRACE_L)?Xe(e):void 0,loc:Sn(e,n)}}(e)}function nn(e,n){var t=n?rn:tn;return An(e,Ce.PAREN_L)?Rn(e,Ce.PAREN_L,t,Ce.PAREN_R):[]}function tn(e){var n=e.token;return{kind:a.a.ARGUMENT,name:ze(e),value:(Cn(e,Ce.COLON),on(e,!1)),loc:Sn(e,n)}}function rn(e){var n=e.token;return{kind:a.a.ARGUMENT,name:ze(e),value:(Cn(e,Ce.COLON),cn(e)),loc:Sn(e,n)}}function an(e){if("on"===e.token.value)throw Fn(e);return ze(e)}function on(e,n){var t=e.token;switch(t.kind){case Ce.BRACKET_L:return function(e,n){var t=e.token,r=n?cn:un;return{kind:a.a.LIST,values:function(e,n,t,r){Cn(e,n);var a=[];for(;!Ln(e,r);)a.push(t(e));return a}(e,Ce.BRACKET_L,r,Ce.BRACKET_R),loc:Sn(e,t)}}(e,n);case Ce.BRACE_L:return function(e,n){var t=e.token;Cn(e,Ce.BRACE_L);var r=[];for(;!Ln(e,Ce.BRACE_R);)r.push(pn(e,n));return{kind:a.a.OBJECT,fields:r,loc:Sn(e,t)}}(e,n);case Ce.INT:return e.advance(),{kind:a.a.INT,value:t.value,loc:Sn(e,t)};case Ce.FLOAT:return e.advance(),{kind:a.a.FLOAT,value:t.value,loc:Sn(e,t)};case Ce.STRING:case Ce.BLOCK_STRING:return sn(e);case Ce.NAME:return"true"===t.value||"false"===t.value?(e.advance(),{kind:a.a.BOOLEAN,value:"true"===t.value,loc:Sn(e,t)}):"null"===t.value?(e.advance(),{kind:a.a.NULL,loc:Sn(e,t)}):(e.advance(),{kind:a.a.ENUM,value:t.value,loc:Sn(e,t)});case Ce.DOLLAR:if(!n)return Ze(e)}throw Fn(e)}function sn(e){var n=e.token;return e.advance(),{kind:a.a.STRING,value:n.value,block:n.kind===Ce.BLOCK_STRING,loc:Sn(e,n)}}function cn(e){return on(e,!0)}function un(e){return on(e,!1)}function pn(e,n){var t=e.token;return{kind:a.a.OBJECT_FIELD,name:ze(e),value:(Cn(e,Ce.COLON),on(e,n)),loc:Sn(e,t)}}function ln(e,n){for(var t=[];An(e,Ce.AT);)t.push(fn(e,n));return t}function fn(e,n){var t=e.token;return Cn(e,Ce.AT),{kind:a.a.DIRECTIVE,name:ze(e),arguments:nn(e,n),loc:Sn(e,t)}}function dn(e){var n=e.token,t=void 0;return Ln(e,Ce.BRACKET_L)?(t=dn(e),Cn(e,Ce.BRACKET_R),t={kind:a.a.LIST_TYPE,type:t,loc:Sn(e,n)}):t=mn(e),Ln(e,Ce.BANG)?{kind:a.a.NON_NULL_TYPE,type:t,loc:Sn(e,n)}:t}function mn(e){var n=e.token;return{kind:a.a.NAMED_TYPE,name:ze(e),loc:Sn(e,n)}}function hn(e){var n=vn(e)?e.lookahead():e.token;if(n.kind===Ce.NAME)switch(n.value){case"schema":return function(e){var n=e.token;Dn(e,"schema");var t=ln(e,!0),r=Rn(e,Ce.BRACE_L,yn,Ce.BRACE_R);return{kind:a.a.SCHEMA_DEFINITION,directives:t,operationTypes:r,loc:Sn(e,n)}}(e);case"scalar":return function(e){var n=e.token,t=gn(e);Dn(e,"scalar");var r=ze(e),i=ln(e,!0);return{kind:a.a.SCALAR_TYPE_DEFINITION,description:t,name:r,directives:i,loc:Sn(e,n)}}(e);case"type":return function(e){var n=e.token,t=gn(e);Dn(e,"type");var r=ze(e),i=bn(e),o=ln(e,!0),s=xn(e);return{kind:a.a.OBJECT_TYPE_DEFINITION,description:t,name:r,interfaces:i,directives:o,fields:s,loc:Sn(e,n)}}(e);case"interface":return function(e){var n=e.token,t=gn(e);Dn(e,"interface");var r=ze(e),i=ln(e,!0),o=xn(e);return{kind:a.a.INTERFACE_TYPE_DEFINITION,description:t,name:r,directives:i,fields:o,loc:Sn(e,n)}}(e);case"union":return function(e){var n=e.token,t=gn(e);Dn(e,"union");var r=ze(e),i=ln(e,!0),o=Tn(e);return{kind:a.a.UNION_TYPE_DEFINITION,description:t,name:r,directives:i,types:o,loc:Sn(e,n)}}(e);case"enum":return function(e){var n=e.token,t=gn(e);Dn(e,"enum");var r=ze(e),i=ln(e,!0),o=_n(e);return{kind:a.a.ENUM_TYPE_DEFINITION,description:t,name:r,directives:i,values:o,loc:Sn(e,n)}}(e);case"input":return function(e){var n=e.token,t=gn(e);Dn(e,"input");var r=ze(e),i=ln(e,!0),o=kn(e);return{kind:a.a.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:r,directives:i,fields:o,loc:Sn(e,n)}}(e);case"extend":return function(e){var n=e.lookahead();if(n.kind===Ce.NAME)switch(n.value){case"scalar":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"scalar");var t=ze(e),r=ln(e,!0);if(0===r.length)throw Fn(e);return{kind:a.a.SCALAR_TYPE_EXTENSION,name:t,directives:r,loc:Sn(e,n)}}(e);case"type":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"type");var t=ze(e),r=bn(e),i=ln(e,!0),o=xn(e);if(0===r.length&&0===i.length&&0===o.length)throw Fn(e);return{kind:a.a.OBJECT_TYPE_EXTENSION,name:t,interfaces:r,directives:i,fields:o,loc:Sn(e,n)}}(e);case"interface":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"interface");var t=ze(e),r=ln(e,!0),i=xn(e);if(0===r.length&&0===i.length)throw Fn(e);return{kind:a.a.INTERFACE_TYPE_EXTENSION,name:t,directives:r,fields:i,loc:Sn(e,n)}}(e);case"union":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"union");var t=ze(e),r=ln(e,!0),i=Tn(e);if(0===r.length&&0===i.length)throw Fn(e);return{kind:a.a.UNION_TYPE_EXTENSION,name:t,directives:r,types:i,loc:Sn(e,n)}}(e);case"enum":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"enum");var t=ze(e),r=ln(e,!0),i=_n(e);if(0===r.length&&0===i.length)throw Fn(e);return{kind:a.a.ENUM_TYPE_EXTENSION,name:t,directives:r,values:i,loc:Sn(e,n)}}(e);case"input":return function(e){var n=e.token;Dn(e,"extend"),Dn(e,"input");var t=ze(e),r=ln(e,!0),i=kn(e);if(0===r.length&&0===i.length)throw Fn(e);return{kind:a.a.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:r,fields:i,loc:Sn(e,n)}}(e)}throw Fn(e,n)}(e);case"directive":return function(e){var n=e.token,t=gn(e);Dn(e,"directive"),Cn(e,Ce.AT);var r=ze(e),i=En(e);Dn(e,"on");var o=function(e){Ln(e,Ce.PIPE);var n=[];do{n.push(Nn(e))}while(Ln(e,Ce.PIPE));return n}(e);return{kind:a.a.DIRECTIVE_DEFINITION,description:t,name:r,arguments:i,locations:o,loc:Sn(e,n)}}(e)}throw Fn(e,n)}function vn(e){return An(e,Ce.STRING)||An(e,Ce.BLOCK_STRING)}function gn(e){if(vn(e))return sn(e)}function yn(e){var n=e.token,t=Je(e);Cn(e,Ce.COLON);var r=mn(e);return{kind:a.a.OPERATION_TYPE_DEFINITION,operation:t,type:r,loc:Sn(e,n)}}function bn(e){var n=[];if("implements"===e.token.value){e.advance(),Ln(e,Ce.AMP);do{n.push(mn(e))}while(Ln(e,Ce.AMP)||e.options.allowLegacySDLImplementsInterfaces&&An(e,Ce.NAME))}return n}function xn(e){return e.options.allowLegacySDLEmptyFields&&An(e,Ce.BRACE_L)&&e.lookahead().kind===Ce.BRACE_R?(e.advance(),e.advance(),[]):An(e,Ce.BRACE_L)?Rn(e,Ce.BRACE_L,wn,Ce.BRACE_R):[]}function wn(e){var n=e.token,t=gn(e),r=ze(e),i=En(e);Cn(e,Ce.COLON);var o=dn(e),s=ln(e,!0);return{kind:a.a.FIELD_DEFINITION,description:t,name:r,arguments:i,type:o,directives:s,loc:Sn(e,n)}}function En(e){return An(e,Ce.PAREN_L)?Rn(e,Ce.PAREN_L,On,Ce.PAREN_R):[]}function On(e){var n=e.token,t=gn(e),r=ze(e);Cn(e,Ce.COLON);var i=dn(e),o=void 0;Ln(e,Ce.EQUALS)&&(o=cn(e));var s=ln(e,!0);return{kind:a.a.INPUT_VALUE_DEFINITION,description:t,name:r,type:i,defaultValue:o,directives:s,loc:Sn(e,n)}}function Tn(e){var n=[];if(Ln(e,Ce.EQUALS)){Ln(e,Ce.PIPE);do{n.push(mn(e))}while(Ln(e,Ce.PIPE))}return n}function _n(e){return An(e,Ce.BRACE_L)?Rn(e,Ce.BRACE_L,jn,Ce.BRACE_R):[]}function jn(e){var n=e.token,t=gn(e),r=ze(e),i=ln(e,!0);return{kind:a.a.ENUM_VALUE_DEFINITION,description:t,name:r,directives:i,loc:Sn(e,n)}}function kn(e){return An(e,Ce.BRACE_L)?Rn(e,Ce.BRACE_L,On,Ce.BRACE_R):[]}function Nn(e){var n=e.token,t=ze(e);if(b.hasOwnProperty(t.value))return t;throw Fn(e,n)}function Sn(e,n){if(!e.options.noLocation)return new In(n,e.lastToken,e.source)}function In(e,n,t){this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=t}function An(e,n){return e.token.kind===n}function Ln(e,n){var t=e.token.kind===n;return t&&e.advance(),t}function Cn(e,n){var t=e.token;if(t.kind===n)return e.advance(),t;throw Object(je.syntaxError)(e.source,t.start,"Expected "+n+", found "+De(t))}function Dn(e,n){var t=e.token;if(t.kind===Ce.NAME&&t.value===n)return e.advance(),t;throw Object(je.syntaxError)(e.source,t.start,'Expected "'+n+'", found '+De(t))}function Fn(e,n){var t=n||e.token;return Object(je.syntaxError)(e.source,t.start,"Unexpected "+De(t))}function Rn(e,n,t,r){Cn(e,n);for(var a=[t(e)];!Ln(e,r);)a.push(t(e));return a}Pe.prototype.toJSON=Pe.prototype.inspect=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},In.prototype.toJSON=In.prototype.inspect=function(){return{start:this.start,end:this.end}};var Pn=t(8),qn=t(9);var Mn=function(){function e(n,t,a){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._schema=n,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=t||Un,a&&(Object(r.F)(a)&&this._inputTypeStack.push(a),Object(r.C)(a)&&this._parentTypeStack.push(a),Object(r.N)(a)&&this._typeStack.push(a))}return e.prototype.getType=function(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]},e.prototype.getParentType=function(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]},e.prototype.getInputType=function(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]},e.prototype.getParentInputType=function(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]},e.prototype.getFieldDef=function(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]},e.prototype.getDirective=function(){return this._directive},e.prototype.getArgument=function(){return this._argument},e.prototype.getEnumValue=function(){return this._enumValue},e.prototype.enter=function(e){var n=this._schema;switch(e.kind){case a.a.SELECTION_SET:var t=Object(r.z)(this.getType());this._parentTypeStack.push(Object(r.C)(t)?t:void 0);break;case a.a.FIELD:var i=this.getParentType(),o=void 0,s=void 0;i&&(o=this._getFieldDef(n,i,e))&&(s=o.type),this._fieldDefStack.push(o),this._typeStack.push(Object(r.N)(s)?s:void 0);break;case a.a.DIRECTIVE:this._directive=n.getDirective(e.name.value);break;case a.a.OPERATION_DEFINITION:var c=void 0;"query"===e.operation?c=n.getQueryType():"mutation"===e.operation?c=n.getMutationType():"subscription"===e.operation&&(c=n.getSubscriptionType()),this._typeStack.push(Object(r.M)(c)?c:void 0);break;case a.a.INLINE_FRAGMENT:case a.a.FRAGMENT_DEFINITION:var u=e.typeCondition,p=u?Object(qn.a)(n,u):Object(r.z)(this.getType());this._typeStack.push(Object(r.N)(p)?p:void 0);break;case a.a.VARIABLE_DEFINITION:var l=Object(qn.a)(n,e.type);this._inputTypeStack.push(Object(r.F)(l)?l:void 0);break;case a.a.ARGUMENT:var f=void 0,d=void 0,m=this.getDirective()||this.getFieldDef();m&&(f=Object(Y.a)(m.args,function(n){return n.name===e.name.value}))&&(d=f.type),this._argument=f,this._inputTypeStack.push(Object(r.F)(d)?d:void 0);break;case a.a.LIST:var h=Object(r.A)(this.getInputType()),v=Object(r.I)(h)?h.ofType:h;this._inputTypeStack.push(Object(r.F)(v)?v:void 0);break;case a.a.OBJECT_FIELD:var g=Object(r.z)(this.getInputType()),y=void 0;if(Object(r.E)(g)){var b=g.getFields()[e.name.value];b&&(y=b.type)}this._inputTypeStack.push(Object(r.F)(y)?y:void 0);break;case a.a.ENUM:var x=Object(r.z)(this.getInputType()),w=void 0;Object(r.D)(x)&&(w=x.getValue(e.value)),this._enumValue=w}},e.prototype.leave=function(e){switch(e.kind){case a.a.SELECTION_SET:this._parentTypeStack.pop();break;case a.a.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case a.a.DIRECTIVE:this._directive=null;break;case a.a.OPERATION_DEFINITION:case a.a.INLINE_FRAGMENT:case a.a.FRAGMENT_DEFINITION:this._typeStack.pop();break;case a.a.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case a.a.ARGUMENT:this._argument=null,this._inputTypeStack.pop();break;case a.a.LIST:case a.a.OBJECT_FIELD:this._inputTypeStack.pop();break;case a.a.ENUM:this._enumValue=null}},e}();function Un(e,n,t){var a=t.name.value;return a===z.name&&e.getQueryType()===n?z:a===K.name&&e.getQueryType()===n?K:a===H.name&&Object(r.C)(n)?H:Object(r.M)(n)||Object(r.G)(n)?n.getFields()[a]:void 0}function Qn(e){var n=Object.create(null);return{OperationDefinition:function(t){var r=t.name;return r&&(n[r.value]?e.reportError(new je.GraphQLError(function(e){return'There can be only one operation named "'+e+'".'}(r.value),[n[r.value],r])):n[r.value]=r),!1},FragmentDefinition:function(){return!1}}}function Gn(e){var n=0;return{Document:function(e){n=e.definitions.filter(function(e){return e.kind===a.a.OPERATION_DEFINITION}).length},OperationDefinition:function(t){!t.name&&n>1&&e.reportError(new je.GraphQLError("This anonymous operation must be the only defined operation.",[t]))}}}function Vn(e){return{OperationDefinition:function(n){var t;"subscription"===n.operation&&1!==n.selectionSet.selections.length&&e.reportError(new je.GraphQLError(((t=n.name&&n.name.value)?'Subscription "'+t+'" ':"Anonymous Subscription ")+"must select only one top level field.",n.selectionSet.selections.slice(1)))}}}var Bn=t(14),zn=t(21);function Kn(e){return Object(zn.a)(e.map(function(e){return'"'+e+'"'}))}function Hn(e){return{ObjectTypeDefinition:function(){return!1},InterfaceTypeDefinition:function(){return!1},UnionTypeDefinition:function(){return!1},InputObjectTypeDefinition:function(){return!1},NamedType:function(n){var t=e.getSchema(),r=n.name.value;t.getType(r)||e.reportError(new je.GraphQLError(function(e,n){var t='Unknown type "'+e+'".';return n.length&&(t+=" Did you mean "+Kn(n)+"?"),t}(r,Object(Bn.a)(r,Object.keys(t.getTypeMap()))),[n]))}}}function $n(e){return{InlineFragment:function(n){var t=n.typeCondition;if(t){var a=Object(qn.a)(e.getSchema(),t);a&&!Object(r.C)(a)&&e.reportError(new je.GraphQLError(function(e){return'Fragment cannot condition on non composite type "'+String(e)+'".'}(Object(F.a)(t)),[t]))}},FragmentDefinition:function(n){var t=Object(qn.a)(e.getSchema(),n.typeCondition);t&&!Object(r.C)(t)&&e.reportError(new je.GraphQLError(function(e,n){return'Fragment "'+e+'" cannot condition on non composite type "'+String(n)+'".'}(n.name.value,Object(F.a)(n.typeCondition)),[n.typeCondition]))}}}function Jn(e){return{VariableDefinition:function(n){var t=Object(qn.a)(e.getSchema(),n.type);if(t&&!Object(r.F)(t)){var a=n.variable.name.value;e.reportError(new je.GraphQLError(function(e,n){return'Variable "$'+e+'" cannot be non-input type "'+n+'".'}(a,Object(F.a)(n.type)),[n.type]))}}}}function Yn(e){return{Field:function(n){var t=e.getType(),a=n.selectionSet;t&&(Object(r.H)(Object(r.z)(t))?a&&e.reportError(new je.GraphQLError(function(e,n){return'Field "'+e+'" must not have a selection since type "'+String(n)+'" has no subfields.'}(n.name.value,t),[a])):a||e.reportError(new je.GraphQLError(function(e,n){return'Field "'+e+'" of type "'+String(n)+'" must have a selection of subfields. Did you mean "'+e+' { ... }"?'}(n.name.value,t),[n])))}}}function Wn(e){return{Field:function(n){var t=e.getParentType();if(t&&!e.getFieldDef()){var a=e.getSchema(),i=n.name.value,o=function(e,n,t){if(Object(r.B)(n)){var a=[],i=Object.create(null);e.getPossibleTypes(n).forEach(function(e){e.getFields()[t]&&(a.push(e.name),e.getInterfaces().forEach(function(e){e.getFields()[t]&&(i[e.name]=(i[e.name]||0)+1)}))});var o=Object.keys(i).sort(function(e,n){return i[n]-i[e]});return o.concat(a)}return[]}(a,t,i),s=0!==o.length?[]:function(e,n,t){if(Object(r.M)(n)||Object(r.G)(n)){var a=Object.keys(n.getFields());return Object(Bn.a)(t,a)}return[]}(0,t,i);e.reportError(new je.GraphQLError(function(e,n,t,r){var a='Cannot query field "'+e+'" on type "'+n+'".';return 0!==t.length?a+=" Did you mean to use an inline fragment on "+Kn(t)+"?":0!==r.length&&(a+=" Did you mean "+Kn(r)+"?"),a}(i,t.name,o,s),[n]))}}}}function Zn(e){var n=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(t){var r=t.name.value;return n[r]?e.reportError(new je.GraphQLError('There can be only one fragment named "'+r+'".',[n[r],t.name])):n[r]=t.name,!1}}}function Xn(e){return{FragmentSpread:function(n){var t=n.name.value;e.getFragment(t)||e.reportError(new je.GraphQLError('Unknown fragment "'+t+'".',[n.name]))}}}function et(e){var n=[],t=[];return{OperationDefinition:function(e){return n.push(e),!1},FragmentDefinition:function(e){return t.push(e),!1},Document:{leave:function(){var r=Object.create(null);n.forEach(function(n){e.getRecursivelyReferencedFragments(n).forEach(function(e){r[e.name.value]=!0})}),t.forEach(function(n){var t=n.name.value;!0!==r[t]&&e.reportError(new je.GraphQLError(function(e){return'Fragment "'+e+'" is never used.'}(t),[n]))})}}}}function nt(e){return{InlineFragment:function(n){var t=e.getType(),a=e.getParentType();Object(r.C)(t)&&Object(r.C)(a)&&!ce(e.getSchema(),t,a)&&e.reportError(new je.GraphQLError(function(e,n){return'Fragment cannot be spread here as objects of type "'+String(e)+'" can never be of type "'+String(n)+'".'}(a,t),[n]))},FragmentSpread:function(n){var t=n.name.value,a=function(e,n){var t=e.getFragment(n);if(t){var a=Object(qn.a)(e.getSchema(),t.typeCondition);if(Object(r.C)(a))return a}}(e,t),i=e.getParentType();a&&i&&!ce(e.getSchema(),a,i)&&e.reportError(new je.GraphQLError(function(e,n,t){return'Fragment "'+e+'" cannot be spread here as objects of type "'+String(n)+'" can never be of type "'+String(t)+'".'}(t,i,a),[n]))}}}function tt(e){var n=Object.create(null),t=[],r=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(a){return n[a.name.value]||function a(i){var o=i.name.value;n[o]=!0;var s=e.getFragmentSpreads(i.selectionSet);if(0===s.length)return;r[o]=t.length;for(var c=0;c<s.length;c++){var u=s[c],p=u.name.value,l=r[p];if(void 0===l){if(t.push(u),!n[p]){var f=e.getFragment(p);f&&a(f)}t.pop()}else{var d=t.slice(l);e.reportError(new je.GraphQLError((m=p,h=d.map(function(e){return e.name.value}),'Cannot spread fragment "'+m+'" within itself'+(h.length?" via "+h.join(", "):"")+"."),d.concat(u)))}}var m,h;r[o]=void 0}(a),!1}}}function rt(e){var n=Object.create(null);return{OperationDefinition:function(){n=Object.create(null)},VariableDefinition:function(t){var r=t.variable.name.value;n[r]?e.reportError(new je.GraphQLError(function(e){return'There can be only one variable named "'+e+'".'}(r),[n[r],t.variable.name])):n[r]=t.variable.name}}}function at(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){e.getRecursiveVariableUsages(t).forEach(function(r){var a=r.node,i=a.name.value;!0!==n[i]&&e.reportError(new je.GraphQLError(function(e,n){return n?'Variable "$'+e+'" is not defined by operation "'+n+'".':'Variable "$'+e+'" is not defined.'}(i,t.name&&t.name.value),[a,t]))})}},VariableDefinition:function(e){n[e.variable.name.value]=!0}}}function it(e){var n=[];return{OperationDefinition:{enter:function(){n=[]},leave:function(t){var r=Object.create(null),a=e.getRecursiveVariableUsages(t),i=t.name?t.name.value:null;a.forEach(function(e){var n=e.node;r[n.name.value]=!0}),n.forEach(function(n){var t=n.variable.name.value;!0!==r[t]&&e.reportError(new je.GraphQLError(function(e,n){return n?'Variable "$'+e+'" is never used in operation "'+n+'".':'Variable "$'+e+'" is never used.'}(t,i),[n]))})}},VariableDefinition:function(e){n.push(e)}}}function ot(e){return{Directive:function(n,t,r,i,o){var s=Object(Y.a)(e.getSchema().getDirectives(),function(e){return e.name===n.name.value});if(s){var c=function(e){var n=e[e.length-1];if(!Array.isArray(n))switch(n.kind){case a.a.OPERATION_DEFINITION:switch(n.operation){case"query":return b.QUERY;case"mutation":return b.MUTATION;case"subscription":return b.SUBSCRIPTION}break;case a.a.FIELD:return b.FIELD;case a.a.FRAGMENT_SPREAD:return b.FRAGMENT_SPREAD;case a.a.INLINE_FRAGMENT:return b.INLINE_FRAGMENT;case a.a.FRAGMENT_DEFINITION:return b.FRAGMENT_DEFINITION;case a.a.SCHEMA_DEFINITION:return b.SCHEMA;case a.a.SCALAR_TYPE_DEFINITION:case a.a.SCALAR_TYPE_EXTENSION:return b.SCALAR;case a.a.OBJECT_TYPE_DEFINITION:case a.a.OBJECT_TYPE_EXTENSION:return b.OBJECT;case a.a.FIELD_DEFINITION:return b.FIELD_DEFINITION;case a.a.INTERFACE_TYPE_DEFINITION:case a.a.INTERFACE_TYPE_EXTENSION:return b.INTERFACE;case a.a.UNION_TYPE_DEFINITION:case a.a.UNION_TYPE_EXTENSION:return b.UNION;case a.a.ENUM_TYPE_DEFINITION:case a.a.ENUM_TYPE_EXTENSION:return b.ENUM;case a.a.ENUM_VALUE_DEFINITION:return b.ENUM_VALUE;case a.a.INPUT_OBJECT_TYPE_DEFINITION:case a.a.INPUT_OBJECT_TYPE_EXTENSION:return b.INPUT_OBJECT;case a.a.INPUT_VALUE_DEFINITION:var t=e[e.length-3];return t.kind===a.a.INPUT_OBJECT_TYPE_DEFINITION?b.INPUT_FIELD_DEFINITION:b.ARGUMENT_DEFINITION}}(o);c&&-1===s.locations.indexOf(c)&&e.reportError(new je.GraphQLError(function(e,n){return'Directive "'+e+'" may not be used on '+n+"."}(n.name.value,c),[n]))}else e.reportError(new je.GraphQLError('Unknown directive "'+n.name.value+'".',[n]))}}}function st(e){return{enter:function(n){var t=n.directives;if(t){var r=Object.create(null);t.forEach(function(n){var t=n.name.value;r[t]?e.reportError(new je.GraphQLError(function(e){return'The directive "'+e+'" can only be used once at this location.'}(t),[r[t],n])):r[t]=n})}}}}function ct(e){return{Argument:function(n,t,r,i,o){var s,c,u,p,l;if(!e.getArgument()){var f=o[o.length-1];if(f.kind===a.a.FIELD){var d=e.getFieldDef(),m=e.getParentType();d&&m&&e.reportError(new je.GraphQLError((s=n.name.value,c=d.name,u=m.name,p=Object(Bn.a)(n.name.value,d.args.map(function(e){return e.name})),l='Unknown argument "'+s+'" on field "'+c+'" of type "'+u+'".',p.length&&(l+=" Did you mean "+Kn(p)+"?"),l),[n]))}else if(f.kind===a.a.DIRECTIVE){var h=e.getDirective();h&&e.reportError(new je.GraphQLError(function(e,n,t){var r='Unknown argument "'+e+'" on directive "@'+n+'".';return t.length&&(r+=" Did you mean "+Kn(t)+"?"),r}(n.name.value,h.name,Object(Bn.a)(n.name.value,h.args.map(function(e){return e.name}))),[n]))}}}}}function ut(e){var n=Object.create(null);return{Field:function(){n=Object.create(null)},Directive:function(){n=Object.create(null)},Argument:function(t){var r=t.name.value;return n[r]?e.reportError(new je.GraphQLError(function(e){return'There can be only one argument named "'+e+'".'}(r),[n[r],t.name])):n[r]=t.name,!1}}}var pt=t(11);function lt(e,n,t){return"Expected type "+e+", found "+n+(t?"; "+t:".")}function ft(e){return{NullValue:function(n){var t=e.getInputType();Object(r.K)(t)&&e.reportError(new je.GraphQLError(lt(String(t),Object(F.a)(n)),n))},ListValue:function(n){var t=Object(r.A)(e.getParentInputType());if(!Object(r.I)(t))return dt(e,n),!1},ObjectValue:function(n){var t=Object(r.z)(e.getInputType());if(!Object(r.E)(t))return dt(e,n),!1;var a=t.getFields(),i=Object(pt.a)(n.fields,function(e){return e.name.value});Object.keys(a).forEach(function(o){var s=a[o].type;!i[o]&&Object(r.K)(s)&&e.reportError(new je.GraphQLError(function(e,n,t){return"Field "+e+"."+n+" of required type "+t+" was not provided."}(t.name,o,String(s)),n))})},ObjectField:function(n){var t,a,i=Object(r.z)(e.getParentInputType());if(!e.getInputType()&&Object(r.E)(i)){var o=Object(Bn.a)(n.name.value,Object.keys(i.getFields())),s=0!==o.length?"Did you mean "+Object(zn.a)(o)+"?":void 0;e.reportError(new je.GraphQLError((t=i.name,'Field "'+n.name.value+'" is not defined by type '+t+((a=s)?"; "+a:".")),n))}},EnumValue:function(n){var t=Object(r.z)(e.getInputType());Object(r.D)(t)?t.getValue(n.value)||e.reportError(new je.GraphQLError(lt(t.name,Object(F.a)(n),mt(t,n)),n)):dt(e,n)},IntValue:function(n){return dt(e,n)},FloatValue:function(n){return dt(e,n)},StringValue:function(n){return dt(e,n)},BooleanValue:function(n){return dt(e,n)}}}function dt(e,n){var t=e.getInputType();if(t){var a=Object(r.z)(t);if(Object(r.O)(a))try{var i=a.parseLiteral(n,void 0);Object(N.a)(i)&&e.reportError(new je.GraphQLError(lt(String(t),Object(F.a)(n)),n))}catch(r){e.reportError(new je.GraphQLError(lt(String(t),Object(F.a)(n),r.message),n,void 0,void 0,void 0,r))}else e.reportError(new je.GraphQLError(lt(String(t),Object(F.a)(n),mt(a,n)),n))}}function mt(e,n){if(Object(r.D)(e)){var t=Object(Bn.a)(Object(F.a)(n),e.getValues().map(function(e){return e.name}));if(0!==t.length)return"Did you mean the enum value "+Object(zn.a)(t)+"?"}}function ht(e){return{Field:{leave:function(n){var t=e.getFieldDef();if(!t)return!1;var a=n.arguments||[],i=Object(pt.a)(a,function(e){return e.name.value});t.args.forEach(function(t){var a,o,s;!i[t.name]&&Object(r.K)(t.type)&&e.reportError(new je.GraphQLError((a=n.name.value,o=t.name,s=t.type,'Field "'+a+'" argument "'+o+'" of type "'+String(s)+'" is required but not provided.'),[n]))})}},Directive:{leave:function(n){var t=e.getDirective();if(!t)return!1;var a=n.arguments||[],i=Object(pt.a)(a,function(e){return e.name.value});t.args.forEach(function(t){var a,o,s;!i[t.name]&&Object(r.K)(t.type)&&e.reportError(new je.GraphQLError((a=n.name.value,o=t.name,s=t.type,'Directive "@'+a+'" argument "'+o+'" of type "'+String(s)+'" is required but not provided.'),[n]))})}}}}function vt(e){return{VariableDefinition:function(n){var t=n.variable.name.value,a=n.defaultValue,i=e.getInputType();return Object(r.K)(i)&&a&&e.reportError(new je.GraphQLError(function(e,n,t){return'Variable "$'+e+'" of type "'+String(n)+'" is required and will not use the default value. Perhaps you meant to use type "'+String(t)+'".'}(t,i,i.ofType),[a])),!1},SelectionSet:function(){return!1},FragmentDefinition:function(){return!1}}}function gt(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){e.getRecursiveVariableUsages(t).forEach(function(t){var a=t.node,i=t.type,o=a.name.value,s=n[o];if(s&&i){var c=e.getSchema(),u=Object(qn.a)(c,s.type);u&&!se(c,function(e,n){return!n.defaultValue||Object(r.K)(e)?e:Object(r.e)(e)}(u,s),i)&&e.reportError(new je.GraphQLError(function(e,n,t){return'Variable "$'+e+'" of type "'+String(n)+'" used in position expecting type "'+String(t)+'".'}(o,u,i),[s,a]))}})}},VariableDefinition:function(e){n[e.variable.name.value]=e}}}function yt(e,n){return'Fields "'+e+'" conflict because '+function e(n){if(Array.isArray(n))return n.map(function(n){var t=n[0],r=n[1];return'subfields "'+t+'" conflict because '+e(r)}).join(" and ");return n}(n)+". Use different aliases on the fields to fetch both if this was intentional."}function bt(e){var n=new jt,t=new Map;return{SelectionSet:function(r){(function(e,n,t,r,a){var i=[],o=Tt(e,n,r,a),s=o[0],c=o[1];if(function(e,n,t,r,a){Object.keys(a).forEach(function(i){var o=a[i];if(o.length>1)for(var s=0;s<o.length;s++)for(var c=s+1;c<o.length;c++){var u=Ot(e,t,r,!1,i,o[s],o[c]);u&&n.push(u)}})}(e,i,n,t,s),0!==c.length)for(var u=Object.create(null),p=0;p<c.length;p++){xt(e,i,n,u,t,!1,s,c[p]);for(var l=p+1;l<c.length;l++)wt(e,i,n,t,!1,c[p],c[l])}return i})(e,t,n,e.getParentType(),r).forEach(function(n){var t=n[0],r=t[0],a=t[1],i=n[1],o=n[2];return e.reportError(new je.GraphQLError(yt(r,a),i.concat(o)))})}}}function xt(e,n,t,r,a,i,o,s){if(!r[s]){r[s]=!0;var c=e.getFragment(s);if(c){var u=_t(e,t,c),p=u[0],l=u[1];if(o!==p){Et(e,n,t,a,i,o,p);for(var f=0;f<l.length;f++)xt(e,n,t,r,a,i,o,l[f])}}}}function wt(e,n,t,r,a,i,o){if(i!==o&&!r.has(i,o,a)){r.add(i,o,a);var s=e.getFragment(i),c=e.getFragment(o);if(s&&c){var u=_t(e,t,s),p=u[0],l=u[1],f=_t(e,t,c),d=f[0],m=f[1];Et(e,n,t,r,a,p,d);for(var h=0;h<m.length;h++)wt(e,n,t,r,a,i,m[h]);for(var v=0;v<l.length;v++)wt(e,n,t,r,a,l[v],o)}}}function Et(e,n,t,r,a,i,o){Object.keys(i).forEach(function(s){var c=o[s];if(c)for(var u=i[s],p=0;p<u.length;p++)for(var l=0;l<c.length;l++){var f=Ot(e,t,r,a,s,u[p],c[l]);f&&n.push(f)}})}function Ot(e,n,t,a,i,o,s){var c=o[0],u=o[1],p=o[2],l=s[0],f=s[1],d=s[2],m=a||c!==l&&Object(r.M)(c)&&Object(r.M)(l),h=p&&p.type,v=d&&d.type;if(!m){var g=u.name.value,y=f.name.value;if(g!==y)return[[i,g+" and "+y+" are different fields"],[u],[f]];if(!function(e,n){if(e.length!==n.length)return!1;return e.every(function(e){var t,r,a=Object(Y.a)(n,function(n){return n.name.value===e.name.value});return!!a&&(t=e.value,r=a.value,!t&&!r||Object(F.a)(t)===Object(F.a)(r))})}(u.arguments||[],f.arguments||[]))return[[i,"they have differing arguments"],[u],[f]]}if(h&&v&&function e(n,t){if(Object(r.I)(n))return!Object(r.I)(t)||e(n.ofType,t.ofType);if(Object(r.I)(t))return!0;if(Object(r.K)(n))return!Object(r.K)(t)||e(n.ofType,t.ofType);if(Object(r.K)(t))return!0;if(Object(r.H)(n)||Object(r.H)(t))return n!==t;return!1}(h,v))return[[i,"they return conflicting types "+String(h)+" and "+String(v)],[u],[f]];var b=u.selectionSet,x=f.selectionSet;return b&&x?function(e,n,t,r){if(e.length>0)return[[n,e.map(function(e){var n=e[0];return n})],e.reduce(function(e,n){var t=n[1];return e.concat(t)},[t]),e.reduce(function(e,n){var t=n[2];return e.concat(t)},[r])]}(function(e,n,t,r,a,i,o,s){var c=[],u=Tt(e,n,a,i),p=u[0],l=u[1],f=Tt(e,n,o,s),d=f[0],m=f[1];if(Et(e,c,n,t,r,p,d),0!==m.length)for(var h=Object.create(null),v=0;v<m.length;v++)xt(e,c,n,h,t,r,p,m[v]);if(0!==l.length)for(var g=Object.create(null),y=0;y<l.length;y++)xt(e,c,n,g,t,r,d,l[y]);for(var b=0;b<l.length;b++)for(var x=0;x<m.length;x++)wt(e,c,n,t,r,l[b],m[x]);return c}(e,n,t,m,Object(r.z)(h),b,Object(r.z)(v),x),i,u,f):void 0}function Tt(e,n,t,i){var o=n.get(i);if(!o){var s=Object.create(null),c=Object.create(null);!function e(n,t,i,o,s){for(var c=0;c<i.selections.length;c++){var u=i.selections[c];switch(u.kind){case a.a.FIELD:var p=u.name.value,l=void 0;(Object(r.M)(t)||Object(r.G)(t))&&(l=t.getFields()[p]);var f=u.alias?u.alias.value:p;o[f]||(o[f]=[]),o[f].push([t,u,l]);break;case a.a.FRAGMENT_SPREAD:s[u.name.value]=!0;break;case a.a.INLINE_FRAGMENT:var d=u.typeCondition,m=d?Object(qn.a)(n.getSchema(),d):t;e(n,m,u.selectionSet,o,s)}}}(e,t,i,s,c),o=[s,Object.keys(c)],n.set(i,o)}return o}function _t(e,n,t){var r=n.get(t.selectionSet);return r||Tt(e,n,Object(qn.a)(e.getSchema(),t.typeCondition),t.selectionSet)}var jt=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=Object.create(null)}return e.prototype.has=function(e,n,t){var r=this._data[e],a=r&&r[n];return void 0!==a&&(!1!==t||!1===a)},e.prototype.add=function(e,n,t){kt(this._data,e,n,t),kt(this._data,n,e,t)},e}();function kt(e,n,t,r){var a=e[n];a||(a=Object.create(null),e[n]=a),a[t]=r}function Nt(e){var n=[],t=Object.create(null);return{ObjectValue:{enter:function(){n.push(t),t=Object.create(null)},leave:function(){t=n.pop()}},ObjectField:function(n){var r=n.name.value;return t[r]?e.reportError(new je.GraphQLError(function(e){return'There can be only one input field named "'+e+'".'}(r),[t[r],n.name])):t[r]=n.name,!1}}}var St=[function(e){return{Document:function(n){return n.definitions.forEach(function(n){n.kind!==a.a.OPERATION_DEFINITION&&n.kind!==a.a.FRAGMENT_DEFINITION&&e.reportError(new je.GraphQLError("The "+(n.kind===a.a.SCHEMA_DEFINITION?"schema":n.name.value)+" definition is not executable.",[n]))}),!1}}},Qn,Gn,Vn,Hn,$n,Jn,Yn,Wn,Zn,Xn,et,nt,tt,rt,at,it,ot,st,ct,ut,ft,ht,vt,gt,bt,Nt];var It=function(){function e(n,t,r){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._schema=n,this._ast=t,this._typeInfo=r,this._errors=[],this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}return e.prototype.reportError=function(e){this._errors.push(e)},e.prototype.getErrors=function(){return this._errors},e.prototype.getSchema=function(){return this._schema},e.prototype.getDocument=function(){return this._ast},e.prototype.getFragment=function(e){var n=this._fragments;return n||(this._fragments=n=this.getDocument().definitions.reduce(function(e,n){return n.kind===a.a.FRAGMENT_DEFINITION&&(e[n.name.value]=n),e},Object.create(null))),n[e]},e.prototype.getFragmentSpreads=function(e){var n=this._fragmentSpreads.get(e);if(!n){n=[];for(var t=[e];0!==t.length;)for(var r=t.pop(),i=0;i<r.selections.length;i++){var o=r.selections[i];o.kind===a.a.FRAGMENT_SPREAD?n.push(o):o.selectionSet&&t.push(o.selectionSet)}this._fragmentSpreads.set(e,n)}return n},e.prototype.getRecursivelyReferencedFragments=function(e){var n=this._recursivelyReferencedFragments.get(e);if(!n){n=[];for(var t=Object.create(null),r=[e.selectionSet];0!==r.length;)for(var a=r.pop(),i=this.getFragmentSpreads(a),o=0;o<i.length;o++){var s=i[o].name.value;if(!0!==t[s]){t[s]=!0;var c=this.getFragment(s);c&&(n.push(c),r.push(c.selectionSet))}}this._recursivelyReferencedFragments.set(e,n)}return n},e.prototype.getVariableUsages=function(e){var n=this._variableUsages.get(e);if(!n){var t=[],r=new Mn(this._schema);Object(Pn.c)(e,Object(Pn.e)(r,{VariableDefinition:function(){return!1},Variable:function(e){t.push({node:e,type:r.getInputType()})}})),n=t,this._variableUsages.set(e,n)}return n},e.prototype.getRecursiveVariableUsages=function(e){var n=this._recursiveVariableUsages.get(e);if(!n){n=this.getVariableUsages(e);for(var t=this.getRecursivelyReferencedFragments(e),r=0;r<t.length;r++)Array.prototype.push.apply(n,this.getVariableUsages(t[r]));this._recursiveVariableUsages.set(e,n)}return n},e.prototype.getType=function(){return this._typeInfo.getType()},e.prototype.getParentType=function(){return this._typeInfo.getParentType()},e.prototype.getInputType=function(){return this._typeInfo.getInputType()},e.prototype.getParentInputType=function(){return this._typeInfo.getParentInputType()},e.prototype.getFieldDef=function(){return this._typeInfo.getFieldDef()},e.prototype.getDirective=function(){return this._typeInfo.getDirective()},e.prototype.getArgument=function(){return this._typeInfo.getArgument()},e}();function At(e,n,t,r){return n||Object(y.a)(0,"Must provide document"),pe(e),function(e,n,t,r){var a=new It(e,t,n),i=r.map(function(e){return e(a)});return Object(Pn.c)(t,Object(Pn.e)(n,Object(Pn.d)(i))),a.getErrors()}(e,r||new Mn(e),n,t||St)}function Lt(e){return Boolean(e&&"function"==typeof e.then)}var Ct=t(18),Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function Ft(e,n,t,r,a,i,o){return 1===arguments.length?Rt(e.schema,e.document,e.rootValue,e.contextValue,e.variableValues,e.operationName,e.fieldResolver):Rt(e,n,t,r,a,i,o)}function Rt(e,n,t,r,a,i,o){Mt(e,n,a);var s=Ut(e,n,t,r,a,i,o);return Array.isArray(s)?{errors:s}:function e(n,t){if(Lt(t))return t.then(function(t){return e(n,t)});return 0===n.errors.length?{data:t}:{errors:n.errors,data:t}}(s,function(e,n,t){var r=Qt(e.schema,n),a=Vt(e,r,n.selectionSet,Object.create(null),Object.create(null)),i=void 0;try{var o="mutation"===n.operation?function(e,n,t,r,a){return i=Object.keys(a),o=function(i,o){var s=a[o],c=qt(r,o),u=Kt(e,n,t,s,c);return void 0===u?i:Lt(u)?u.then(function(e){return i[o]=e,i}):(i[o]=u,i)},s=Object.create(null),i.reduce(function(e,n){return Lt(e)?e.then(function(e){return o(e,n)}):o(e,n)},s);var i,o,s}(e,r,t,i,a):Gt(e,r,t,i,a);return Lt(o)?o.then(void 0,function(n){return e.errors.push(n),Promise.resolve(null)}):o}catch(n){return e.errors.push(n),null}}(s,s.operation,t))}function Pt(e){for(var n=[],t=e;t;)n.push(t.key),t=t.prev;return n.reverse()}function qt(e,n){return{prev:e,key:n}}function Mt(e,n,t){n||Object(y.a)(0,"Must provide document"),pe(e),t&&"object"!==(void 0===t?"undefined":Dt(t))&&Object(y.a)(0,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function Ut(e,n,t,r,i,o,s){for(var c=[],u=void 0,p=!1,l=Object.create(null),f=0;f<n.definitions.length;f++){var d=n.definitions[f];switch(d.kind){case a.a.OPERATION_DEFINITION:!o&&u?p=!0:(!o||d.name&&d.name.value===o)&&(u=d);break;case a.a.FRAGMENT_DEFINITION:l[d.name.value]=d}}u?p&&c.push(new je.GraphQLError("Must provide operation name if query contains multiple operations.")):o?c.push(new je.GraphQLError('Unknown operation named "'+o+'".')):c.push(new je.GraphQLError("Must provide an operation."));var m=void 0;if(u){var h=Object(Ct.getVariableValues)(e,u.variableDefinitions||[],i||{});h.errors?c.push.apply(c,h.errors):m=h.coerced}return 0!==c.length?c:(u||Object(y.a)(0,"Has operation if no errors."),m||Object(y.a)(0,"Has variables if no errors."),{schema:e,fragments:l,rootValue:t,contextValue:r,operation:u,variableValues:m,fieldResolver:s||ir,errors:c})}function Qt(e,n){switch(n.operation){case"query":var t=e.getQueryType();if(!t)throw new je.GraphQLError("Schema does not define the required query root type.",[n]);return t;case"mutation":var r=e.getMutationType();if(!r)throw new je.GraphQLError("Schema is not configured for mutations.",[n]);return r;case"subscription":var a=e.getSubscriptionType();if(!a)throw new je.GraphQLError("Schema is not configured for subscriptions.",[n]);return a;default:throw new je.GraphQLError("Can only execute queries, mutations and subscriptions.",[n])}}function Gt(e,n,t,r,a){var i,o,s,c=!1,u=Object.keys(a).reduce(function(i,o){var s=a[o],u=qt(r,o),p=Kt(e,n,t,s,u);return void 0===p?i:(i[o]=p,!c&&Lt(p)&&(c=!0),i)},Object.create(null));return c?(i=u,o=Object.keys(i),s=o.map(function(e){return i[e]}),Promise.all(s).then(function(e){return e.reduce(function(e,n,t){return e[o[t]]=n,e},Object.create(null))})):u}function Vt(e,n,t,r,i){for(var o=0;o<t.selections.length;o++){var s=t.selections[o];switch(s.kind){case a.a.FIELD:if(!Bt(e,s))continue;var c=(l=s).alias?l.alias.value:l.name.value;r[c]||(r[c]=[]),r[c].push(s);break;case a.a.INLINE_FRAGMENT:if(!Bt(e,s)||!zt(e,s,n))continue;Vt(e,n,s.selectionSet,r,i);break;case a.a.FRAGMENT_SPREAD:var u=s.name.value;if(i[u]||!Bt(e,s))continue;i[u]=!0;var p=e.fragments[u];if(!p||!zt(e,p,n))continue;Vt(e,n,p.selectionSet,r,i)}}var l;return r}function Bt(e,n){var t=Object(Ct.getDirectiveValues)(O,n,e.variableValues);if(t&&!0===t.if)return!1;var r=Object(Ct.getDirectiveValues)(E,n,e.variableValues);return!r||!1!==r.if}function zt(e,n,t){var a=n.typeCondition;if(!a)return!0;var i=Object(qn.a)(e.schema,a);return i===t||!!Object(r.B)(i)&&e.schema.isPossibleType(i,t)}function Kt(e,n,t,r,a){var i=r[0].name.value,o=or(e.schema,n,i);if(o){var s=o.resolve||e.fieldResolver,c=Ht(e,o,r,n,a),u=$t(e,o,r,s,t,c);return Yt(e,o.type,r,c,a,u)}}function Ht(e,n,t,r,a){return{fieldName:t[0].name.value,fieldNodes:t,returnType:n.type,parentType:r,path:a,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function $t(e,n,t,r,a,i){try{var o=r(a,Object(Ct.getArgumentValues)(n,t[0],e.variableValues),e.contextValue,i);return Lt(o)?o.then(void 0,Jt):o}catch(e){return Jt(e)}}function Jt(e){return e instanceof Error?e:new Error(e||void 0)}function Yt(e,n,t,a,i,o){if(Object(r.K)(n))return Wt(e,n,t,a,i,o);try{var s=Wt(e,n,t,a,i,o);return Lt(s)?s.then(void 0,function(n){return e.errors.push(n),Promise.resolve(null)}):s}catch(n){return e.errors.push(n),null}}function Wt(e,n,t,a,i,o){try{var s=function e(n,t,a,i,o,s){if(Lt(s))return s.then(function(r){return e(n,t,a,i,o,r)});if(s instanceof Error)throw s;if(Object(r.K)(t)){var c=e(n,t.ofType,a,i,o,s);if(null===c)throw new Error("Cannot return null for non-nullable field "+i.parentType.name+"."+i.fieldName+".");return c}if(Object(A.a)(s))return null;if(Object(r.I)(t))return function(e,n,t,r,a,i){Object(I.isCollection)(i)||Object(y.a)(0,"Expected Iterable, but did not find one for field "+r.parentType.name+"."+r.fieldName+".");var o=n.ofType,s=!1,c=[];return Object(I.forEach)(i,function(n,i){var u=qt(a,i),p=Yt(e,o,t,r,u,n);!s&&Lt(p)&&(s=!0),c.push(p)}),s?Promise.all(c):c}(n,t,a,i,o,s);if(Object(r.H)(t))return function(e,n){e.serialize||Object(y.a)(0,"Missing serialize method on type");var t=e.serialize(n);if(Object(N.a)(t))throw new Error('Expected a value of type "'+String(e)+'" but received: '+String(n));return t}(t,s);if(Object(r.B)(t))return function(e,n,t,r,a,i){var o=n.resolveType?n.resolveType(i,e.contextValue,r):function(e,n,t,r){if(null!==e&&"object"===(void 0===e?"undefined":Dt(e))&&"string"==typeof e.__typename)return e.__typename;for(var a=t.schema.getPossibleTypes(r),i=[],o=0;o<a.length;o++){var s=a[o];if(s.isTypeOf){var c=s.isTypeOf(e,n,t);if(Lt(c))i[o]=c;else if(c)return s}}if(i.length)return Promise.all(i).then(function(e){for(var n=0;n<e.length;n++)if(e[n])return a[n]})}(i,e.contextValue,r,n);if(Lt(o))return o.then(function(o){return Xt(e,Zt(o,e,n,t,r,i),t,r,a,i)});return Xt(e,Zt(o,e,n,t,r,i),t,r,a,i)}(n,t,a,i,o,s);if(Object(r.M)(t))return Xt(n,t,a,i,o,s);throw new Error('Cannot complete value of unexpected type "'+String(t)+'".')}(e,n,t,a,i,o);return Lt(s)?s.then(void 0,function(e){return Promise.reject(Object(je.locatedError)(Jt(e),t,Pt(i)))}):s}catch(e){throw Object(je.locatedError)(Jt(e),t,Pt(i))}}function Zt(e,n,t,a,i,o){var s="string"==typeof e?n.schema.getType(e):e;if(!Object(r.M)(s))throw new je.GraphQLError("Abstract type "+t.name+" must resolve to an Object type at runtime for field "+i.parentType.name+"."+i.fieldName+' with value "'+String(o)+'", received "'+String(s)+'". Either the '+t.name+' type should provide a "resolveType" function or each possible types should provide an "isTypeOf" function.',a);if(!n.schema.isPossibleType(t,s))throw new je.GraphQLError('Runtime Object type "'+s.name+'" is not a possible type for "'+t.name+'".',a);return s}function Xt(e,n,t,r,a,i){if(n.isTypeOf){var o=n.isTypeOf(i,e.contextValue,r);if(Lt(o))return o.then(function(o){if(!o)throw er(n,i,t);return nr(e,n,t,r,a,i)});if(!o)throw er(n,i,t)}return nr(e,n,t,r,a,i)}function er(e,n,t){return new je.GraphQLError('Expected value of type "'+e.name+'" but got: '+String(n)+".",t)}function nr(e,n,t,r,a,i){return Gt(e,n,i,a,ar(e,n,t))}var tr,rr,ar=(tr=function(e,n,t){for(var r=Object.create(null),a=Object.create(null),i=0;i<t.length;i++){var o=t[i].selectionSet;o&&(r=Vt(e,n,o,r,a))}return r},rr=void 0,function(e,n,t){rr||(rr=new WeakMap);var r=rr.get(e),a=void 0;if(r){if(a=r.get(n)){var i=a.get(t);if(void 0!==i)return i}}else r=new WeakMap,rr.set(e,r);a||(a=new WeakMap,r.set(n,a));var o=tr.apply(this,arguments);return a.set(t,o),o});var ir=function(e,n,t,r){if("object"===(void 0===e?"undefined":Dt(e))||"function"==typeof e){var a=e[r.fieldName];return"function"==typeof a?e[r.fieldName](n,t,r):a}};function or(e,n,t){return t===z.name&&e.getQueryType()===n?z:t===K.name&&e.getQueryType()===n?K:t===H.name?H:n.getFields()[t]}function sr(e,n,t,r,a,i,o){var s=arguments;return new Promise(function(c){return c(1===s.length?ur(e.schema,e.source,e.rootValue,e.contextValue,e.variableValues,e.operationName,e.fieldResolver):ur(e,n,t,r,a,i,o))})}function cr(e,n,t,r,a,i,o){var s=1===arguments.length?ur(e.schema,e.source,e.rootValue,e.contextValue,e.variableValues,e.operationName,e.fieldResolver):ur(e,n,t,r,a,i,o);if(s.then)throw new Error("GraphQL execution failed to complete synchronously.");return s}function ur(e,n,t,r,a,i,o){var s=ue(e);if(s.length>0)return{errors:s};var c=void 0;try{c=Ge(n)}catch(e){return{errors:[e]}}var u=At(e,c);return u.length>0?{errors:u}:Ft(e,c,t,r,a,i,o)}var pr=t(22),lr=t(29);function fr(e,n,t){var r=Object(I.getAsyncIterator)(e),a=void 0,i=void 0;function o(e){return e.done?e:dr(e.value,n).then(mr,i)}"function"==typeof r.return&&(a=r.return,i=function(e){var n=function(){return Promise.reject(e)};return a.call(r).then(n,n)});var s,c,u,p=void 0;if(t){var l=t;p=function(e){return dr(e,l).then(mr,i)}}return s={next:function(){return r.next().then(o,p)},return:function(){return a?a.call(r).then(o,p):Promise.resolve({value:void 0,done:!0})},throw:function(e){return"function"==typeof r.throw?r.throw(e).then(o,p):Promise.reject(e).catch(i)}},c=I.$$asyncIterator,u=function(){return this},c in s?Object.defineProperty(s,c,{value:u,enumerable:!0,configurable:!0,writable:!0}):s[c]=u,s}function dr(e,n){return new Promise(function(t){return t(n(e))})}function mr(e){return{value:e,done:!1}}function hr(e,n,t,r,a,i,o,s){return 1===arguments.length?gr(e.schema,e.document,e.rootValue,e.contextValue,e.variableValues,e.operationName,e.fieldResolver,e.subscribeFieldResolver):gr(e,n,t,r,a,i,o,s)}function vr(e){if(e instanceof te.a)return{errors:[e]};throw e}function gr(e,n,t,r,a,i,o,s){var c=function(t){return Ft(e,n,t,r,a,i,o)};return yr(e,n,t,r,a,i,s).then(function(e){return Object(I.isAsyncIterable)(e)?fr(e,c,vr):e},vr)}function yr(e,n,t,r,a,i,o){Mt(e,n,a);try{var s=Ut(e,n,t,r,a,i,o);if(Array.isArray(s))return Promise.resolve({errors:s});var c=Qt(e,s.operation),u=Vt(s,c,s.operation.selectionSet,Object.create(null),Object.create(null)),p=Object.keys(u)[0],l=u[p],f=l[0].name.value,d=or(e,c,f);if(!d)throw new te.a('The subscription field "'+f+'" is not defined.',l);var m=d.subscribe||s.fieldResolver,h=qt(void 0,p),v=Ht(s,d,l,c,h),g=$t(s,d,l,m,t,v);return Promise.resolve(g).then(function(e){if(e instanceof Error)throw Object(lr.a)(e,l,Pt(h));if(Object(I.isAsyncIterable)(e))return e;throw new Error("Subscription field must return Async Iterable. Received: "+String(e))})}catch(e){return Promise.reject(e)}}function br(e){var n=!(e&&!1===e.descriptions);return"\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          "+(n?"description":"")+"\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      "+(n?"description":"")+"\n      fields(includeDeprecated: true) {\n        name\n        "+(n?"description":"")+"\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        "+(n?"description":"")+"\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      "+(n?"description":"")+"\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "}var xr=br();function wr(e,n){for(var t=null,r=0;r<e.definitions.length;r++){var i=e.definitions[r];if(i.kind===a.a.OPERATION_DEFINITION)if(n){if(i.name&&i.name.value===n)return i}else{if(t)return null;t=i}}return t}function Er(e,n){var t=Ft(e,Ge(br(n)));return(t.then||t.errors||!t.data)&&Object(y.a)(0),t.data}var Or=t(15),Tr=t(19);function _r(e,n){var t=e.__schema,a=Object(pt.a)(t.types,function(e){return e.name}),i=Object(pt.a)(h.concat($),function(e){return e.name});function o(e){if(e.kind===V.LIST){var n=e.ofType;if(!n)throw new Error("Decorated type deeper than introspection query.");return Object(r.d)(o(n))}if(e.kind===V.NON_NULL){var t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");var a=o(t);return Object(r.e)(Object(r.s)(a))}if(!e.name)throw new Error("Unknown type reference: "+JSON.stringify(e));return s(e.name)}function s(e){if(i[e])return i[e];var n=a[e];if(!n)throw new Error("Invalid or incomplete schema, unknown type: "+e+". Ensure that a full introspection query is used in order to build a client schema.");var t=function(e){if(e&&e.name&&e.kind)switch(e.kind){case V.SCALAR:return t=e,new r.g({name:t.name,description:t.description,serialize:function(e){return e}});case V.OBJECT:return function(e){if(!e.interfaces)throw new Error("Introspection result missing interfaces: "+JSON.stringify(e));return new r.f({name:e.name,description:e.description,interfaces:e.interfaces.map(u),fields:function(){return p(e)}})}(e);case V.INTERFACE:return n=e,new r.c({name:n.name,description:n.description,fields:function(){return p(n)}});case V.UNION:return function(e){if(!e.possibleTypes)throw new Error("Introspection result missing possibleTypes: "+JSON.stringify(e));return new r.h({name:e.name,description:e.description,types:e.possibleTypes.map(c)})}(e);case V.ENUM:return function(e){if(!e.enumValues)throw new Error("Introspection result missing enumValues: "+JSON.stringify(e));return new r.a({name:e.name,description:e.description,values:Object(Or.a)(e.enumValues,function(e){return e.name},function(e){return{description:e.description,deprecationReason:e.deprecationReason}})})}(e);case V.INPUT_OBJECT:return function(e){if(!e.inputFields)throw new Error("Introspection result missing inputFields: "+JSON.stringify(e));return new r.b({name:e.name,description:e.description,fields:function(){return l(e.inputFields)}})}(e)}var n;var t;throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:"+JSON.stringify(e))}(n);return i[e]=t,t}function c(e){var n=o(e);return Object(r.t)(n)}function u(e){var n=o(e);return Object(r.n)(n)}function p(e){if(!e.fields)throw new Error("Introspection result missing fields: "+JSON.stringify(e));return Object(Or.a)(e.fields,function(e){return e.name},function(e){if(!e.args)throw new Error("Introspection result missing field args: "+JSON.stringify(e));return{description:e.description,deprecationReason:e.deprecationReason,type:(n=e.type,t=o(n),Object(r.N)(t)||Object(y.a)(0,"Introspection must provide output type for fields."),t),args:l(e.args)};var n,t})}function l(e){return Object(Or.a)(e,function(e){return e.name},f)}function f(e){var n=function(e){var n=o(e);return Object(r.F)(n)||Object(y.a)(0,"Introspection must provide input type for arguments."),n}(e.type),t=e.defaultValue?Object(Tr.a)(Ve(e.defaultValue),n):void 0;return{name:e.name,description:e.description,type:n,defaultValue:t}}var d=t.types.map(function(e){return s(e.name)}),m=t.queryType?c(t.queryType):null,v=t.mutationType?c(t.mutationType):null,g=t.subscriptionType?c(t.subscriptionType):null,x=t.directives?t.directives.map(function(e){var n=e.locations?e.locations.slice():[].concat(e.onField?[b.FIELD]:[],e.onOperation?[b.QUERY,b.MUTATION,b.SUBSCRIPTION]:[],e.onFragment?[b.FRAGMENT_DEFINITION,b.FRAGMENT_SPREAD,b.INLINE_FRAGMENT]:[]);if(!e.args)throw new Error("Introspection result missing directive args: "+JSON.stringify(e));return new w({name:e.name,description:e.description,locations:n,args:l(e.args)})}):[];return new X({query:m,mutation:v,subscription:g,types:d,directives:x,assumeValid:n&&n.assumeValid,allowedLegacyNames:n&&n.allowedLegacyNames})}function jr(e,n){if(!e||e.kind!==a.a.DOCUMENT)throw new Error("Must provide a document ast.");for(var t=void 0,r=[],i=Object.create(null),o=[],s=0;s<e.definitions.length;s++){var c=e.definitions[s];switch(c.kind){case a.a.SCHEMA_DEFINITION:if(t)throw new Error("Must provide only one schema definition.");t=c;break;case a.a.SCALAR_TYPE_DEFINITION:case a.a.OBJECT_TYPE_DEFINITION:case a.a.INTERFACE_TYPE_DEFINITION:case a.a.ENUM_TYPE_DEFINITION:case a.a.UNION_TYPE_DEFINITION:case a.a.INPUT_OBJECT_TYPE_DEFINITION:var u=c.name.value;if(i[u])throw new Error('Type "'+u+'" was defined more than once.');r.push(c),i[u]=c;break;case a.a.DIRECTIVE_DEFINITION:o.push(c)}}var p,l=t?(p={},t.operationTypes.forEach(function(e){var n=e.type.name.value,t=e.operation;if(p[t])throw new Error("Must provide only one "+t+" type in schema.");if(!i[n])throw new Error("Specified "+t+' type "'+n+'" not found in document.');p[t]=e.type}),p):{query:i.Query,mutation:i.Mutation,subscription:i.Subscription},f=new kr(i,n,function(e){throw new Error('Type "'+e.name.value+'" not found in document.')}),d=f.buildTypes(r),m=o.map(function(e){return f.buildDirective(e)});return m.some(function(e){return"skip"===e.name})||m.push(O),m.some(function(e){return"include"===e.name})||m.push(E),m.some(function(e){return"deprecated"===e.name})||m.push(_),new X({query:l.query?f.buildType(l.query):null,mutation:l.mutation?f.buildType(l.mutation):null,subscription:l.subscription?f.buildType(l.subscription):null,types:d,directives:m,astNode:t,assumeValid:n&&n.assumeValid,allowedLegacyNames:n&&n.allowedLegacyNames})}var kr=function(){function e(n,t,r){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._typeDefinitionsMap=n,this._options=t,this._resolveType=r,this._cache=Object(pt.a)(h.concat($),function(e){return e.name})}return e.prototype.buildTypes=function(e){var n=this;return e.map(function(e){return n.buildType(e)})},e.prototype.buildType=function(e){var n=e.name.value;if(!this._cache[n])if(e.kind===a.a.NAMED_TYPE){var t=this._typeDefinitionsMap[n];this._cache[n]=t?this._makeSchemaDef(t):this._resolveType(e)}else this._cache[n]=this._makeSchemaDef(e);return this._cache[n]},e.prototype._buildWrappedType=function(e){return function e(n,t){if(t.kind===a.a.LIST_TYPE)return Object(r.d)(e(n,t.type));if(t.kind===a.a.NON_NULL_TYPE){var i=e(n,t.type);return Object(r.e)(Object(r.s)(i))}return n}(this.buildType(function(e){for(var n=e;n.kind===a.a.LIST_TYPE||n.kind===a.a.NON_NULL_TYPE;)n=n.type;return n}(e)),e)},e.prototype.buildDirective=function(e){return new w({name:e.name.value,description:Sr(e,this._options),locations:e.locations.map(function(e){return e.value}),args:e.arguments&&this._makeInputValues(e.arguments),astNode:e})},e.prototype.buildField=function(e){return{type:this._buildWrappedType(e.type),description:Sr(e,this._options),args:e.arguments&&this._makeInputValues(e.arguments),deprecationReason:Nr(e),astNode:e}},e.prototype._makeSchemaDef=function(e){switch(e.kind){case a.a.OBJECT_TYPE_DEFINITION:return this._makeTypeDef(e);case a.a.INTERFACE_TYPE_DEFINITION:return this._makeInterfaceDef(e);case a.a.ENUM_TYPE_DEFINITION:return this._makeEnumDef(e);case a.a.UNION_TYPE_DEFINITION:return this._makeUnionDef(e);case a.a.SCALAR_TYPE_DEFINITION:return this._makeScalarDef(e);case a.a.INPUT_OBJECT_TYPE_DEFINITION:return this._makeInputObjectDef(e);default:throw new Error('Type kind "'+e.kind+'" not supported.')}},e.prototype._makeTypeDef=function(e){var n=this,t=e.name.value,a=e.interfaces;return new r.f({name:t,description:Sr(e,this._options),fields:function(){return n._makeFieldDefMap(e)},interfaces:a?function(){return n.buildTypes(a)}:[],astNode:e})},e.prototype._makeFieldDefMap=function(e){var n=this;return e.fields?Object(Or.a)(e.fields,function(e){return e.name.value},function(e){return n.buildField(e)}):{}},e.prototype._makeInputValues=function(e){var n=this;return Object(Or.a)(e,function(e){return e.name.value},function(e){var t=n._buildWrappedType(e.type);return{type:t,description:Sr(e,n._options),defaultValue:Object(Tr.a)(e.defaultValue,t),astNode:e}})},e.prototype._makeInterfaceDef=function(e){var n=this;return new r.c({name:e.name.value,description:Sr(e,this._options),fields:function(){return n._makeFieldDefMap(e)},astNode:e})},e.prototype._makeEnumDef=function(e){var n=this;return new r.a({name:e.name.value,description:Sr(e,this._options),values:e.values?Object(Or.a)(e.values,function(e){return e.name.value},function(e){return{description:Sr(e,n._options),deprecationReason:Nr(e),astNode:e}}):{},astNode:e})},e.prototype._makeUnionDef=function(e){return new r.h({name:e.name.value,description:Sr(e,this._options),types:e.types?this.buildTypes(e.types):[],astNode:e})},e.prototype._makeScalarDef=function(e){return new r.g({name:e.name.value,description:Sr(e,this._options),astNode:e,serialize:function(e){return e}})},e.prototype._makeInputObjectDef=function(e){var n=this;return new r.b({name:e.name.value,description:Sr(e,this._options),fields:function(){return e.fields?n._makeInputValues(e.fields):{}},astNode:e})},e}();function Nr(e){var n=Object(Ct.getDirectiveValues)(_,e);return n&&n.reason}function Sr(e,n){if(e.description)return e.description.value;if(n&&n.commentDescriptions){var t=function(e){var n=e.loc;if(!n)return;var t=[],r=n.startToken.prev;for(;r&&r.kind===Ce.COMMENT&&r.next&&r.prev&&r.line+1===r.next.line&&r.line!==r.prev.line;){var a=String(r.value);t.push(a),r=r.prev}return t.reverse().join("\n")}(e);if(void 0!==t)return ke("\n"+t)}}function Ir(e,n){return jr(Ge(e,n),n)}function Ar(e,n,t){Z(e)||Object(y.a)(0,"Must provide valid GraphQLSchema"),n&&n.kind===a.a.DOCUMENT||Object(y.a)(0,"Must provide valid Document AST");for(var i=Object.create(null),o=Object.create(null),s=[],c=0;c<n.definitions.length;c++){var u=n.definitions[c];switch(u.kind){case a.a.OBJECT_TYPE_DEFINITION:case a.a.INTERFACE_TYPE_DEFINITION:case a.a.ENUM_TYPE_DEFINITION:case a.a.UNION_TYPE_DEFINITION:case a.a.SCALAR_TYPE_DEFINITION:case a.a.INPUT_OBJECT_TYPE_DEFINITION:var p=u.name.value;if(e.getType(p))throw new te.a('Type "'+p+'" already exists in the schema. It cannot also be defined in this type definition.',[u]);i[p]=u;break;case a.a.OBJECT_TYPE_EXTENSION:case a.a.INTERFACE_TYPE_EXTENSION:var l=u.name.value,f=e.getType(l);if(!f)throw new te.a('Cannot extend type "'+l+'" because it does not exist in the existing schema.',[u]);Lr(f,u);var d=o[l];o[l]=d?d.concat([u]):[u];break;case a.a.DIRECTIVE_DEFINITION:var m=u.name.value;if(e.getDirective(m))throw new te.a('Directive "'+m+'" already exists in the schema. It cannot be redefined.',[u]);s.push(u);break;case a.a.SCALAR_TYPE_EXTENSION:case a.a.UNION_TYPE_EXTENSION:case a.a.ENUM_TYPE_EXTENSION:case a.a.INPUT_OBJECT_TYPE_EXTENSION:throw new Error("The "+u.kind+" kind is not yet supported by extendSchema().")}}if(0===Object.keys(o).length&&0===Object.keys(i).length&&0===s.length)return e;var h,v=new kr(i,t,function(n){var t=n.name.value,r=e.getType(t);if(r)return I(r);throw new te.a('Unknown type: "'+t+'". Ensure that this type exists either in the original schema, or is added in a type definition.',[n])}),g=Object.create(null),b=e.getQueryType(),x=b?I(b):null,w=e.getMutationType(),E=w?I(w):null,O=e.getSubscriptionType(),T=O?I(O):null,_=[].concat(Object(S.a)(e.getTypeMap()).map(function(e){return I(e)}),v.buildTypes(Object(S.a)(i))),j=e.__allowedLegacyNames,k=t&&t.allowedLegacyNames,N=j&&k?j.concat(k):j||k;return new X({query:x,mutation:E,subscription:T,types:_,directives:(h=e.getDirectives(),h||Object(y.a)(0,"schema must have default directives"),h.concat(s.map(function(e){return v.buildDirective(e)}))),astNode:e.astNode,allowedLegacyNames:N});function I(e){return g[e.name]||(g[e.name]=function(e){if(J(e))return e;if(Object(r.M)(e))return function(e){var n=e.name,t=o[n]?e.extensionASTNodes?e.extensionASTNodes.concat(o[n]):o[n]:e.extensionASTNodes;return new r.f({name:n,description:e.description,interfaces:function(){return function(e){var n=e.getInterfaces().map(I),t=o[e.name];t&&t.forEach(function(e){e.interfaces.forEach(function(e){n.push(v.buildType(e))})});return n}(e)},fields:function(){return A(e)},astNode:e.astNode,extensionASTNodes:t,isTypeOf:e.isTypeOf})}(e);if(Object(r.G)(e))return function(e){var n=e.name,t=o[n]?e.extensionASTNodes?e.extensionASTNodes.concat(o[n]):o[n]:e.extensionASTNodes;return new r.c({name:e.name,description:e.description,fields:function(){return A(e)},astNode:e.astNode,extensionASTNodes:t,resolveType:e.resolveType})}(e);if(Object(r.Q)(e))return function(e){return new r.h({name:e.name,description:e.description,types:e.getTypes().map(I),astNode:e.astNode,resolveType:e.resolveType})}(e);return e}(e)),g[e.name]}function A(e){var n=Object.create(null),t=e.getFields();Object.keys(t).forEach(function(e){var a=t[e];n[e]={description:a.description,deprecationReason:a.deprecationReason,type:function e(n){if(Object(r.I)(n))return Object(r.d)(e(n.ofType));if(Object(r.K)(n))return Object(r.e)(e(n.ofType));return I(n)}(a.type),args:Object(pt.a)(a.args,function(e){return e.name}),astNode:a.astNode,resolve:a.resolve}});var a=o[e.name];return a&&a.forEach(function(r){r.fields.forEach(function(r){var a=r.name.value;if(t[a])throw new te.a('Field "'+e.name+"."+a+'" already exists in the schema. It cannot also be defined in this type extension.',[r]);n[a]=v.buildField(r)})}),n}}function Lr(e,n){switch(n.kind){case a.a.OBJECT_TYPE_EXTENSION:if(!Object(r.M)(e))throw new te.a('Cannot extend non-object type "'+e.name+'".',[n]);break;case a.a.INTERFACE_TYPE_EXTENSION:if(!Object(r.G)(e))throw new te.a('Cannot extend non-interface type "'+e.name+'".',[n])}}var Cr=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function Dr(e){var n=Object.create(null),t=function(e){return e&&c(e)};return new X({types:s(Object(S.a)(e.getTypeMap())),directives:Rr(e.getDirectives()).map(function(e){return new w({name:e.name,description:e.description,locations:Pr(e.locations,function(e){return e}),args:a(e.args),astNode:e.astNode})}),query:t(e.getQueryType()),mutation:t(e.getMutationType()),subscription:t(e.getSubscriptionType()),astNode:e.astNode});function a(e){return Object(Or.a)(Rr(e),function(e){return e.name},function(e){return Cr({},e,{type:o(e.type)})})}function i(e){return Fr(e,function(e){return{type:o(e.type),args:a(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,description:e.description,astNode:e.astNode}})}function o(e){return Object(r.I)(e)?new r.d(o(e.ofType)):Object(r.K)(e)?new r.e(o(e.ofType)):c(e)}function s(e){return Rr(e).map(c)}function c(e){if(v(e)||J(e))return e;var t=n[e.name];return t||(t=function(e){if(Object(r.O)(e))return e;if(Object(r.M)(e))return new r.f({name:e.name,interfaces:function(){return s(e.getInterfaces())},fields:function(){return i(e.getFields())},isTypeOf:e.isTypeOf,description:e.description,astNode:e.astNode,extensionASTNodes:e.extensionASTNodes});if(Object(r.G)(e))return new r.c({name:e.name,fields:function(){return i(e.getFields())},resolveType:e.resolveType,description:e.description,astNode:e.astNode,extensionASTNodes:e.extensionASTNodes});if(Object(r.Q)(e))return new r.h({name:e.name,types:function(){return s(e.getTypes())},resolveType:e.resolveType,description:e.description,astNode:e.astNode});if(Object(r.D)(e))return new r.a({name:e.name,values:Object(Or.a)(Rr(e.getValues()),function(e){return e.name},function(e){return{value:e.value,deprecationReason:e.deprecationReason,description:e.description,astNode:e.astNode}}),description:e.description,astNode:e.astNode});if(Object(r.E)(e))return new r.b({name:e.name,fields:function(){return Fr(e.getFields(),function(e){return{type:o(e.type),defaultValue:e.defaultValue,description:e.description,astNode:e.astNode}})},description:e.description,astNode:e.astNode});throw new Error('Unknown type: "'+e+'"')}(e),n[e.name]=t),t}}function Fr(e,n){var t=Object.create(null),r=Pr(Object.keys(e),function(e){return e}),a=!0,i=!1,o=void 0;try{for(var s,c=r[Symbol.iterator]();!(a=(s=c.next()).done);a=!0){var u=s.value,p=e[u];t[u]=n?n(p):p}}catch(e){i=!0,o=e}finally{try{!a&&c.return&&c.return()}finally{if(i)throw o}}return t}function Rr(e){return Pr(e,function(e){return e.name})}function Pr(e,n){return e.slice().sort(function(e,t){var r=n(e),a=n(t);return r.localeCompare(a)})}function qr(e,n){return Qr(e,function(e){return!k(e)},Ur,n)}function Mr(e,n){return Qr(e,k,J,n)}function Ur(e){return!v(e)&&!J(e)}function Qr(e,n,t,r){var a=e.getDirectives().filter(n),i=e.getTypeMap(),o=Object(S.a)(i).sort(function(e,n){return e.name.localeCompare(n.name)}).filter(t);return[function(e){if(function(e){var n=e.getQueryType();if(n&&"Query"!==n.name)return!1;var t=e.getMutationType();if(t&&"Mutation"!==t.name)return!1;var r=e.getSubscriptionType();if(r&&"Subscription"!==r.name)return!1;return!0}(e))return;var n=[],t=e.getQueryType();t&&n.push("  query: "+t.name);var r=e.getMutationType();r&&n.push("  mutation: "+r.name);var a=e.getSubscriptionType();a&&n.push("  subscription: "+a.name);return"schema {\n"+n.join("\n")+"\n}"}(e)].concat(a.map(function(e){return function(e,n){return Hr(n,e)+"directive @"+e.name+Br(n,e.args)+" on "+e.locations.join(" | ")}(e,r)}),o.map(function(e){return Gr(e,r)})).filter(Boolean).join("\n\n")+"\n"}function Gr(e,n){if(Object(r.O)(e))return function(e,n){return Hr(n,e)+"scalar "+e.name}(e,n);if(Object(r.M)(e))return function(e,n){var t=e.getInterfaces(),r=t.length?" implements "+t.map(function(e){return e.name}).join(" & "):"";return Hr(n,e)+"type "+e.name+r+" {\n"+Vr(n,e)+"\n}"}(e,n);if(Object(r.G)(e))return function(e,n){return Hr(n,e)+"interface "+e.name+" {\n"+Vr(n,e)+"\n}"}(e,n);if(Object(r.Q)(e))return function(e,n){return Hr(n,e)+"union "+e.name+" = "+e.getTypes().join(" | ")}(e,n);if(Object(r.D)(e))return function(e,n){return Hr(n,e)+"enum "+e.name+" {\n"+function(e,n){return e.map(function(e,t){return Hr(n,e,"  ",!t)+"  "+e.name+Kr(e)}).join("\n")}(e.getValues(),n)+"\n}"}(e,n);if(Object(r.E)(e))return function(e,n){var t=Object(S.a)(e.getFields());return Hr(n,e)+"input "+e.name+" {\n"+t.map(function(e,t){return Hr(n,e,"  ",!t)+"  "+zr(e)}).join("\n")+"\n}"}(e,n);throw new Error("Unknown type: "+e+".")}function Vr(e,n){return Object(S.a)(n.getFields()).map(function(n,t){return Hr(e,n,"  ",!t)+"  "+n.name+Br(e,n.args,"  ")+": "+String(n.type)+Kr(n)}).join("\n")}function Br(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return 0===n.length?"":n.every(function(e){return!e.description})?"("+n.map(zr).join(", ")+")":"(\n"+n.map(function(n,r){return Hr(e,n,"  "+t,!r)+"  "+t+zr(n)}).join("\n")+"\n"+t+")"}function zr(e){var n=e.name+": "+String(e.type);return Object(N.a)(e.defaultValue)||(n+=" = "+Object(F.a)(C(e.defaultValue,e.type))),n}function Kr(e){if(!e.isDeprecated)return"";var n=e.deprecationReason;return Object(A.a)(n)||""===n||n===T?" @deprecated":" @deprecated(reason: "+Object(F.a)(C(n,f))+")"}function Hr(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if(!n.description)return"";var a=function(e,n){for(var t=[],r=e.split("\n"),a=0;a<r.length;a++)if(""===r[a])t.push(r[a]);else for(var i=Jr(r[a],n),o=0;o<i.length;o++)t.push(i[o]);return t}(n.description,120-t.length);if(e&&e.commentDescriptions)return function(e,n,t){for(var r=n&&!t?"\n":"",a=0;a<e.length;a++)""===e[a]?r+=n+"#\n":r+=n+"# "+e[a]+"\n";return r}(a,t,r);var i=t&&!r?"\n"+t+'"""':t+'"""';if(1===a.length&&a[0].length<70&&'"'!==a[0][a[0].length-1])return i+$r(a[0])+'"""\n';var o=" "===a[0][0]||"\t"===a[0][0];o||(i+="\n");for(var s=0;s<a.length;s++)0===s&&o||(i+=t),i+=$r(a[s])+"\n";return i+=t+'"""\n'}function $r(e){return e.replace(/"""/g,'\\"""')}function Jr(e,n){if(e.length<n+5)return[e];var t=e.split(new RegExp("((?: |^).{15,"+(n-40)+"}(?= |$))"));if(t.length<4)return[e];for(var r=[t[0]+t[1]+t[2]],a=3;a<t.length;a+=2)r.push(t[a].slice(1)+t[a+1]);return r}var Yr=t(31),Wr=t(24);function Zr(e,n){var t=Object(Wr.a)(e,n).errors;return t?t.map(function(e){return e.message}):[]}function Xr(e,n){var t=new X({}),r={kind:a.a.DOCUMENT,definitions:[]},i=new Mn(t,void 0,e),o=new It(t,r,i),s=ft(o);return Object(Pn.c)(n,Object(Pn.e)(i,s)),o.getErrors()}function ea(e){for(var n=[],t=0;t<e.length;t++)for(var r=e[t].definitions,a=0;a<r.length;a++)n.push(r[a]);return{kind:"Document",definitions:n}}function na(e){var n=[],t=Object.create(null),r=new Map,a=Object.create(null),i=void 0,o=0;Object(Pn.c)(e,{OperationDefinition:function(e){i=ta(e),n.push(e),r.set(e,o++)},FragmentDefinition:function(e){i=e.name.value,t[i]=e,r.set(e,o++)},FragmentSpread:function(e){var n=e.name.value;(a[i]||(a[i]=Object.create(null)))[n]=!0}});var s=Object.create(null);return n.forEach(function(e){var n=ta(e),i=Object.create(null);!function e(n,t,r){var a=t[r];a&&Object.keys(a).forEach(function(r){n[r]||(n[r]=!0,e(n,t,r))})}(i,a,n);var o=[e];Object.keys(i).forEach(function(e){o.push(t[e])}),o.sort(function(e,n){return(r.get(e)||0)-(r.get(n)||0)}),s[n]={kind:"Document",definitions:o}}),s}function ta(e){return e.name?e.name.value:""}var ra={FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND",FIELD_REMOVED:"FIELD_REMOVED",TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND",TYPE_REMOVED:"TYPE_REMOVED",TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION",VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM",ARG_REMOVED:"ARG_REMOVED",ARG_CHANGED_KIND:"ARG_CHANGED_KIND",NON_NULL_ARG_ADDED:"NON_NULL_ARG_ADDED",NON_NULL_INPUT_FIELD_ADDED:"NON_NULL_INPUT_FIELD_ADDED",INTERFACE_REMOVED_FROM_OBJECT:"INTERFACE_REMOVED_FROM_OBJECT",DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED",DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED",DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED",NON_NULL_DIRECTIVE_ARG_ADDED:"NON_NULL_DIRECTIVE_ARG_ADDED"},aa={ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE",VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM",INTERFACE_ADDED_TO_OBJECT:"INTERFACE_ADDED_TO_OBJECT",TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION",NULLABLE_INPUT_FIELD_ADDED:"NULLABLE_INPUT_FIELD_ADDED",NULLABLE_ARG_ADDED:"NULLABLE_ARG_ADDED"};function ia(e,n){return[].concat(function(e,n){var t=e.getTypeMap(),r=n.getTypeMap(),a=[];return Object.keys(t).forEach(function(e){r[e]||a.push({type:ra.TYPE_REMOVED,description:e+" was removed."})}),a}(e,n),function(e,n){var t=e.getTypeMap(),r=n.getTypeMap(),a=[];return Object.keys(t).forEach(function(e){if(r[e]){var n=t[e],i=r[e];n.constructor!==i.constructor&&a.push({type:ra.TYPE_CHANGED_KIND,description:e+" changed from "+ca(n)+" to "+ca(i)+"."})}}),a}(e,n),function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(t).forEach(function(e){var n=t[e],o=a[e];if((Object(r.M)(n)||Object(r.G)(n))&&(Object(r.M)(o)||Object(r.G)(o))&&o.constructor===n.constructor){var s=n.getFields(),c=o.getFields();Object.keys(s).forEach(function(n){if(n in c){var t=s[n].type,a=c[n].type;if(!function e(n,t){return Object(r.J)(n)?Object(r.J)(t)&&n.name===t.name||Object(r.K)(t)&&e(n,t.ofType):Object(r.I)(n)?Object(r.I)(t)&&e(n.ofType,t.ofType)||Object(r.K)(t)&&e(n,t.ofType):!!Object(r.K)(n)&&(Object(r.K)(t)&&e(n.ofType,t.ofType))}(t,a)){var o=Object(r.J)(t)?t.name:t.toString(),u=Object(r.J)(a)?a.name:a.toString();i.push({type:ra.FIELD_CHANGED_KIND,description:e+"."+n+" changed type from "+o+" to "+u+"."})}}else i.push({type:ra.FIELD_REMOVED,description:e+"."+n+" was removed."})})}}),i}(e,n),ua(e,n).breakingChanges,function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(t).forEach(function(e){var n=t[e],o=a[e];if(Object(r.Q)(n)&&Object(r.Q)(o)){var s=Object.create(null);o.getTypes().forEach(function(e){s[e.name]=!0}),n.getTypes().forEach(function(n){s[n.name]||i.push({type:ra.TYPE_REMOVED_FROM_UNION,description:n.name+" was removed from union type "+e+"."})})}}),i}(e,n),function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(t).forEach(function(e){var n=t[e],o=a[e];if(Object(r.D)(n)&&Object(r.D)(o)){var s=Object.create(null);o.getValues().forEach(function(e){s[e.name]=!0}),n.getValues().forEach(function(n){s[n.name]||i.push({type:ra.VALUE_REMOVED_FROM_ENUM,description:n.name+" was removed from enum type "+e+"."})})}}),i}(e,n),sa(e,n).breakingChanges,function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(t).forEach(function(e){var n=t[e],o=a[e];if(Object(r.M)(n)&&Object(r.M)(o)){var s=n.getInterfaces(),c=o.getInterfaces();s.forEach(function(n){c.some(function(e){return e.name===n.name})||i.push({type:ra.INTERFACE_REMOVED_FROM_OBJECT,description:e+" no longer implements interface "+n.name+"."})})}}),i}(e,n),function(e,n){var t=[],r=la(n);return e.getDirectives().forEach(function(e){r[e.name]||t.push({type:ra.DIRECTIVE_REMOVED,description:e.name+" was removed"})}),t}(e,n),function(e,n){var t=[],r=la(e);return n.getDirectives().forEach(function(e){var n=r[e.name];n&&function(e,n){var t=[],r=fa(n);return e.args.forEach(function(e){r[e.name]||t.push(e)}),t}(n,e).forEach(function(n){t.push({type:ra.DIRECTIVE_ARG_REMOVED,description:n.name+" was removed from "+e.name})})}),t}(e,n),function(e,n){var t=[],a=la(e);return n.getDirectives().forEach(function(e){var n=a[e.name];n&&function(e,n){var t=[],r=fa(e);return n.args.forEach(function(e){r[e.name]||t.push(e)}),t}(n,e).forEach(function(n){Object(r.K)(n.type)&&t.push({type:ra.NON_NULL_DIRECTIVE_ARG_ADDED,description:"A non-null arg "+n.name+" on directive "+e.name+" was added"})})}),t}(e,n),function(e,n){var t=[],r=la(e);return n.getDirectives().forEach(function(e){var n=r[e.name];n&&function(e,n){var t=[],r=new Set(n.locations);return e.locations.forEach(function(e){r.has(e)||t.push(e)}),t}(n,e).forEach(function(n){t.push({type:ra.DIRECTIVE_LOCATION_REMOVED,description:n+" was removed from "+e.name})})}),t}(e,n))}function oa(e,n){return[].concat(sa(e,n).dangerousChanges,function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(t).forEach(function(e){var n=t[e],o=a[e];if(Object(r.D)(n)&&Object(r.D)(o)){var s=Object.create(null);n.getValues().forEach(function(e){s[e.name]=!0}),o.getValues().forEach(function(n){s[n.name]||i.push({type:aa.VALUE_ADDED_TO_ENUM,description:n.name+" was added to enum type "+e+"."})})}}),i}(e,n),function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(a).forEach(function(e){var n=t[e],o=a[e];if(Object(r.M)(n)&&Object(r.M)(o)){var s=n.getInterfaces();o.getInterfaces().forEach(function(n){s.some(function(e){return e.name===n.name})||i.push({type:aa.INTERFACE_ADDED_TO_OBJECT,description:n.name+" added to interfaces implemented by "+e+"."})})}}),i}(e,n),function(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[];return Object.keys(a).forEach(function(e){var n=t[e],o=a[e];if(Object(r.Q)(n)&&Object(r.Q)(o)){var s=Object.create(null);n.getTypes().forEach(function(e){s[e.name]=!0}),o.getTypes().forEach(function(n){s[n.name]||i.push({type:aa.TYPE_ADDED_TO_UNION,description:n.name+" was added to union type "+e+"."})})}}),i}(e,n),ua(e,n).dangerousChanges)}function sa(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[],o=[];return Object.keys(t).forEach(function(e){var n=t[e],s=a[e];if((Object(r.M)(n)||Object(r.G)(n))&&(Object(r.M)(s)||Object(r.G)(s))&&s.constructor===n.constructor){var c=n.getFields(),u=s.getFields();Object.keys(c).forEach(function(e){u[e]&&(c[e].args.forEach(function(t){var r=u[e].args.find(function(e){return e.name===t.name});r?pa(t.type,r.type)?void 0!==t.defaultValue&&t.defaultValue!==r.defaultValue&&o.push({type:aa.ARG_DEFAULT_VALUE_CHANGE,description:n.name+"."+e+" arg "+t.name+" has changed defaultValue"}):i.push({type:ra.ARG_CHANGED_KIND,description:n.name+"."+e+" arg "+t.name+" has changed type from "+t.type.toString()+" to "+r.type.toString()}):i.push({type:ra.ARG_REMOVED,description:n.name+"."+e+" arg "+t.name+" was removed"})}),u[e].args.forEach(function(n){c[e].args.find(function(e){return e.name===n.name})||(Object(r.K)(n.type)?i.push({type:ra.NON_NULL_ARG_ADDED,description:"A non-null arg "+n.name+" on "+s.name+"."+e+" was added"}):o.push({type:aa.NULLABLE_ARG_ADDED,description:"A nullable arg "+n.name+" on "+s.name+"."+e+" was added"}))}))})}}),{breakingChanges:i,dangerousChanges:o}}function ca(e){if(Object(r.O)(e))return"a Scalar type";if(Object(r.M)(e))return"an Object type";if(Object(r.G)(e))return"an Interface type";if(Object(r.Q)(e))return"a Union type";if(Object(r.D)(e))return"an Enum type";if(Object(r.E)(e))return"an Input type";throw new TypeError("Unknown type "+e.constructor.name)}function ua(e,n){var t=e.getTypeMap(),a=n.getTypeMap(),i=[],o=[];return Object.keys(t).forEach(function(e){var n=t[e],s=a[e];if(Object(r.E)(n)&&Object(r.E)(s)){var c=n.getFields(),u=s.getFields();Object.keys(c).forEach(function(n){if(n in u){var t=c[n].type,a=u[n].type;if(!pa(t,a)){var o=Object(r.J)(t)?t.name:t.toString(),s=Object(r.J)(a)?a.name:a.toString();i.push({type:ra.FIELD_CHANGED_KIND,description:e+"."+n+" changed type from "+o+" to "+s+"."})}}else i.push({type:ra.FIELD_REMOVED,description:e+"."+n+" was removed."})}),Object.keys(u).forEach(function(e){e in c||(Object(r.K)(u[e].type)?i.push({type:ra.NON_NULL_INPUT_FIELD_ADDED,description:"A non-null field "+e+" on input type "+s.name+" was added."}):o.push({type:aa.NULLABLE_INPUT_FIELD_ADDED,description:"A nullable field "+e+" on input type "+s.name+" was added."}))})}}),{breakingChanges:i,dangerousChanges:o}}function pa(e,n){return Object(r.J)(e)?Object(r.J)(n)&&e.name===n.name:Object(r.I)(e)?Object(r.I)(n)&&pa(e.ofType,n.ofType):!!Object(r.K)(e)&&(Object(r.K)(n)&&pa(e.ofType,n.ofType)||!Object(r.K)(n)&&pa(e.ofType,n))}function la(e){return Object(pt.a)(e.getDirectives(),function(e){return e.name})}function fa(e){return Object(pt.a)(e.args,function(e){return e.name})}function da(e,n){var t=[],a=new Mn(e);return Object(Pn.c)(n,Object(Pn.e)(a,{Field:function(e){var n=a.getFieldDef();if(n&&n.isDeprecated){var r=a.getParentType();if(r){var i=n.deprecationReason;t.push(new te.a("The field "+r.name+"."+n.name+" is deprecated."+(i?" "+i:""),[e]))}}},EnumValue:function(e){var n=a.getEnumValue();if(n&&n.isDeprecated){var i=Object(r.z)(a.getInputType());if(i){var o=n.deprecationReason;t.push(new te.a("The enum value "+i.name+"."+n.name+" is deprecated."+(o?" "+o:""),[e]))}}}})),t}t.d(n,"graphql",function(){return sr}),t.d(n,"graphqlSync",function(){return cr}),t.d(n,"GraphQLSchema",function(){return X}),t.d(n,"GraphQLScalarType",function(){return r.g}),t.d(n,"GraphQLObjectType",function(){return r.f}),t.d(n,"GraphQLInterfaceType",function(){return r.c}),t.d(n,"GraphQLUnionType",function(){return r.h}),t.d(n,"GraphQLEnumType",function(){return r.a}),t.d(n,"GraphQLInputObjectType",function(){return r.b}),t.d(n,"GraphQLList",function(){return r.d}),t.d(n,"GraphQLNonNull",function(){return r.e}),t.d(n,"GraphQLDirective",function(){return w}),t.d(n,"TypeKind",function(){return V}),t.d(n,"specifiedScalarTypes",function(){return h}),t.d(n,"GraphQLInt",function(){return c}),t.d(n,"GraphQLFloat",function(){return p}),t.d(n,"GraphQLString",function(){return f}),t.d(n,"GraphQLBoolean",function(){return d}),t.d(n,"GraphQLID",function(){return m}),t.d(n,"specifiedDirectives",function(){return j}),t.d(n,"GraphQLIncludeDirective",function(){return E}),t.d(n,"GraphQLSkipDirective",function(){return O}),t.d(n,"GraphQLDeprecatedDirective",function(){return _}),t.d(n,"DEFAULT_DEPRECATION_REASON",function(){return T}),t.d(n,"SchemaMetaFieldDef",function(){return z}),t.d(n,"TypeMetaFieldDef",function(){return K}),t.d(n,"TypeNameMetaFieldDef",function(){return H}),t.d(n,"introspectionTypes",function(){return $}),t.d(n,"__Schema",function(){return R}),t.d(n,"__Directive",function(){return P}),t.d(n,"__DirectiveLocation",function(){return q}),t.d(n,"__Type",function(){return M}),t.d(n,"__Field",function(){return U}),t.d(n,"__InputValue",function(){return Q}),t.d(n,"__EnumValue",function(){return G}),t.d(n,"__TypeKind",function(){return B}),t.d(n,"isSchema",function(){return Z}),t.d(n,"isDirective",function(){return x}),t.d(n,"isType",function(){return r.P}),t.d(n,"isScalarType",function(){return r.O}),t.d(n,"isObjectType",function(){return r.M}),t.d(n,"isInterfaceType",function(){return r.G}),t.d(n,"isUnionType",function(){return r.Q}),t.d(n,"isEnumType",function(){return r.D}),t.d(n,"isInputObjectType",function(){return r.E}),t.d(n,"isListType",function(){return r.I}),t.d(n,"isNonNullType",function(){return r.K}),t.d(n,"isInputType",function(){return r.F}),t.d(n,"isOutputType",function(){return r.N}),t.d(n,"isLeafType",function(){return r.H}),t.d(n,"isCompositeType",function(){return r.C}),t.d(n,"isAbstractType",function(){return r.B}),t.d(n,"isWrappingType",function(){return r.R}),t.d(n,"isNullableType",function(){return r.L}),t.d(n,"isNamedType",function(){return r.J}),t.d(n,"isSpecifiedScalarType",function(){return v}),t.d(n,"isIntrospectionType",function(){return J}),t.d(n,"isSpecifiedDirective",function(){return k}),t.d(n,"assertType",function(){return r.w}),t.d(n,"assertScalarType",function(){return r.v}),t.d(n,"assertObjectType",function(){return r.t}),t.d(n,"assertInterfaceType",function(){return r.n}),t.d(n,"assertUnionType",function(){return r.x}),t.d(n,"assertEnumType",function(){return r.k}),t.d(n,"assertInputObjectType",function(){return r.l}),t.d(n,"assertListType",function(){return r.p}),t.d(n,"assertNonNullType",function(){return r.r}),t.d(n,"assertInputType",function(){return r.m}),t.d(n,"assertOutputType",function(){return r.u}),t.d(n,"assertLeafType",function(){return r.o}),t.d(n,"assertCompositeType",function(){return r.j}),t.d(n,"assertAbstractType",function(){return r.i}),t.d(n,"assertWrappingType",function(){return r.y}),t.d(n,"assertNullableType",function(){return r.s}),t.d(n,"assertNamedType",function(){return r.q}),t.d(n,"getNullableType",function(){return r.A}),t.d(n,"getNamedType",function(){return r.z}),t.d(n,"validateSchema",function(){return ue}),t.d(n,"assertValidSchema",function(){return pe}),t.d(n,"Source",function(){return _e}),t.d(n,"getLocation",function(){return pr.a}),t.d(n,"parse",function(){return Ge}),t.d(n,"parseValue",function(){return Ve}),t.d(n,"parseType",function(){return Be}),t.d(n,"print",function(){return F.a}),t.d(n,"visit",function(){return Pn.c}),t.d(n,"visitInParallel",function(){return Pn.d}),t.d(n,"visitWithTypeInfo",function(){return Pn.e}),t.d(n,"getVisitFn",function(){return Pn.b}),t.d(n,"Kind",function(){return a.a}),t.d(n,"TokenKind",function(){return Ce}),t.d(n,"DirectiveLocation",function(){return b}),t.d(n,"BREAK",function(){return Pn.a}),t.d(n,"execute",function(){return Ft}),t.d(n,"defaultFieldResolver",function(){return ir}),t.d(n,"responsePathAsArray",function(){return Pt}),t.d(n,"getDirectiveValues",function(){return Ct.getDirectiveValues}),t.d(n,"subscribe",function(){return hr}),t.d(n,"createSourceEventStream",function(){return yr}),t.d(n,"validate",function(){return At}),t.d(n,"ValidationContext",function(){return It}),t.d(n,"specifiedRules",function(){return St}),t.d(n,"FieldsOnCorrectTypeRule",function(){return Wn}),t.d(n,"FragmentsOnCompositeTypesRule",function(){return $n}),t.d(n,"KnownArgumentNamesRule",function(){return ct}),t.d(n,"KnownDirectivesRule",function(){return ot}),t.d(n,"KnownFragmentNamesRule",function(){return Xn}),t.d(n,"KnownTypeNamesRule",function(){return Hn}),t.d(n,"LoneAnonymousOperationRule",function(){return Gn}),t.d(n,"NoFragmentCyclesRule",function(){return tt}),t.d(n,"NoUndefinedVariablesRule",function(){return at}),t.d(n,"NoUnusedFragmentsRule",function(){return et}),t.d(n,"NoUnusedVariablesRule",function(){return it}),t.d(n,"OverlappingFieldsCanBeMergedRule",function(){return bt}),t.d(n,"PossibleFragmentSpreadsRule",function(){return nt}),t.d(n,"ProvidedNonNullArgumentsRule",function(){return ht}),t.d(n,"ScalarLeafsRule",function(){return Yn}),t.d(n,"SingleFieldSubscriptionsRule",function(){return Vn}),t.d(n,"UniqueArgumentNamesRule",function(){return ut}),t.d(n,"UniqueDirectivesPerLocationRule",function(){return st}),t.d(n,"UniqueFragmentNamesRule",function(){return Zn}),t.d(n,"UniqueInputFieldNamesRule",function(){return Nt}),t.d(n,"UniqueOperationNamesRule",function(){return Qn}),t.d(n,"UniqueVariableNamesRule",function(){return rt}),t.d(n,"ValuesOfCorrectTypeRule",function(){return ft}),t.d(n,"VariablesAreInputTypesRule",function(){return Jn}),t.d(n,"VariablesDefaultValueAllowedRule",function(){return vt}),t.d(n,"VariablesInAllowedPositionRule",function(){return gt}),t.d(n,"GraphQLError",function(){return je.GraphQLError}),t.d(n,"formatError",function(){return je.formatError}),t.d(n,"printError",function(){return je.printError}),t.d(n,"getIntrospectionQuery",function(){return br}),t.d(n,"introspectionQuery",function(){return xr}),t.d(n,"getOperationAST",function(){return wr}),t.d(n,"introspectionFromSchema",function(){return Er}),t.d(n,"buildClientSchema",function(){return _r}),t.d(n,"buildASTSchema",function(){return jr}),t.d(n,"buildSchema",function(){return Ir}),t.d(n,"getDescription",function(){return Sr}),t.d(n,"extendSchema",function(){return Ar}),t.d(n,"lexicographicSortSchema",function(){return Dr}),t.d(n,"printSchema",function(){return qr}),t.d(n,"printIntrospectionSchema",function(){return Mr}),t.d(n,"printType",function(){return Gr}),t.d(n,"typeFromAST",function(){return qn.a}),t.d(n,"valueFromAST",function(){return Tr.a}),t.d(n,"valueFromASTUntyped",function(){return Yr.a}),t.d(n,"astFromValue",function(){return C}),t.d(n,"TypeInfo",function(){return Mn}),t.d(n,"coerceValue",function(){return Wr.a}),t.d(n,"isValidJSValue",function(){return Zr}),t.d(n,"isValidLiteralValue",function(){return Xr}),t.d(n,"concatAST",function(){return ea}),t.d(n,"separateOperations",function(){return na}),t.d(n,"isEqualType",function(){return oe}),t.d(n,"isTypeSubTypeOf",function(){return se}),t.d(n,"doTypesOverlap",function(){return ce}),t.d(n,"assertValidName",function(){return ae}),t.d(n,"isValidNameError",function(){return ie}),t.d(n,"findBreakingChanges",function(){return ia}),t.d(n,"findDangerousChanges",function(){return oa}),t.d(n,"BreakingChangeType",function(){return ra}),t.d(n,"DangerousChangeType",function(){return aa}),t.d(n,"findDeprecatedUsages",function(){return da})},function(e,n,t){"use strict";function r(e,n){return e.reduce(function(e,t){return e[n(t)]=t,e},Object.create(null))}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";t.r(n),t.d(n,"$$iterator",function(){return i}),t.d(n,"isIterable",function(){return o}),t.d(n,"isArrayLike",function(){return s}),t.d(n,"isCollection",function(){return c}),t.d(n,"getIterator",function(){return u}),t.d(n,"getIteratorMethod",function(){return p}),t.d(n,"createIterator",function(){return l}),t.d(n,"forEach",function(){return d}),t.d(n,"$$asyncIterator",function(){return h}),t.d(n,"isAsyncIterable",function(){return v}),t.d(n,"getAsyncIterator",function(){return g}),t.d(n,"getAsyncIteratorMethod",function(){return y}),t.d(n,"createAsyncIterator",function(){return b}),t.d(n,"forAwaitEach",function(){return w});var r="function"==typeof Symbol?Symbol:void 0,a=r&&r.iterator,i=a||"@@iterator";function o(e){return!!p(e)}function s(e){var n=null!=e&&e.length;return"number"==typeof n&&n>=0&&n%1==0}function c(e){return Object(e)===e&&(s(e)||o(e))}function u(e){var n=p(e);if(n)return n.call(e)}function p(e){if(null!=e){var n=a&&e[a]||e["@@iterator"];if("function"==typeof n)return n}}function l(e){if(null!=e){var n=u(e);if(n)return n;if(s(e))return new f(e)}}function f(e){this._o=e,this._i=0}function d(e,n,t){if(null!=e){if("function"==typeof e.forEach)return e.forEach(n,t);var r=0,a=u(e);if(a){for(var i;!(i=a.next()).done;)if(n.call(t,i.value,r++,e),r>9999999)throw new TypeError("Near-infinite iteration.")}else if(s(e))for(;r<e.length;r++)e.hasOwnProperty(r)&&n.call(t,e[r],r,e)}}f.prototype[i]=function(){return this},f.prototype.next=function(){return void 0===this._o||this._i>=this._o.length?(this._o=void 0,{value:void 0,done:!0}):{value:this._o[this._i++],done:!1}};var m=r&&r.asyncIterator,h=m||"@@asyncIterator";function v(e){return!!y(e)}function g(e){var n=y(e);if(n)return n.call(e)}function y(e){if(null!=e){var n=m&&e[m]||e["@@asyncIterator"];if("function"==typeof n)return n}}function b(e){if(null!=e){var n=g(e);if(n)return n;var t=l(e);if(t)return new x(t)}}function x(e){this._i=e}function w(e,n,t){var r=b(e);if(r){var a=0;return new Promise(function(i,o){!function s(){return r.next().then(function(r){return r.done?i():Promise.resolve(n.call(t,r.value,a++,e)).then(s).catch(o),null}).catch(o),null}()})}}x.prototype[h]=function(){return this},x.prototype.next=function(){var e=this._i.next();return Promise.resolve(e.value).then(function(n){return{value:n,done:e.done}})}},function(e,n,t){"use strict";function r(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return e[t]}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";function r(e,n){for(var t=Object.create(null),r=n.length,i=e.length/2,o=0;o<r;o++){var s=a(e,n[o]);s<=Math.max(i,n[o].length/2,1)&&(t[n[o]]=s)}return Object.keys(t).sort(function(e,n){return t[e]-t[n]})}function a(e,n){if(e===n)return 0;var t=void 0,r=void 0,a=[],i=e.toLowerCase(),o=n.toLowerCase(),s=i.length,c=o.length;if(i===o)return 1;for(t=0;t<=s;t++)a[t]=[t];for(r=1;r<=c;r++)a[0][r]=r;for(t=1;t<=s;t++)for(r=1;r<=c;r++){var u=i[t-1]===o[r-1]?0:1;a[t][r]=Math.min(a[t-1][r]+1,a[t][r-1]+1,a[t-1][r-1]+u),t>1&&r>1&&i[t-1]===o[r-2]&&i[t-2]===o[r-1]&&(a[t][r]=Math.min(a[t][r],a[t-2][r-2]+u))}return a[s][c]}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";function r(e,n,t){return e.reduce(function(e,r){return e[n(r)]=t(r),e},Object.create(null))}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";n.a=(process,function(e,n){return e instanceof n})},function(e,n){e.exports=require("buffer")},function(e,n,t){"use strict";t.r(n),t.d(n,"getVariableValues",function(){return d}),t.d(n,"getArgumentValues",function(){return m}),t.d(n,"getDirectiveValues",function(){return h});var r=t(2),a=t(13),i=t(4),o=t(11),s=t(24),c=t(9),u=t(19),p=t(1),l=t(5),f=t(0);function d(e,n,t){for(var a=[],o={},p=0;p<n.length;p++){var d=n[p],m=d.variable.name.value,h=Object(c.a)(e,d.type);if(Object(f.F)(h)){var v=t[m];if(Object(i.a)(v))Object(f.K)(h)?a.push(new r.GraphQLError('Variable "$'+m+'" of required type "'+String(h)+'" was not provided.',[d])):d.defaultValue&&(o[m]=Object(u.a)(d.defaultValue,h));else{var g=Object(s.a)(v,h,d),y=g.errors;y?function(){var e='Variable "$'+m+'" got invalid value '+JSON.stringify(v)+"; ";y.forEach(function(n){n.message=e+n.message}),a.push.apply(a,y)}():o[m]=g.value}}else a.push(new r.GraphQLError('Variable "$'+m+'" expected value of type "'+Object(l.a)(d.type)+'" which cannot be used as an input type.',[d.type]))}return 0===a.length?{errors:void 0,coerced:o}:{errors:a,coerced:void 0}}function m(e,n,t){var a={},s=e.args,c=n.arguments;if(!s||!c)return a;for(var d=Object(o.a)(c,function(e){return e.name.value}),m=0;m<s.length;m++){var h=s[m],v=h.name,g=h.type,y=d[v],b=h.defaultValue;if(y)if(y.value.kind===p.a.VARIABLE){var x=y.value.name.value;if(t&&Object.prototype.hasOwnProperty.call(t,x)&&!Object(i.a)(t[x]))a[v]=t[x];else if(Object(i.a)(b)){if(Object(f.K)(g))throw new r.GraphQLError('Argument "'+v+'" of required type "'+String(g)+'" was provided the variable "$'+x+'" which was not provided a runtime value.',[y.value])}else a[v]=b}else{var w=y.value,E=Object(u.a)(w,g,t);if(Object(i.a)(E))throw new r.GraphQLError('Argument "'+v+'" has invalid value '+Object(l.a)(w)+".",[y.value]);a[v]=E}else if(Object(i.a)(b)){if(Object(f.K)(g))throw new r.GraphQLError('Argument "'+v+'" of required type "'+String(g)+'" was not provided.',[n])}else a[v]=b}return a}function h(e,n,t){var r=n.directives&&Object(a.a)(n.directives,function(n){return n.name.value===e.name});if(r)return m(e,r,t)}},function(e,n,t){"use strict";t.d(n,"a",function(){return c});var r=t(11),a=t(4),i=t(7),o=t(1),s=t(0);function c(e,n,t){if(e){if(Object(s.K)(n)){if(e.kind===o.a.NULL)return;return c(e,n.ofType,t)}if(e.kind===o.a.NULL)return null;if(e.kind===o.a.VARIABLE){var p=e.name.value;if(!t||Object(a.a)(t[p]))return;return t[p]}if(Object(s.I)(n)){var l=n.ofType;if(e.kind===o.a.LIST){for(var f=[],d=e.values,m=0;m<d.length;m++)if(u(d[m],t)){if(Object(s.K)(l))return;f.push(null)}else{var h=c(d[m],l,t);if(Object(a.a)(h))return;f.push(h)}return f}var v=c(e,l,t);if(Object(a.a)(v))return;return[v]}if(Object(s.E)(n)){if(e.kind!==o.a.OBJECT)return;for(var g=Object.create(null),y=Object(r.a)(e.fields,function(e){return e.name.value}),b=Object(i.a)(n.getFields()),x=0;x<b.length;x++){var w=b[x],E=y[w.name];if(E&&!u(E.value,t)){var O=c(E.value,w.type,t);if(Object(a.a)(O))return;g[w.name]=O}else if(Object(a.a)(w.defaultValue)){if(Object(s.K)(w.type))return}else g[w.name]=w.defaultValue}return g}if(Object(s.D)(n)){if(e.kind!==o.a.ENUM)return;var T=n.getValue(e.value);if(!T)return;return T.value}if(Object(s.O)(n)){var _=void 0;try{_=n.parseLiteral(e,t)}catch(e){return}if(Object(a.a)(_))return;return _}throw new Error("Unknown type: "+n+".")}}function u(e,n){return e.kind===o.a.VARIABLE&&(!n||Object(a.a)(n[e.name.value]))}},function(e,n,t){"use strict";function r(e){return null===e||void 0===e||e!=e}t.d(n,"a",function(){return r})},function(e,n,t){"use strict";t.d(n,"a",function(){return a});var r=5;function a(e){var n=e.slice(0,r);return n.reduce(function(e,t,r){return e+(n.length>2?", ":" ")+(r===n.length-1?"or ":"")+t})}},function(e,n,t){"use strict";function r(e,n){for(var t=/\r\n|[\n\r]/g,r=1,a=n+1,i=void 0;(i=t.exec(e.body))&&i.index<n;)r+=1,a=n+1-(i.index+i[0].length);return{line:r,column:a}}t.d(n,"a",function(){return r})},function(e,n){e.exports=require("stream")},function(e,n,t){"use strict";t.d(n,"a",function(){return l});var r=t(12),a=t(4),i=t(20),o=t(21),s=t(14),c=t(2),u=t(0),p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function l(e,n,t,c){if(Object(u.K)(n))return Object(i.a)(e)?d([v("Expected non-nullable type "+String(n)+" not to be null",t,c)]):l(e,n.ofType,t,c);if(Object(i.a)(e))return f(null);if(Object(u.O)(n))try{var b=n.parseValue(e);return Object(a.a)(b)?d([v("Expected type "+n.name,t,c)]):f(b)}catch(e){return d([v("Expected type "+n.name,t,c,e.message,e)])}if(Object(u.D)(n)){if("string"==typeof e){var x=n.getValue(e);if(x)return f(x.value)}var w=Object(s.a)(String(e),n.getValues().map(function(e){return e.name})),E=0!==w.length?"did you mean "+Object(o.a)(w)+"?":void 0;return d([v("Expected type "+n.name,t,c,E)])}if(Object(u.I)(n)){var O=n.ofType;if(Object(r.isCollection)(e)){var T=void 0,_=[];return Object(r.forEach)(e,function(e,n){var r=l(e,O,t,h(c,n));r.errors?T=m(T,r.errors):T||_.push(r.value)}),T?d(T):f(_)}var j=l(e,O,t);return j.errors?j:f([j.value])}if(Object(u.E)(n)){if("object"!==(void 0===e?"undefined":p(e)))return d([v("Expected type "+n.name+" to be an object",t,c)]);var k=void 0,N={},S=n.getFields();for(var I in S)if(y.call(S,I)){var A=S[I],L=e[I];if(Object(a.a)(L))Object(a.a)(A.defaultValue)?Object(u.K)(A.type)&&(k=m(k,v("Field "+g(h(c,I))+" of required type "+String(A.type)+" was not provided",t))):N[I]=A.defaultValue;else{var C=l(L,A.type,t,h(c,I));C.errors?k=m(k,C.errors):k||(N[I]=C.value)}}for(var D in e)if(y.call(e,D)&&!S[D]){var F=Object(s.a)(D,Object.keys(S)),R=0!==F.length?"did you mean "+Object(o.a)(F)+"?":void 0;k=m(k,v('Field "'+D+'" is not defined by type '+n.name,t,c,R))}return k?d(k):f(N)}throw new Error("Unexpected type: "+n+".")}function f(e){return{errors:void 0,value:e}}function d(e){return{errors:e,value:void 0}}function m(e,n){return(e||[]).concat(n)}function h(e,n){return{prev:e,key:n}}function v(e,n,t,r,a){var i=g(t);return new c.GraphQLError(e+(i?" at "+i:"")+(r?"; "+r:"."),n,void 0,void 0,void 0,a)}function g(e){for(var n="",t=e;t;)n=("string"==typeof t.key?"."+t.key:"["+String(t.key)+"]")+n,t=t.prev;return n?"value"+n:""}var y=Object.prototype.hasOwnProperty},function(e,n,t){"use strict";
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(186);function a(e){if("number"==typeof e){if(!a[e])throw new Error("invalid status code: "+e);return e}if("string"!=typeof e)throw new TypeError("code must be a number or string");var n=parseInt(e,10);if(!isNaN(n)){if(!a[n])throw new Error("invalid status code: "+n);return n}if(!(n=a[e.toLowerCase()]))throw new Error('invalid status message: "'+e+'"');return n}e.exports=a,a.STATUS_CODES=r,a.codes=function(e,n){var t=[];return Object.keys(n).forEach(function(r){var a=n[r],i=Number(r);e[i]=a,e[a]=i,e[a.toLowerCase()]=i,t.push(i)}),t}(a,r),a.redirect={300:!0,301:!0,302:!0,303:!0,305:!0,307:!0,308:!0},a.empty={204:!0,205:!0,304:!0},a.retry={502:!0,503:!0,504:!0}},function(e,n){e.exports=require("path")},function(e,n,t){"use strict";var r,a=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},o=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},s=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var c=t(10),u=t(54),p=t(97),l=t(53),f=function(e){function n(n){var t=e.call(this,n)||this;return t.message=n,Error.captureStackTrace(t,t.constructor),t}return a(n,e),n}(Error);function d(e){return void 0!==e.kind}function m(e,n){void 0===n&&(n=[]);var t,r=[];return e.forEach(function(e){if(d(e)&&(e=c.print(e)),"function"==typeof e)-1===n.indexOf(e)&&(n.push(e),r=r.concat(m(e(),n)));else{if("string"!=typeof e)throw new f("typeDef array must contain only strings and functions, got "+typeof e);r.push(e.trim())}}),(t=r.map(function(e){return e.trim()}),t.reduce(function(e,n){return-1===e.indexOf(n)?e.concat([n]):e},[])).join("\n")}function h(e,n){var t,r=e;if(d(e))t=e;else if("string"!=typeof r){if(!Array.isArray(r))throw new f("typeDefs must be a string, array or schema AST, got "+typeof r);r=m(r)}"string"==typeof r&&(t=c.parse(r,n));var a={commentDescriptions:!0},i=c.buildASTSchema(t,a),o=b(t);return o.definitions.length>0&&(i=c.extendSchema(i,o,a)),i}n.SchemaError=f,n.makeExecutableSchema=function(e){var n=e.typeDefs,t=e.resolvers,r=void 0===t?{}:t,a=e.connectors,i=e.logger,o=e.allowUndefinedInResolve,s=void 0===o||o,c=e.resolverValidationOptions,p=void 0===c?{}:c,d=e.directiveResolvers,m=void 0===d?null:d,v=e.schemaDirectives,g=void 0===v?null:v,y=e.parseOptions,b=void 0===y?{}:y,x=e.inheritResolversFromInterfaces,T=function(e,n,t,r,a,i,o){if("object"!=typeof a)throw new f("Expected `resolverValidationOptions` to be an object");if(!e)throw new f("Must provide typeDefs");if(!n)throw new f("Must provide resolvers");var s=Array.isArray(n)?n.filter(function(e){return"object"==typeof e}).reduce(l.default,{}):n,c=h(e,i);return O({schema:c,resolvers:s,resolverValidationOptions:a,inheritResolversFromInterfaces:o}),_(c,a),r||S(c),t&&k(c,t),c}(n,r,i,s,p,b,void 0!==x&&x);return"function"==typeof r.__schema&&E(T,r.__schema),a&&w(T,a),m&&I(T,m),g&&u.SchemaDirectiveVisitor.visitSchemaDirectives(T,g),T},n.concatenateTypeDefs=m,n.buildSchemaFromTypeDefinitions=h;var v="TypeExtensionDefinition",g="ObjectTypeExtension",y="InterfaceTypeExtension";function b(e){var n=e.definitions.filter(function(e){return e.kind===v||e.kind===g||e.kind===y});return Object.assign({},e,{definitions:n})}function x(e,n){var t=e.getTypeMap();Object.keys(t).forEach(function(e){var r=t[e];if(!c.getNamedType(r).name.startsWith("__")&&r instanceof c.GraphQLObjectType){var a=r.getFields();Object.keys(a).forEach(function(t){var r=a[t];n(r,e,t)})}})}n.extractExtensionDefinitions=b,n.forEachField=x;var w=p.deprecated({version:"0.7.0",url:"https://github.com/apollostack/graphql-tools/issues/140"},function(e,n){if(!(e&&e instanceof c.GraphQLSchema))throw new Error("schema must be an instance of GraphQLSchema. This error could be caused by installing more than one version of GraphQL-JS");if("object"!=typeof n)throw new Error("Expected connectors to be of type object, got "+typeof n);if(0===Object.keys(n).length)throw new Error("Expected connectors to not be an empty object");if(Array.isArray(n))throw new Error("Expected connectors to be of type object, got Array");if(e._apolloConnectorsAttached)throw new Error("Connectors already attached to context, cannot attach more than once");e._apolloConnectorsAttached=!0;E(e,function(e,t,r){if("object"!=typeof r)throw new Error("Cannot attach connector because context is not an object: "+typeof r);return void 0===r.connectors&&(r.connectors={}),Object.keys(n).forEach(function(e){var t=n[e];if(!t.prototype)throw new Error("Connector must be a function or an class");r.connectors[e]=new t(r)}),e})});function E(e,n){[e.getQueryType(),e.getMutationType(),e.getSubscriptionType()].filter(function(e){return!!e}).forEach(function(t){var r=function(e){var n,t=Math.random();return function(r,a,i,o){return o.operation.__runAtMostOnce||(o.operation.__runAtMostOnce={}),o.operation.__runAtMostOnce[t]||(o.operation.__runAtMostOnce[t]=!0,n=e(r,a,i,o)),n}}(n),a=t.getFields();Object.keys(a).forEach(function(i){t===e.getSubscriptionType()?a[i].resolve=N(a[i].resolve,n):a[i].resolve=N(a[i].resolve,r)})})}function O(e,n,t){e instanceof c.GraphQLSchema&&(console.warn("The addResolveFunctionsToSchema function takes named options now; see IAddResolveFunctionsToSchemaOptions"),e={schema:e,resolvers:n,resolverValidationOptions:t});var r=e.schema,a=e.resolvers,o=e.resolverValidationOptions,s=void 0===o?{}:o,u=e.inheritResolversFromInterfaces,p=void 0!==u&&u,l=s.allowResolversNotInSchema,d=void 0!==l&&l,m=s.requireResolversForResolveType,h=p?function(e,n){var t={};return Object.keys(i({},e.getTypeMap(),n)).forEach(function(r){var a=n[r],i=e.getType(r);if(i instanceof c.GraphQLObjectType){var o=i.getInterfaces().map(function(e){return n[e.name]});t[r]=Object.assign.apply(Object,[{}].concat(o,[a]))}else a&&(t[r]=a)}),t}(r,a):a;Object.keys(h).forEach(function(e){var n=r.getType(e);if(!n&&"__schema"!==e){if(d)return;throw new f('"'+e+'" defined in resolvers, but not in schema')}Object.keys(h[e]).forEach(function(t){if(t.startsWith("__"))n[t.substring(2)]=h[e][t];else if(n instanceof c.GraphQLScalarType)n[t]=h[e][t];else if(n instanceof c.GraphQLEnumType){if(!n.getValue(t))throw new f(e+"."+t+" was defined in resolvers, but enum is not in schema");n.getValue(t).value=h[e][t]}else{var r=function(e){return e instanceof c.GraphQLObjectType||e instanceof c.GraphQLInterfaceType?e.getFields():void 0}(n);if(!r){if(d)return;throw new f(e+" was defined in resolvers, but it's not an object")}if(!r[t]){if(d)return;throw new f(e+"."+t+" defined in resolvers, but not in schema")}var a=r[t],i=h[e][t];if("function"==typeof i)T(a,{resolve:i});else{if("object"!=typeof i)throw new f("Resolver "+e+"."+t+" must be object or function");T(a,i)}}})}),function(e,n){Object.keys(e.getTypeMap()).map(function(n){return e.getType(n)}).forEach(function(e){if((e instanceof c.GraphQLUnionType||e instanceof c.GraphQLInterfaceType)&&!e.resolveType){if(!1===n)return;if(!0===n)throw new f('Type "'+e.name+'" is missing a "resolveType" resolver');console.warn('Type "'+e.name+'" is missing a "resolveType" resolver. Pass false into "resolverValidationOptions.requireResolversForResolveType" to disable this warning.')}})}(r,m)}function T(e,n){Object.keys(n).forEach(function(t){e[t]=n[t]})}function _(e,n){void 0===n&&(n={});var t=n.requireResolversForArgs,r=void 0!==t&&t,a=n.requireResolversForNonScalar,i=void 0!==a&&a,o=n.requireResolversForAllFields,s=void 0!==o&&o;if(s&&(r||i))throw new TypeError("requireResolversForAllFields takes precedence over the more specific assertions. Please configure either requireResolversForAllFields or requireResolversForArgs / requireResolversForNonScalar, but not a combination of them.");x(e,function(e,n,t){s&&j(e,n,t),r&&e.args.length>0&&j(e,n,t),!i||c.getNamedType(e.type)instanceof c.GraphQLScalarType||j(e,n,t)})}function j(e,n,t){if(e.resolve){if("function"!=typeof e.resolve)throw new f('Resolver "'+n+"."+t+'" must be a function')}else console.warn('Resolve function missing for "'+n+"."+t+'". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131')}function k(e,n){if(!n)throw new Error("Must provide a logger");if("function"!=typeof n.log)throw new Error("Logger.log must be a function");x(e,function(e,t,r){var a=t+"."+r;e.resolve=function(e,n,t){void 0===e&&(e=c.defaultFieldResolver);var r=function(e){var r=new Error;r.stack=e.stack,t&&(r.originalMessage=e.message,r.message="Error in resolver "+t+"\n"+e.message),n.log(r)};return function(n,t,a,i){try{var o=e(n,t,a,i);return o&&"function"==typeof o.then&&"function"==typeof o.catch&&o.catch(function(e){var n=e instanceof Error?e:new Error(e);return r(n),e}),o}catch(e){throw r(e),e}}}(e.resolve,n,a)})}function N(e,n){return function(t,r,a,i){return Promise.resolve(n(t,r,a,i)).then(function(n){return e?e(n,r,a,i):c.defaultFieldResolver(n,r,a,i)})}}function S(e){x(e,function(e,n,t){var r=n+"."+t;e.resolve=function(e,n){void 0===e&&(e=c.defaultFieldResolver);return function(t,r,a,i){var o=e(t,r,a,i);if(void 0===o)throw new Error('Resolve function for "'+n+'" returned undefined');return o}}(e.resolve,r)})}function I(e,n){if("object"!=typeof n)throw new Error("Expected directiveResolvers to be of type object, got "+typeof n);if(Array.isArray(n))throw new Error("Expected directiveResolvers to be of type object, got Array");var t=Object.create(null);Object.keys(n).forEach(function(e){t[e]=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return a(r,t),r.prototype.visitFieldDefinition=function(t){var r=this,a=n[e],i=t.resolve||c.defaultFieldResolver,u=this.args;t.resolve=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var c=e[0],p=e[2],l=e[3];return a(function(){return o(r,void 0,void 0,function(){return s(this,function(n){return[2,i.apply(t,e)]})})},c,u,p,l)}},r}(u.SchemaDirectiveVisitor)}),u.SchemaDirectiveVisitor.visitSchemaDirectives(e,t)}n.attachConnectorsToContext=w,n.addSchemaLevelResolveFunction=E,n.addResolveFunctionsToSchema=O,n.assertResolveFunctionsPresent=_,n.addErrorLoggingToSchema=k,n.chainResolvers=function(e){return function(n,t,r,a){return e.reduce(function(e,n){return n?n(e,t,r,a):c.defaultFieldResolver(e,t,r,a)},n)}},n.addCatchUndefinedToSchema=S,n.attachDirectiveResolvers=I},function(e,n){e.exports=require("util")},function(e,n,t){"use strict";t.d(n,"a",function(){return a});var r=t(6);function a(e,n,t){return e&&Array.isArray(e.path)?e:new r.a(e&&e.message,e&&e.nodes||n,e&&e.source,e&&e.positions,t,e)}},function(e,n,t){"use strict";t.d(n,"a",function(){return a});var r=t(22);function a(e){var n=[];if(e.nodes)e.nodes.forEach(function(e){e.loc&&n.push(i(e.loc.source,Object(r.a)(e.loc.source,e.loc.start)))});else if(e.source&&e.locations){var t=e.source;e.locations.forEach(function(e){n.push(i(t,e))})}return 0===n.length?e.message:[e.message].concat(n).join("\n\n")+"\n"}function i(e,n){var t=n.line,r=e.locationOffset.line-1,a=function(e,n){return 1===n.line?e.locationOffset.column-1:0}(e,n),i=t+r,c=n.column+a,u=(i-1).toString(),p=i.toString(),l=(i+1).toString(),f=l.length,d=e.body.split(/\r\n|[\n\r]/g);return d[0]=o(e.locationOffset.column-1)+d[0],[e.name+" ("+i+":"+c+")",t>=2&&s(f,u)+": "+d[t-2],s(f,p)+": "+d[t-1],o(2+f+c-1)+"^",t<d.length&&s(f,l)+": "+d[t]].filter(Boolean).join("\n")}function o(e){return Array(e+1).join(" ")}function s(e,n){return o(e-n.length)+n}},function(e,n,t){"use strict";t.d(n,"a",function(){return o});var r=t(15),a=t(4),i=t(1);function o(e,n){switch(e.kind){case i.a.NULL:return null;case i.a.INT:return parseInt(e.value,10);case i.a.FLOAT:return parseFloat(e.value);case i.a.STRING:case i.a.ENUM:case i.a.BOOLEAN:return e.value;case i.a.LIST:return e.values.map(function(e){return o(e,n)});case i.a.OBJECT:return Object(r.a)(e.fields,function(e){return e.name.value},function(e){return o(e.value,n)});case i.a.VARIABLE:var t=e.name.value;return n&&!Object(a.a)(n[t])?n[t]:void 0}throw new Error("Unexpected value kind: "+e.kind)}},function(e,n,t){"use strict";var r,a=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e};Object.defineProperty(n,"__esModule",{value:!0});var o,s=t(10),c=t(2);function u(e,n){if(n&&n.length>0){if(Array.isArray(e)){var t={};return n.forEach(function(e){if(e.path){var n=e.path[1],r=t[n]||[];r.push(i({},e,{path:e.path.slice(1)})),t[n]=r}}),e.map(function(e,n){return u(e,t[n])})}return i({},e,((r={})[o]=n.map(function(e){return i({},e,e.path?{path:e.path.slice(1)}:{})}),r))}return e;var r}o="undefined"!=typeof global&&"Symbol"in global||"undefined"!=typeof window&&"Symbol"in window?Symbol("subSchemaErrors"):"@@__subSchemaErrors",n.ErrorSymbol=o,n.annotateWithChildrenErrors=u,n.getErrorsFromParent=function(e,n){for(var t=[],r=0,a=e&&e[o]||[];r<a.length;r++){var i=a[r];if(!i.path||1===i.path.length&&i.path[0]===n)return{kind:"OWN",error:i};i.path[0]===n&&t.push(i)}return{kind:"CHILDREN",errors:t}};var p=function(e){function n(n,t){var r=e.call(this,n)||this;return r.errors=t,r}return a(n,e),n}(Error);n.checkResultAndHandleErrors=function(e,n,t){if(t||(t=n.fieldNodes[0].alias?n.fieldNodes[0].alias.value:n.fieldName),!e.errors||e.data&&null!=e.data[t]){var r=e.data[t];return e.errors&&(r=u(r,e.errors)),r}var a,i=1===e.errors.length&&((a=e.errors[0]).result||a.originalError&&a.originalError.result)?e.errors[0]:new p(e.errors.map(function(e){return e.message}).join("\n"),e.errors);throw c.locatedError(i,n.fieldNodes,s.responsePathAsArray(n.path))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=t(2),i=t(32);n.default=function(e,n,t,o){var s=o.fieldNodes[0].alias?o.fieldNodes[0].alias.value:o.fieldName,c=i.getErrorsFromParent(e,s);if("OWN"===c.kind)throw a.locatedError(new Error(c.error.message),o.fieldNodes,r.responsePathAsArray(o.path));if(e){var u=e[s];return!u&&e.data&&e.data[s]&&(u=e.data[s]),c.errors&&(u=i.annotateWithChildrenErrors(u,c.errors)),u}return null}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10);n.default=function(e,n){var t=e.__typename;if(!t)throw new Error("Did not fetch typename for object, unable to resolve interface.");var a=n.getType(t);if(!(a instanceof r.GraphQLObjectType))throw new Error("__typename did not match an object type: "+t);return a}},function(e,n){n.clone=function(e){var n={};for(var t in e=e||{})n[t]=e[t];return n}},function(e,n,t){var r=t(113);e.exports=function(e,n){if(!e)throw new TypeError("argument stream is required");var t=(n=n||{}).encoding||e.headers&&e.headers["content-encoding"]||"identity";switch(t){case"gzip":case"deflate":break;case"identity":return e;default:var a=new Error("Unsupported Content-Encoding: "+t);throw a.status=415,a}return delete n.encoding,e.pipe(r.Unzip(n))}},function(e){e.exports=[["0","\0",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]},function(e,n,t){"use strict";
/*!
 * raw-body
 * Copyright(c) 2013-2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(139),a=t(138),i=t(133),o=t(114);e.exports=function(e,n,t){var a=t,i=n||{};!0!==n&&"string"!=typeof n||(i={encoding:n});"function"==typeof n&&(a=n,i={});if(void 0!==a&&"function"!=typeof a)throw new TypeError("argument callback must be a function");if(!a&&!global.Promise)throw new TypeError("argument callback is required");var o=!0!==i.encoding?i.encoding:"utf-8",s=r.parse(i.limit),u=null==i.length||isNaN(i.length)?null:parseInt(i.length,10);if(a)return c(e,o,u,s,a);return new Promise(function(n,t){c(e,o,u,s,function(e,r){if(e)return t(e);n(r)})})};var s=/^Encoding not recognized: /;function c(e,n,t,r,c){var u=!1,p=!0;if(null!==r&&null!==t&&t>r)return h(a(413,"request entity too large",{expected:t,length:t,limit:r,type:"entity.too.large"}));var l=e._readableState;if(e._decoder||l&&(l.encoding||l.decoder))return h(a(500,"stream encoding should not be set",{type:"stream.encoding.set"}));var f,d=0;try{f=function(e){if(!e)return null;try{return i.getDecoder(e)}catch(n){if(!s.test(n.message))throw n;throw a(415,"specified encoding unsupported",{encoding:e,type:"encoding.unsupported"})}}(n)}catch(e){return h(e)}var m=f?"":[];function h(){for(var n=new Array(arguments.length),t=0;t<n.length;t++)n[t]=arguments[t];function r(){b(),n[0]&&function(e){o(e),"function"==typeof e.pause&&e.pause()}(e),c.apply(null,n)}u=!0,p?process.nextTick(r):r()}function v(){u||h(a(400,"request aborted",{code:"ECONNABORTED",expected:t,length:t,received:d,type:"request.aborted"}))}function g(e){u||(d+=e.length,null!==r&&d>r?h(a(413,"request entity too large",{limit:r,received:d,type:"entity.too.large"})):f?m+=f.write(e):m.push(e))}function y(e){if(!u){if(e)return h(e);if(null!==t&&d!==t)h(a(400,"request size did not match content length",{expected:t,length:t,received:d,type:"request.size.invalid"}));else h(null,f?m+(f.end()||""):Buffer.concat(m))}}function b(){m=null,e.removeListener("aborted",v),e.removeListener("data",g),e.removeListener("end",y),e.removeListener("error",y),e.removeListener("close",b)}e.on("aborted",v),e.on("close",b),e.on("data",g),e.on("end",y),e.on("error",y),p=!1}},function(e,n){e.exports=require("http")},function(e,n){e.exports=require("url")},function(e,n){e.exports=require("events")},function(module,exports,__webpack_require__){
/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
var callSiteToString=__webpack_require__(74).callSiteToString,eventListenerCount=__webpack_require__(74).eventListenerCount,relative=__webpack_require__(26).relative;module.exports=depd;var basePath=process.cwd();function containsNamespace(e,n){for(var t=e.split(/[ ,]+/),r=String(n).toLowerCase(),a=0;a<t.length;a++){var i=t[a];if(i&&("*"===i||i.toLowerCase()===r))return!0}return!1}function convertDataDescriptorToAccessor(e,n,t){var r=Object.getOwnPropertyDescriptor(e,n),a=r.value;return r.get=function(){return a},r.writable&&(r.set=function(e){return a=e}),delete r.value,delete r.writable,Object.defineProperty(e,n,r),r}function createArgumentsString(e){for(var n="",t=0;t<e;t++)n+=", arg"+t;return n.substr(2)}function createStackString(e){var n=this.name+": "+this.namespace;this.message&&(n+=" deprecated "+this.message);for(var t=0;t<e.length;t++)n+="\n    at "+callSiteToString(e[t]);return n}function depd(e){if(!e)throw new TypeError("argument namespace is required");var n=callSiteLocation(getStack()[1])[0];function t(e){log.call(t,e)}return t._file=n,t._ignored=isignored(e),t._namespace=e,t._traced=istraced(e),t._warned=Object.create(null),t.function=wrapfunction,t.property=wrapproperty,t}function isignored(e){return!!process.noDeprecation||containsNamespace(process.env.NO_DEPRECATION||"",e)}function istraced(e){return!!process.traceDeprecation||containsNamespace(process.env.TRACE_DEPRECATION||"",e)}function log(e,n){var t=0!==eventListenerCount(process,"deprecation");if(t||!this._ignored){var r,a,i,o,s=0,c=!1,u=getStack(),p=this._file;for(n?(o=n,(i=callSiteLocation(u[1])).name=o.name,p=i[0]):i=o=callSiteLocation(u[s=2]);s<u.length;s++)if((a=(r=callSiteLocation(u[s]))[0])===p)c=!0;else if(a===this._file)p=this._file;else if(c)break;var l=r?o.join(":")+"__"+r.join(":"):void 0;if(!(void 0!==l&&l in this._warned)){this._warned[l]=!0;var f=e;if(f||(f=i!==o&&i.name?defaultMessage(i):defaultMessage(o)),t){var d=DeprecationError(this._namespace,f,u.slice(s));process.emit("deprecation",d)}else{var m=(process.stderr.isTTY?formatColor:formatPlain).call(this,f,r,u.slice(s));process.stderr.write(m+"\n","utf8")}}}}function callSiteLocation(e){var n=e.getFileName()||"<anonymous>",t=e.getLineNumber(),r=e.getColumnNumber();e.isEval()&&(n=e.getEvalOrigin()+", "+n);var a=[n,t,r];return a.callSite=e,a.name=e.getFunctionName(),a}function defaultMessage(e){var n=e.callSite,t=e.name;t||(t="<anonymous@"+formatLocation(e)+">");var r=n.getThis(),a=r&&n.getTypeName();return"Object"===a&&(a=void 0),"Function"===a&&(a=r.name||a),a&&n.getMethodName()?a+"."+t:t}function formatPlain(e,n,t){var r=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var a=0;a<t.length;a++)r+="\n    at "+callSiteToString(t[a]);return r}return n&&(r+=" at "+formatLocation(n)),r}function formatColor(e,n,t){var r="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var a=0;a<t.length;a++)r+="\n    [36mat "+callSiteToString(t[a])+"[39m";return r}return n&&(r+=" [36m"+formatLocation(n)+"[39m"),r}function formatLocation(e){return relative(basePath,e[0])+":"+e[1]+":"+e[2]}function getStack(){var e=Error.stackTraceLimit,n={},t=Error.prepareStackTrace;Error.prepareStackTrace=prepareObjectStackTrace,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(n);var r=n.stack.slice(1);return Error.prepareStackTrace=t,Error.stackTraceLimit=e,r}function prepareObjectStackTrace(e,n){return n}function wrapfunction(fn,message){if("function"!=typeof fn)throw new TypeError("argument fn must be a function");var args=createArgumentsString(fn.length),deprecate=this,stack=getStack(),site=callSiteLocation(stack[1]);site.name=fn.name;var deprecatedfn=eval("(function ("+args+') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');return deprecatedfn}function wrapproperty(e,n,t){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var r=Object.getOwnPropertyDescriptor(e,n);if(!r)throw new TypeError("must call property on owner object");if(!r.configurable)throw new TypeError("property must be configurable");var a=this,i=callSiteLocation(getStack()[1]);i.name=n,"value"in r&&(r=convertDataDescriptorToAccessor(e,n,t));var o=r.get,s=r.set;"function"==typeof o&&(r.get=function(){return log.call(a,t,i),o.apply(this,arguments)}),"function"==typeof s&&(r.set=function(){return log.call(a,t,i),s.apply(this,arguments)}),Object.defineProperty(e,n,r)}function DeprecationError(e,n,t){var r,a=new Error;return Object.defineProperty(a,"constructor",{value:DeprecationError}),Object.defineProperty(a,"message",{configurable:!0,enumerable:!1,value:n,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(a,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(a,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==r?r:r=createStackString.call(this,t)},set:function(e){r=e}}),a}},function(e,n,t){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(42)("http-errors"),a=t(179),i=t(25),o=t(73);function s(e){return Number(String(e).charAt(0)+"00")}e.exports=function e(){var n;var t;var a=500;var o={};for(var c=0;c<arguments.length;c++){var u=arguments[c];if(u instanceof Error)a=(n=u).status||n.statusCode||a;else switch(typeof u){case"string":t=u;break;case"number":a=u,0!==c&&r("non-first-argument status code; replace with createError("+u+", ...)");break;case"object":o=u}}"number"==typeof a&&(a<400||a>=600)&&r("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof a||!i[a]&&(a<400||a>=600))&&(a=500);var p=e[a]||e[s(a)];n||(n=p?new p(t):new Error(t||i[a]),Error.captureStackTrace(n,e));p&&n instanceof p&&n.status===a||(n.expose=a<500,n.status=n.statusCode=a);for(var l in o)"status"!==l&&"statusCode"!==l&&(n[l]=o[l]);return n},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return o(e,Error),e}(),function(e,n,t){n.forEach(function(n){var r,c=i[n].split(" ").map(function(e){return e.slice(0,1).toUpperCase()+e.slice(1)}).join("").replace(/[^ _0-9a-z]/gi,"");switch(s(n)){case 400:r=function(e,n,t){var r=n.match(/Error$/)?n:n+"Error";function s(e){var n=null!=e?e:i[t],o=new Error(n);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:n,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:r,writable:!0}),o}return o(s,e),s.prototype.status=t,s.prototype.statusCode=t,s.prototype.expose=!0,s}(t,c,n);break;case 500:r=function(e,n,t){var r=n.match(/Error$/)?n:n+"Error";function s(e){var n=null!=e?e:i[t],o=new Error(n);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:n,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:r,writable:!0}),o}return o(s,e),s.prototype.status=t,s.prototype.statusCode=t,s.prototype.expose=!1,s}(t,c,n)}r&&(e[n]=r,e[c]=r)}),e["I'mateapot"]=r.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,i.codes,e.exports.HttpError)},function(e,n){e.exports=function(e,n){return e=e||{},"string"==typeof n&&(n=n.split(/ +/)),n.reduce(function(n,t){return null==e[t]?n:(n[t]=e[t],n)},{})}},function(e,n,t){"use strict";
/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(187),a=t(46);function i(e,n){var t,a,i=n,o=function(e){try{return function(e){var n=r.parse(e);return n.parameters=void 0,r.format(n)}(e)}catch(e){return null}}(e);if(!o)return!1;if(i&&!Array.isArray(i))for(i=new Array(arguments.length-1),t=0;t<i.length;t++)i[t]=arguments[t+1];if(!i||!i.length)return o;for(t=0;t<i.length;t++)if(c(s(a=i[t]),o))return"+"===a[0]||-1!==a.indexOf("*")?o:a;return!1}function o(e){return void 0!==e.headers["transfer-encoding"]||!isNaN(e.headers["content-length"])}function s(e){if("string"!=typeof e)return!1;switch(e){case"urlencoded":return"application/x-www-form-urlencoded";case"multipart":return"multipart/*"}return"+"===e[0]?"*/*"+e:-1===e.indexOf("/")?a.lookup(e):e}function c(e,n){if(!1===e)return!1;var t=n.split("/"),r=e.split("/");return 2===t.length&&2===r.length&&(("*"===r[0]||r[0]===t[0])&&("*+"===r[1].substr(0,2)?r[1].length<=t[1].length+1&&r[1].substr(1)===t[1].substr(1-r[1].length):"*"===r[1]||r[1]===t[1]))}e.exports=function(e,n){var t=n;if(!o(e))return null;if(arguments.length>2){t=new Array(arguments.length-1);for(var r=0;r<t.length;r++)t[r]=arguments[r+1]}return i(e.headers["content-type"],t)},e.exports.is=i,e.exports.hasBody=o,e.exports.normalize=s,e.exports.match=c},function(e,n,t){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r,a,i,o=t(190),s=t(26).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,u=/^text\//i;function p(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),t=n&&o[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!u.test(n[1]))&&"UTF-8"}n.charset=p,n.charsets={lookup:p},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?n.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var r=n.charset(t);r&&(t+="; charset="+r.toLowerCase())}return t},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),r=t&&n.extensions[t[1].toLowerCase()];if(!r||!r.length)return!1;return r[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=s("x."+e).toLowerCase().substr(1);if(!t)return!1;return n.types[t]||!1},n.types=Object.create(null),r=n.extensions,a=n.types,i=["nginx","apache",void 0,"iana"],Object.keys(o).forEach(function(e){var n=o[e],t=n.extensions;if(t&&t.length){r[e]=t;for(var s=0;s<t.length;s++){var c=t[s];if(a[c]){var u=i.indexOf(o[a[c]].source),p=i.indexOf(n.source);if("application/octet-stream"!==a[c]&&(u>p||u===p&&"application/"===a[c].substr(0,12)))continue}a[c]=e}}})},function(e,n,t){"use strict";t.r(n);var r=t(83),a=t.n(r).a;Object.assign;new Map;Object.assign;new Map;new Map;Object.create({});var i,o=t(5),s=(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},function(e,n){function t(){this.constructor=e}i(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),c=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e};var u=function(e){function n(n,t){var r=e.call(this,n)||this;return r.link=t,r}return s(n,e),n}(Error);function p(e){return e.request.length<=1}function l(e){var n=!1;return new Promise(function(t,r){e.subscribe({next:function(e){n?console.warn("Promise Wrapper does not support multiple results from Observable"):(n=!0,t(e))},error:r})})}var f=l;function d(e){return new a(function(n){e.then(function(e){n.next(e),n.complete()}).catch(n.error.bind(n))})}function m(e){return new a(function(n){n.error(e)})}function h(e,n){var t=c({},e);return Object.defineProperty(n,"setContext",{enumerable:!1,value:function(e){t=c({},t,"function"==typeof e?e(t):e)}}),Object.defineProperty(n,"getContext",{enumerable:!1,value:function(){return c({},t)}}),Object.defineProperty(n,"toKey",{enumerable:!1,value:function(){return function(e){return Object(o.a)(e.query)+"|"+JSON.stringify(e.variables)+"|"+e.operationName}(n)}}),n}var v=function(e,n){return n?n(e):a.of()},g=function(e){return"function"==typeof e?new E(e):e},y=function(){return new E(function(e,n){return a.of()})},b=function(e){return 0===e.length?y():e.map(g).reduce(function(e,n){return e.concat(n)})},x=function(e,n,t){void 0===t&&(t=new E(v));var r=g(n),i=g(t);return p(r)&&p(i)?new E(function(n){return e(n)?r.request(n)||a.of():i.request(n)||a.of()}):new E(function(n,t){return e(n)?r.request(n,t)||a.of():i.request(n,t)||a.of()})},w=function(e,n){var t=g(e);if(p(t))return console.warn(new u("You are calling concat on a terminating link, which will have no effect",t)),t;var r=g(n);return p(r)?new E(function(e){return t.request(e,function(e){return r.request(e)||a.of()})||a.of()}):new E(function(e,n){return t.request(e,function(e){return r.request(e,n)||a.of()})||a.of()})},E=function(){function e(e){e&&(this.request=e)}return e.prototype.split=function(n,t,r){return void 0===r&&(r=new e(v)),this.concat(x(n,t,r))},e.prototype.concat=function(e){return w(this,e)},e.prototype.request=function(e,n){throw new Error("request is not implemented")},e.empty=y,e.from=b,e.split=x,e.execute=O,e}();function O(e,n){return e.request(h(n.context,function(e){var n={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return n.operationName||(n.operationName="string"!=typeof n.query?n.query.definitions.filter(function(e){return"OperationDefinition"===e.kind&&e.name}).map(function(e){return e.name.value})[0]||null:""),n}(function(e){for(var n=["query","operationName","variables","extensions","context"],t=0,r=Object.keys(e);t<r.length;t++){var a=r[t];if(n.indexOf(a)<0)throw new Error("illegal argument: "+a)}return e}(n))))||a.of()}t.d(n,"empty",function(){return y}),t.d(n,"from",function(){return b}),t.d(n,"split",function(){return x}),t.d(n,"concat",function(){return w}),t.d(n,"ApolloLink",function(){return E}),t.d(n,"execute",function(){return O}),t.d(n,"createOperation",function(){return h}),t.d(n,"makePromise",function(){return f}),t.d(n,"toPromise",function(){return l}),t.d(n,"fromPromise",function(){return d}),t.d(n,"fromError",function(){return m}),t.d(n,"Observable",function(){return a})},function(e,n,t){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},a=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},i=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var o=t(10),s=t(32);function c(e,n,t,r,a,i,s,c){var p=t.getFields()[r],l=[],m={kind:o.Kind.SELECTION_SET,selections:i.map(function(e){if(e.kind===o.Kind.FIELD){var n=function(e,n,t){var r=e.arguments||[],a=r.map(function(e){return e.name.value}),i=t.args.map(function(e){return e.name}),s=d(i,a),c=d(a,i),u=r.filter(function(e){return-1===c.indexOf(e.name.value)}),p=[],l=s.map(function(e){var n="_"+e;return p.push({arg:e,variable:n}),{kind:o.Kind.ARGUMENT,name:{kind:o.Kind.NAME,value:e},value:{kind:o.Kind.VARIABLE,name:{kind:o.Kind.NAME,value:n}}}});return{selection:{kind:o.Kind.FIELD,alias:null,arguments:u.concat(l),selectionSet:e.selectionSet,name:{kind:o.Kind.NAME,value:n}},variables:p}}(e,r,p),t=n.selection,a=n.variables;return l.push.apply(l,a),t}return e})},h=[];l.forEach(function(e){var n=e.arg,t=e.variable;if(!h.find(function(e){return e.variable.name.value===t})){var r=p.args.find(function(e){return e.name===n});if(!r)throw new Error("Unexpected missing arg");var a=function e(n){if(n instanceof o.GraphQLNonNull){var t=e(n.ofType);if(t.kind===o.Kind.LIST_TYPE||t.kind===o.Kind.NAMED_TYPE)return{kind:o.Kind.NON_NULL_TYPE,type:t};throw new Error("Incorrent inner non-null type")}return n instanceof o.GraphQLList?{kind:o.Kind.LIST_TYPE,type:e(n.ofType)}:{kind:o.Kind.NAMED_TYPE,name:{kind:o.Kind.NAME,value:n.toString()}}}(r.type);h.push({kind:o.Kind.VARIABLE_DEFINITION,variable:{kind:o.Kind.VARIABLE,name:{kind:o.Kind.NAME,value:t}},type:a})}});var v=function(e,n,t,r,a){var i=[];Object.keys(a).forEach(function(n){var t=a[n],r=t.typeCondition.name.value,o=e.getType(r);o&&i.push(t)});var s=u(e,n,t,r,i),c=s.selectionSet,p=s.usedFragments,l=s.usedVariables,d={};for(;p.length>0;){var m=p.pop();if(!d[m]){var h=a[m];if(!m)throw new Error("Could not find fragment "+m);var v=h.typeCondition.name.value,g=e.getType(v);if(g){var y=u(e,n,g,h.selectionSet,i),b=y.selectionSet,x=y.usedFragments,w=y.usedVariables;p=f(p,x),l=f(l,w),d[m]={kind:o.Kind.FRAGMENT_DEFINITION,name:{kind:o.Kind.NAME,value:m},typeCondition:h.typeCondition,selectionSet:b}}}}var E=Object.keys(d).map(function(e){return d[e]});return{selectionSet:c,fragments:E,usedVariables:l}}(e,n,t,m,s),g=v.selectionSet,y=v.fragments,b=v.usedVariables,x={kind:o.Kind.OPERATION_DEFINITION,operation:a,variableDefinitions:(c||[]).filter(function(e){return-1!==b.indexOf(e.variable.name.value)}).concat(h),selectionSet:g};return{kind:o.Kind.DOCUMENT,definitions:[x].concat(y)}}function u(e,n,t,a,i){var s,c=[],u=[],f=[t];return{selectionSet:o.visit(a,((s={})[o.Kind.FIELD]={enter:function(e){var n=p(f[f.length-1]);if(n instanceof o.GraphQLObjectType||n instanceof o.GraphQLInterfaceType){var t=n.getFields(),r="__typename"===e.name.value?o.TypeNameMetaFieldDef:t[e.name.value];if(!r)return null;f.push(r.type)}else n instanceof o.GraphQLUnionType&&"__typename"===e.name.value&&f.push(o.TypeNameMetaFieldDef.type)},leave:function(){f.pop()}},s[o.Kind.SELECTION_SET]=function(e){var t=p(f[f.length-1]),a=t.name,i=e.selections;if((t instanceof o.GraphQLInterfaceType||t instanceof o.GraphQLUnionType)&&!i.find(function(e){return e.kind===o.Kind.FIELD&&"__typename"===e.name.value})&&(i=i.concat({kind:o.Kind.FIELD,name:{kind:o.Kind.NAME,value:"__typename"}})),n[a]&&i.forEach(function(e){if(e.kind===o.Kind.FIELD){var t=e.name.value,r=n[a][t];r&&(i=i.concat(r))}}),i!==e.selections)return r({},e,{selections:i})},s[o.Kind.FRAGMENT_SPREAD]=function(n){var t=i.filter(function(e){return e.name.value===n.name.value})[0];if(!t)return null;if(t.typeCondition){var r=e.getType(t.typeCondition.name.value);if(!l(p(f[f.length-1]),r))return null}c.push(n.name.value)},s[o.Kind.INLINE_FRAGMENT]={enter:function(n){if(n.typeCondition){var t=e.getType(n.typeCondition.name.value);if(!l(p(f[f.length-1]),t))return null;f.push(t)}},leave:function(n){if(n.typeCondition){if(!e.getType(n.typeCondition.name.value))return null;f.pop()}}},s[o.Kind.VARIABLE]=function(e){u.push(e.name.value)},s)),usedFragments:c,usedVariables:u}}function p(e){for(var n=e;n instanceof o.GraphQLNonNull||n instanceof o.GraphQLList;)n=n.ofType;return n}function l(e,n,t){return void 0===t&&(t=!1),e===n||(e instanceof o.GraphQLInterfaceType&&n instanceof o.GraphQLObjectType?-1!==n.getInterfaces().indexOf(e):e instanceof o.GraphQLInterfaceType&&n instanceof o.GraphQLInterfaceType||(e instanceof o.GraphQLUnionType&&n instanceof o.GraphQLObjectType?-1!==e.getTypes().indexOf(n):e instanceof o.GraphQLObjectType&&!t&&l(n,e,!0)))}function f(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t={},r=[];return e.forEach(function(e){e.forEach(function(e){t[e]||(t[e]=!0,r.push(e))})}),r}function d(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];var r={};return n.forEach(function(e){e.forEach(function(e){r[e]=!0})}),e.filter(function(e){return!r[e]})}n.default=function(e,n,t,r,u,p,l){return a(this,void 0,void 0,function(){var a,f,d,m,h,v,g,y,b,x,w;return i(this,function(i){switch(i.label){case 0:if(!(a="mutation"===t?e.getMutationType():"subscription"===t?e.getSubscriptionType():e.getQueryType()))return[3,3];if(f=c(e,n,a,r,t,l.fieldNodes,l.fragments,l.operation.variableDefinitions),(d=o.validate(e,f)).length>0)throw d;if(m=f.definitions.find(function(e){return e.kind===o.Kind.OPERATION_DEFINITION}),h={},m&&m.kind===o.Kind.OPERATION_DEFINITION&&m.variableDefinitions&&Array.isArray(m.variableDefinitions))for(v=0,g=m.variableDefinitions;v<g.length;v++)y=g[v],b=y.variable.name.value,x=b.startsWith("_")?b.slice(1):b,h[b]=null!=u[x]?u[x]:l.variableValues[b];return"query"!==t&&"mutation"!==t?[3,2]:[4,o.execute(e,f,l.rootValue,p,h)];case 1:return w=i.sent(),[2,s.checkResultAndHandleErrors(w,l,r)];case 2:if("subscription"===t)return[2,o.subscribe(e,f,l.rootValue,p,h)];i.label=3;case 3:throw new Error("Could not forward to merged schema")}})})},n.createDocument=c},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){if(!e)return!0;for(var n in e)if(Object.hasOwnProperty.call(e,n))return!1;return!0}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(47),a=t(47);n.execute=a.execute,n.default=function(e){return function(n){return r.makePromise(r.execute(e,n))}}},function(e,n){for(var t=[],r=0;r<256;++r)t[r]=(r+256).toString(16).substr(1);e.exports=function(e,n){var r=n||0,a=t;return a[e[r++]]+a[e[r++]]+a[e[r++]]+a[e[r++]]+"-"+a[e[r++]]+a[e[r++]]+"-"+a[e[r++]]+a[e[r++]]+"-"+a[e[r++]]+a[e[r++]]+"-"+a[e[r++]]+a[e[r++]]+a[e[r++]]+a[e[r++]]+a[e[r++]]+a[e[r++]]}},function(e,n,t){var r=t(72);e.exports=function(){return r.randomBytes(16)}},function(e,n,t){"use strict";function r(e){return e&&"object"==typeof e&&!Array.isArray(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function e(n,t){var a=Object.assign({},n);return r(n)&&r(t)&&Object.keys(t).forEach(function(i){var o,s;r(t[i])?i in n?a[i]=e(n[i],t[i]):Object.assign(a,((o={})[i]=t[i],o)):Object.assign(a,((s={})[i]=t[i],s))}),a}},function(e,n,t){"use strict";var r,a=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),o=t(18),s=Object.prototype.hasOwnProperty,c=function(){function e(){}return e.implementsVisitorMethod=function(n){if(!n.startsWith("visit"))return!1;var t=this.prototype[n];return"function"==typeof t&&(this===e||t!==e.prototype[n])},e.prototype.visitSchema=function(e){},e.prototype.visitScalar=function(e){},e.prototype.visitObject=function(e){},e.prototype.visitFieldDefinition=function(e,n){},e.prototype.visitArgumentDefinition=function(e,n){},e.prototype.visitInterface=function(e){},e.prototype.visitUnion=function(e){},e.prototype.visitEnum=function(e){},e.prototype.visitEnumValue=function(e,n){},e.prototype.visitInputObject=function(e){},e.prototype.visitInputFieldDefinition=function(e,n){},e}();function u(e,n){function t(e,t){for(var r=[],a=2;a<arguments.length;a++)r[a-2]=arguments[a];return n(t,e).every(function(n){var a=n[e].apply(n,[t].concat(r));if(void 0===a)return!0;if("visitSchema"===e||t instanceof i.GraphQLSchema)throw new Error("Method "+e+" cannot replace schema with "+a);if(null===a)return t=null,!1;t=a}),t}function r(e){d(e.getFields(),function(n){var r=t("visitFieldDefinition",n,{objectType:e});return r&&r.args&&d(r.args,function(n){return t("visitArgumentDefinition",n,{field:r,objectType:e})}),r})}return function e(n){if(n instanceof i.GraphQLSchema)return t("visitSchema",n),d(n.getTypeMap(),function(n,t){if(!t.startsWith("__"))return e(n)}),n;if(n instanceof i.GraphQLObjectType){var a=t("visitObject",n);return a&&r(a),a}if(n instanceof i.GraphQLInterfaceType){var o=t("visitInterface",n);return o&&r(o),o}if(n instanceof i.GraphQLInputObjectType){var s=t("visitInputObject",n);return s&&d(s.getFields(),function(e){return t("visitInputFieldDefinition",e,{objectType:s})}),s}if(n instanceof i.GraphQLScalarType)return t("visitScalar",n);if(n instanceof i.GraphQLUnionType)return t("visitUnion",n);if(n instanceof i.GraphQLEnumType){var c=t("visitEnum",n);return c&&d(c.getValues(),function(e){return t("visitEnumValue",e,{enumType:c})}),c}throw new Error("Unexpected schema type: "+n)}(e),e}function p(e){return function e(r){if(r instanceof i.GraphQLSchema){var a=r.getTypeMap(),o=Object.create(null);f(a,function(e,n){if(!n.startsWith("__")){var t=e.name;if(!t.startsWith("__")){if(s.call(o,t))throw new Error("Duplicate schema type name "+t);o[t]=e}}}),f(o,function(e,n){a[n]=e}),f(r.getDirectives(),function(e){e.args&&f(e.args,function(e){e.type=t(e.type)})}),f(a,function(n,t){t.startsWith("__")||e(n)}),d(a,function(e,n){if(!n.startsWith("__")&&!s.call(o,n))return null})}else if(r instanceof i.GraphQLObjectType)n(r),f(r.getInterfaces(),function(n){return e(n)});else if(r instanceof i.GraphQLInterfaceType)n(r);else if(r instanceof i.GraphQLInputObjectType)f(r.getFields(),function(e){e.type=t(e.type)});else if(r instanceof i.GraphQLScalarType);else if(r instanceof i.GraphQLUnionType)d(r.getTypes(),function(e){return t(e)});else if(!(r instanceof i.GraphQLEnumType))throw new Error("Unexpected schema type: "+r)}(e),e;function n(e){f(e.getFields(),function(e){e.type=t(e.type),e.args&&f(e.args,function(e){e.type=t(e.type)})})}function t(n){if(n instanceof i.GraphQLList||n instanceof i.GraphQLNonNull)n.ofType=t(n.ofType);else if(i.isNamedType(n)){var r=n,a=e.getType(r.name);if(a&&r!==a)return a}return n}}n.SchemaVisitor=c,n.visitSchema=u,n.healSchema=p;var l=function(e){function n(n){var t=e.call(this)||this;return t.name=n.name,t.args=n.args,t.visitedType=n.visitedType,t.schema=n.schema,t.context=n.context,t}return a(n,e),n.getDirectiveDeclaration=function(e,n){return n.getDirective(e)},n.visitSchemaDirectives=function(e,n,t){void 0===t&&(t=Object.create(null));var r=this.getDeclaredDirectives(e,n),a=Object.create(null);return Object.keys(n).forEach(function(e){a[e]=[]}),u(e,function(i,c){var u=[],p=i.astNode&&i.astNode.directives;return p?(p.forEach(function(a){var p=a.name.value;if(s.call(n,p)){var l=n[p];if(l.implementsVisitorMethod(c)){var f,d=r[p];d?f=o.getArgumentValues(d,a):(f=Object.create(null),a.arguments.forEach(function(e){f[e.name.value]=m(e.value)})),u.push(new l({name:p,args:f,visitedType:i,schema:e,context:t}))}}}),u.length>0&&u.forEach(function(e){a[e.name].push(e)}),u):u}),p(e),a},n.getDeclaredDirectives=function(e,n){var t=Object.create(null);return f(e.getDirectives(),function(e){t[e.name]=e}),f(n,function(n,r){var a=n.getDirectiveDeclaration(r,e);a&&(t[r]=a)}),f(t,function(e,t){if(s.call(n,t)){var r=n[t];f(e.locations,function(e){var n=function(e){return"visit"+e.replace(/([^_]*)_?/g,function(e,n){return n.charAt(0).toUpperCase()+n.slice(1).toLowerCase()})}(e);if(c.implementsVisitorMethod(n)&&!r.implementsVisitorMethod(n))throw new Error("SchemaDirectiveVisitor for @"+t+" must implement "+n+" method")})}}),t},n}(c);function f(e,n){Object.keys(e).forEach(function(t){n(e[t],t)})}function d(e,n){var t=0;Object.keys(e).forEach(function(r){var a=n(e[r],r);if(void 0!==a)return null===a?(delete e[r],void t++):void(e[r]=a)}),t>0&&Array.isArray(e)&&e.splice(0).forEach(function(n){e.push(n)})}function m(e){switch(e.kind){case i.Kind.NULL:return null;case i.Kind.INT:return parseInt(e.value,10);case i.Kind.FLOAT:return parseFloat(e.value);case i.Kind.STRING:case i.Kind.ENUM:case i.Kind.BOOLEAN:return e.value;case i.Kind.LIST:return e.values.map(m);case i.Kind.OBJECT:var n=Object.create(null);return e.fields.forEach(function(e){n[e.name.value]=m(e.value)}),n;default:throw new Error("Unexpected value kind: "+e.kind)}}n.SchemaDirectiveVisitor=l},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r="0.11.11",a="0.8.2";function i(e){return e?JSON.stringify(e).replace(/\//g,"\\/"):null}n.renderGraphiQL=function(e){var n=e.endpointURL,t=n.startsWith("ws://")||n.startsWith("wss://"),o=e.subscriptionsEndpoint,s=!t,c=t||!!o,u=c&&(t?n:o),p=e.query,l=e.variables?JSON.stringify(e.variables,null,2):null,f=e.operationName,d=e.passHeader?e.passHeader:"",m=e.editorTheme,h=!!m,v=e.websocketConnectionParams||null;return'\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8" />\n  <title>GraphiQL</title>\n  <meta name="robots" content="noindex" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      overflow: hidden;\n      width: 100%;\n    }\n  </style>\n  <link href="//unpkg.com/graphiql@'+r+'/graphiql.css" rel="stylesheet" />\n  <script src="//unpkg.com/react@15.6.1/dist/react.min.js"><\/script>\n  <script src="//unpkg.com/react-dom@15.6.1/dist/react-dom.min.js"><\/script>\n  <script src="//unpkg.com/graphiql@'+r+'/graphiql.min.js"><\/script>\n  '+(h?'<link href="//cdn.jsdelivr.net/npm/codemirror@5/theme/'+m+'.min.css" rel="stylesheet" />':"")+"\n  "+(s?'<script src="//cdn.jsdelivr.net/fetch/2.0.1/fetch.min.js"><\/script>':"")+"\n  "+(c?'<script src="//unpkg.com/subscriptions-transport-ws@'+a+'/browser/client.js"><\/script>':"")+"\n  "+(c&&s?'<script src="//unpkg.com/graphiql-subscriptions-fetcher@0.0.2/browser/client.js"><\/script>':"")+"\n\n</head>\n<body>\n  <script>\n    // Collect the URL parameters\n    var parameters = {};\n    window.location.search.substr(1).split('&').forEach(function (entry) {\n      var eq = entry.indexOf('=');\n      if (eq >= 0) {\n        parameters[decodeURIComponent(entry.slice(0, eq))] =\n          decodeURIComponent(entry.slice(eq + 1));\n      }\n    });\n    // Produce a Location query string from a parameter object.\n    function locationQuery(params, location) {\n      return (location ? location: '') + '?' + Object.keys(params).map(function (key) {\n        return encodeURIComponent(key) + '=' +\n          encodeURIComponent(params[key]);\n      }).join('&');\n    }\n    // Derive a fetch URL from the current URL, sans the GraphQL parameters.\n    var graphqlParamNames = {\n      query: true,\n      variables: true,\n      operationName: true\n    };\n    var otherParams = {};\n    for (var k in parameters) {\n      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\n        otherParams[k] = parameters[k];\n      }\n    }\n\n    "+(c?"\n    var subscriptionsClient = new window.SubscriptionsTransportWs.SubscriptionClient('"+u+"', {\n      reconnect: true"+(v?",\n      connectionParams: "+JSON.stringify(v):"")+"\n    });\n\n    var graphQLWSFetcher = subscriptionsClient.request.bind(subscriptionsClient);\n    ":"")+"\n\n    "+(s?"\n      // We don't use safe-serialize for location, because it's not client input.\n      var fetchURL = locationQuery(otherParams, '"+n+"');\n\n      // Defines a GraphQL fetcher using the fetch API.\n      function graphQLHttpFetcher(graphQLParams) {\n          return fetch(fetchURL, {\n            method: 'post',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              "+d+"\n            },\n            body: JSON.stringify(graphQLParams),\n            credentials: 'same-origin',\n          }).then(function (response) {\n            return response.text();\n          }).then(function (responseBody) {\n            try {\n              return JSON.parse(responseBody);\n            } catch (error) {\n              return responseBody;\n            }\n          });\n      }\n    ":"")+"\n\n    "+(c&&s?"\n      var fetcher =\n        window.GraphiQLSubscriptionsFetcher.graphQLFetcher(subscriptionsClient, graphQLHttpFetcher);\n    ":"\n      var fetcher = "+(c?"graphQLWSFetcher":"graphQLHttpFetcher")+";\n    ")+"\n\n    // When the query and variables string is edited, update the URL bar so\n    // that it can be easily shared.\n    function onEditQuery(newQuery) {\n      parameters.query = newQuery;\n      updateURL();\n    }\n    function onEditVariables(newVariables) {\n      parameters.variables = newVariables;\n      updateURL();\n    }\n    function onEditOperationName(newOperationName) {\n      parameters.operationName = newOperationName;\n      updateURL();\n    }\n    function updateURL() {\n      var cleanParams = Object.keys(parameters).filter(function(v) {\n        return parameters[v];\n      }).reduce(function(old, v) {\n        old[v] = parameters[v];\n        return old;\n      }, {});\n\n      history.replaceState(null, null, locationQuery(cleanParams) + window.location.hash);\n    }\n    // Render <GraphiQL /> into the body.\n    ReactDOM.render(\n      React.createElement(GraphiQL, {\n        fetcher: fetcher,\n        onEditQuery: onEditQuery,\n        onEditVariables: onEditVariables,\n        onEditOperationName: onEditOperationName,\n        query: "+i(p)+",\n        response: "+i(null)+",\n        variables: "+i(l)+",\n        operationName: "+i(f)+",\n        editorTheme: "+i(m)+",\n        websocketConnectionParams: "+i(v)+",\n      }),\n      document.body\n    );\n  <\/script>\n</body>\n</html>"}},function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.resolveGraphqlOptions=function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return r(this,void 0,void 0,function(){var t;return a(this,function(r){switch(r.label){case 0:if("function"!=typeof e)return[3,5];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,e.apply(void 0,n)];case 2:return[2,r.sent()];case 3:throw t=r.sent(),new Error("Invalid options provided to ApolloServer: "+t.message);case 4:return[3,6];case 5:return[2,e];case 6:return[2]}})})}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,a,i=t(10),o=t(105),s=t(104),c=t(103);function u(e){console.error(e.stack)}function p(e,n){return e.map(function(e){if(void 0===n)return i.formatError(e);try{return n(e)}catch(e){console.error("Error in formatError function:",e);var t=new Error("Internal server error");return i.formatError(t)}})}!function(e){e[e.request=0]="request",e[e.parse=1]="parse",e[e.validation=2]="validation",e[e.execute=3]="execute"}(r=n.LogAction||(n.LogAction={})),function(e){e[e.start=0]="start",e[e.end=1]="end",e[e.status=2]="status"}(a=n.LogStep||(n.LogStep={})),n.runQuery=function(e){return Promise.resolve().then(function(){return function(e){var n,t=e.logFunction||function(){return null},l=void 0!==e.debug&&e.debug;t({action:r.request,step:a.start});var f=e.context||{},d=[];e.tracing&&d.push(s.TracingExtension),!0===e.cacheControl?d.push(c.CacheControlExtension):e.cacheControl&&d.push(new c.CacheControlExtension(e.cacheControl));var m=d.length>0&&new o.GraphQLExtensionStack(d);m&&(f._extensionStack=m,o.enableGraphQLExtensions(e.schema),m.requestDidStart());var h="string"==typeof e.query?e.query:i.print(e.query);if(t({action:r.request,step:a.status,key:"query",data:h}),t({action:r.request,step:a.status,key:"variables",data:e.variables}),t({action:r.request,step:a.status,key:"operationName",data:e.operationName}),"string"==typeof e.query)try{t({action:r.parse,step:a.start}),n=i.parse(e.query),t({action:r.parse,step:a.end})}catch(n){return t({action:r.parse,step:a.end}),Promise.resolve({errors:p([n],e.formatError)})}else n=e.query;var v=i.specifiedRules;e.validationRules&&(v=v.concat(e.validationRules)),t({action:r.validation,step:a.start});var g=i.validate(e.schema,n,v);if(t({action:r.validation,step:a.end}),g.length)return Promise.resolve({errors:p(g,e.formatError)});m&&m.executionDidStart();try{return t({action:r.execute,step:a.start}),Promise.resolve(i.execute(e.schema,n,e.rootValue,f,e.variables,e.operationName,e.fieldResolver)).then(function(n){t({action:r.execute,step:a.end}),t({action:r.request,step:a.end});var i={data:n.data};return n.errors&&(i.errors=p(n.errors,e.formatError),l&&n.errors.map(u)),m&&(m.executionDidEnd(),m.requestDidEnd(),i.extensions=m.format()),e.formatResponse&&(i=e.formatResponse(i,e)),i})}catch(n){return t({action:r.execute,step:a.end}),t({action:r.request,step:a.end}),Promise.resolve({errors:p([n],e.formatError)})}}(e)})}},function(e,n,t){var r=t(38),a=t(36),i=t(35);e.exports=function(e,n){e=e.req||e,n=i.clone(n);var t=e.headers["content-length"],o=e.headers["content-encoding"]||"identity";return t&&"identity"===o&&(n.length=~~t),n.encoding=n.encoding||"utf8",n.limit=n.limit||"1mb",Promise.resolve().then(function(){return r(a(e),n)}).then(e=>n.returnRawBody?{parsed:e,raw:e}:e)}},function(e,n,t){"use strict";var r=String.prototype.replace,a=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,n,t){"use strict";var r=Object.prototype.hasOwnProperty,a=function(){for(var e=[],n=0;n<256;++n)e.push("%"+((n<16?"0":"")+n.toString(16)).toUpperCase());return e}();n.arrayToObject=function(e,n){for(var t=n&&n.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(t[r]=e[r]);return t},n.merge=function(e,t,a){if(!t)return e;if("object"!=typeof t){if(Array.isArray(e))e.push(t);else{if("object"!=typeof e)return[e,t];(a.plainObjects||a.allowPrototypes||!r.call(Object.prototype,t))&&(e[t]=!0)}return e}if("object"!=typeof e)return[e].concat(t);var i=e;return Array.isArray(e)&&!Array.isArray(t)&&(i=n.arrayToObject(e,a)),Array.isArray(e)&&Array.isArray(t)?(t.forEach(function(t,i){r.call(e,i)?e[i]&&"object"==typeof e[i]?e[i]=n.merge(e[i],t,a):e.push(t):e[i]=t}),e):Object.keys(t).reduce(function(e,i){var o=t[i];return r.call(e,i)?e[i]=n.merge(e[i],o,a):e[i]=o,e},i)},n.assign=function(e,n){return Object.keys(n).reduce(function(e,t){return e[t]=n[t],e},e)},n.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(n){return e}},n.encode=function(e){if(0===e.length)return e;for(var n="string"==typeof e?e:String(e),t="",r=0;r<n.length;++r){var i=n.charCodeAt(r);45===i||46===i||95===i||126===i||i>=48&&i<=57||i>=65&&i<=90||i>=97&&i<=122?t+=n.charAt(r):i<128?t+=a[i]:i<2048?t+=a[192|i>>6]+a[128|63&i]:i<55296||i>=57344?t+=a[224|i>>12]+a[128|i>>6&63]+a[128|63&i]:(r+=1,i=65536+((1023&i)<<10|1023&n.charCodeAt(r)),t+=a[240|i>>18]+a[128|i>>12&63]+a[128|i>>6&63]+a[128|63&i])}return t},n.compact=function(e){for(var n=[{obj:{o:e},prop:"o"}],t=[],r=0;r<n.length;++r)for(var a=n[r],i=a.obj[a.prop],o=Object.keys(i),s=0;s<o.length;++s){var c=o[s],u=i[c];"object"==typeof u&&null!==u&&-1===t.indexOf(u)&&(n.push({obj:i,prop:c}),t.push(u))}return function(e){for(var n;e.length;){var t=e.pop();if(n=t.obj[t.prop],Array.isArray(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}return n}(n)},n.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},n.isBuffer=function(e){return null!==e&&void 0!==e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},function(e,n,t){var r=t(38),a=t(36),i=t(112),o=t(35);e.exports=function(e,n){e=e.req||e;var t=(n=o.clone(n)).queryString||{};void 0===t.allowDots&&(t.allowDots=!0);var s=e.headers["content-length"],c=e.headers["content-encoding"]||"identity";return s&&"identity"===c&&(n.length=~~s),n.encoding=n.encoding||"utf8",n.limit=n.limit||"56kb",n.qs=n.qs||i,Promise.resolve().then(function(){return r(a(e),n)}).then(function(e){try{var r=n.qs.parse(e,t);return n.returnRawBody?{parsed:r,raw:e}:r}catch(n){throw n.status=400,n.body=e,n}})}},function(e){e.exports=[["0","\0",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]},function(e){e.exports=[["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc",""],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]]},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(41).EventEmitter;function a(e,n,t){Object.defineProperty(e,n,{configurable:!0,enumerable:!0,get:function(){var r=t();return Object.defineProperty(e,n,{configurable:!0,enumerable:!0,value:r}),r}})}function i(e){return e.toString()}a(e.exports,"callSiteToString",function(){var e=Error.stackTraceLimit,n={},r=Error.prepareStackTrace;Error.prepareStackTrace=function(e,n){return n},Error.stackTraceLimit=2,Error.captureStackTrace(n);var a=n.stack.slice();return Error.prepareStackTrace=r,Error.stackTraceLimit=e,a[0].toString?i:t(136)}),a(e.exports,"eventListenerCount",function(){return r.listenerCount||t(135)})},function(e,n,t){var r=t(38),a=t(36),i=t(35),o=/^[\x20\x09\x0a\x0d]*(\[|\{)/;e.exports=function(e,n){e=e.req||e,n=i.clone(n);var t=e.headers["content-length"],s=e.headers["content-encoding"]||"identity";t&&"identity"===s&&(n.length=t=~~t),n.encoding=n.encoding||"utf8",n.limit=n.limit||"1mb";var c=!1!==n.strict;return Promise.resolve().then(function(){return r(a(e),n)}).then(function(e){try{var t=function(e){if(!c)return e?JSON.parse(e):e;if(!e)return{};if(!o.test(e))throw new Error("invalid JSON, only supports object and array");return JSON.parse(e)}(e);return n.returnRawBody?{parsed:t,raw:e}:t}catch(n){throw n.status=400,n.body=e,n}})}},function(e,n,t){var r,a;
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(i,o){"use strict";"object"==typeof e&&e.exports?e.exports=o():void 0===(a="function"==typeof(r=o)?r.call(n,t,n,e):r)||(e.exports=a)}(0,function(e){"use strict";var n=e&&e.SecondLevelDomains,t={list:{ac:" com gov mil net org ",ae:" ac co gov mil name net org pro sch ",af:" com edu gov net org ",al:" com edu gov mil net org ",ao:" co ed gv it og pb ",ar:" com edu gob gov int mil net org tur ",at:" ac co gv or ",au:" asn com csiro edu gov id net org ",ba:" co com edu gov mil net org rs unbi unmo unsa untz unze ",bb:" biz co com edu gov info net org store tv ",bh:" biz cc com edu gov info net org ",bn:" com edu gov net org ",bo:" com edu gob gov int mil net org tv ",br:" adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",bs:" com edu gov net org ",bz:" du et om ov rg ",ca:" ab bc mb nb nf nl ns nt nu on pe qc sk yk ",ck:" biz co edu gen gov info net org ",cn:" ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",co:" com edu gov mil net nom org ",cr:" ac c co ed fi go or sa ",cy:" ac biz com ekloges gov ltd name net org parliament press pro tm ",do:" art com edu gob gov mil net org sld web ",dz:" art asso com edu gov net org pol ",ec:" com edu fin gov info med mil net org pro ",eg:" com edu eun gov mil name net org sci ",er:" com edu gov ind mil net org rochest w ",es:" com edu gob nom org ",et:" biz com edu gov info name net org ",fj:" ac biz com info mil name net org pro ",fk:" ac co gov net nom org ",fr:" asso com f gouv nom prd presse tm ",gg:" co net org ",gh:" com edu gov mil org ",gn:" ac com gov net org ",gr:" com edu gov mil net org ",gt:" com edu gob ind mil net org ",gu:" com edu gov net org ",hk:" com edu gov idv net org ",hu:" 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",id:" ac co go mil net or sch web ",il:" ac co gov idf k12 muni net org ",in:" ac co edu ernet firm gen gov i ind mil net nic org res ",iq:" com edu gov i mil net org ",ir:" ac co dnssec gov i id net org sch ",it:" edu gov ",je:" co net org ",jo:" com edu gov mil name net org sch ",jp:" ac ad co ed go gr lg ne or ",ke:" ac co go info me mobi ne or sc ",kh:" com edu gov mil net org per ",ki:" biz com de edu gov info mob net org tel ",km:" asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",kn:" edu gov net org ",kr:" ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",kw:" com edu gov net org ",ky:" com edu gov net org ",kz:" com edu gov mil net org ",lb:" com edu gov net org ",lk:" assn com edu gov grp hotel int ltd net ngo org sch soc web ",lr:" com edu gov net org ",lv:" asn com conf edu gov id mil net org ",ly:" com edu gov id med net org plc sch ",ma:" ac co gov m net org press ",mc:" asso tm ",me:" ac co edu gov its net org priv ",mg:" com edu gov mil nom org prd tm ",mk:" com edu gov inf name net org pro ",ml:" com edu gov net org presse ",mn:" edu gov org ",mo:" com edu gov net org ",mt:" com edu gov net org ",mv:" aero biz com coop edu gov info int mil museum name net org pro ",mw:" ac co com coop edu gov int museum net org ",mx:" com edu gob net org ",my:" com edu gov mil name net org sch ",nf:" arts com firm info net other per rec store web ",ng:" biz com edu gov mil mobi name net org sch ",ni:" ac co com edu gob mil net nom org ",np:" com edu gov mil net org ",nr:" biz com edu gov info net org ",om:" ac biz co com edu gov med mil museum net org pro sch ",pe:" com edu gob mil net nom org sld ",ph:" com edu gov i mil net ngo org ",pk:" biz com edu fam gob gok gon gop gos gov net org web ",pl:" art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",pr:" ac biz com edu est gov info isla name net org pro prof ",ps:" com edu gov net org plo sec ",pw:" belau co ed go ne or ",ro:" arts com firm info nom nt org rec store tm www ",rs:" ac co edu gov in org ",sb:" com edu gov net org ",sc:" com edu gov net org ",sh:" co com edu gov net nom org ",sl:" com edu gov net org ",st:" co com consulado edu embaixada gov mil net org principe saotome store ",sv:" com edu gob org red ",sz:" ac co org ",tr:" av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",tt:" aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",tw:" club com ebiz edu game gov idv mil net org ",mu:" ac co com gov net or org ",mz:" ac co edu gov org ",na:" co com ",nz:" ac co cri geek gen govt health iwi maori mil net org parliament school ",pa:" abo ac com edu gob ing med net nom org sld ",pt:" com edu gov int net nome org publ ",py:" com edu gov mil net org ",qa:" com edu gov mil net org ",re:" asso com nom ",ru:" ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",rw:" ac co com edu gouv gov int mil net ",sa:" com edu gov med net org pub sch ",sd:" com edu gov info med net org tv ",se:" a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",sg:" com edu gov idn net org per ",sn:" art com edu gouv org perso univ ",sy:" com edu gov mil net news org ",th:" ac co go in mi net or ",tj:" ac biz co com edu go gov info int mil name net nic org test web ",tn:" agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",tz:" ac co go ne or ",ua:" biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",ug:" ac co go ne or org sc ",uk:" ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",us:" dni fed isa kids nsn ",uy:" com edu gub mil net org ",ve:" co com edu gob info mil net org web ",vi:" co com k12 net org ",vn:" ac biz com edu gov health info int name net org pro ",ye:" co com gov ltd me net org plc ",yu:" ac co edu gov org ",za:" ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",zm:" ac co com edu gov net org sch ",com:"ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",net:"gb jp se uk ",org:"ae",de:"com "},has:function(e){var n=e.lastIndexOf(".");if(n<=0||n>=e.length-1)return!1;var r=e.lastIndexOf(".",n-1);if(r<=0||r>=n-1)return!1;var a=t.list[e.slice(n+1)];return!!a&&a.indexOf(" "+e.slice(r+1,n)+" ")>=0},is:function(e){var n=e.lastIndexOf(".");if(n<=0||n>=e.length-1)return!1;if(e.lastIndexOf(".",n-1)>=0)return!1;var r=t.list[e.slice(n+1)];return!!r&&r.indexOf(" "+e.slice(0,n)+" ")>=0},get:function(e){var n=e.lastIndexOf(".");if(n<=0||n>=e.length-1)return null;var r=e.lastIndexOf(".",n-1);if(r<=0||r>=n-1)return null;var a=t.list[e.slice(n+1)];return a?a.indexOf(" "+e.slice(r+1,n)+" ")<0?null:e.slice(r+1):null},noConflict:function(){return e.SecondLevelDomains===this&&(e.SecondLevelDomains=n),this}};return t})},function(e,n,t){var r,a;
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(i,o){"use strict";"object"==typeof e&&e.exports?e.exports=o():void 0===(a="function"==typeof(r=o)?r.call(n,t,n,e):r)||(e.exports=a)}(0,function(e){"use strict";var n=e&&e.IPv6;return{best:function(e){var n,t,r=e.toLowerCase().split(":"),a=r.length,i=8;for(""===r[0]&&""===r[1]&&""===r[2]?(r.shift(),r.shift()):""===r[0]&&""===r[1]?r.shift():""===r[a-1]&&""===r[a-2]&&r.pop(),-1!==r[(a=r.length)-1].indexOf(".")&&(i=7),n=0;n<a&&""!==r[n];n++);if(n<i)for(r.splice(n,1,"0000");r.length<i;)r.splice(n,0,"0000");for(var o=0;o<i;o++){t=r[o].split("");for(var s=0;s<3&&"0"===t[0]&&t.length>1;s++)t.splice(0,1);r[o]=t.join("")}var c=-1,u=0,p=0,l=-1,f=!1;for(o=0;o<i;o++)f?"0"===r[o]?p+=1:(f=!1,p>u&&(c=l,u=p)):"0"===r[o]&&(f=!0,l=o,p=1);p>u&&(c=l,u=p),u>1&&r.splice(c,u,""),a=r.length;var d="";for(""===r[0]&&(d=":"),o=0;o<a&&(d+=r[o],o!==a-1);o++)d+=":";return""===r[a-1]&&(d+=":"),d},noConflict:function(){return e.IPv6===this&&(e.IPv6=n),this}}})},function(e,n,t){(function(e){var r;/*! https://mths.be/punycode v1.4.0 by @mathias */!function(a){"object"==typeof n&&n&&n.nodeType,"object"==typeof e&&e&&e.nodeType;var i="object"==typeof global&&global;i.global!==i&&i.window!==i&&i.self;var o,s=2147483647,c=36,u=1,p=26,l=38,f=700,d=72,m=128,h="-",v=/^xn--/,g=/[^\x20-\x7E]/,y=/[\x2E\u3002\uFF0E\uFF61]/g,b={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=c-u,w=Math.floor,E=String.fromCharCode;function O(e){throw new RangeError(b[e])}function T(e,n){for(var t=e.length,r=[];t--;)r[t]=n(e[t]);return r}function _(e,n){var t=e.split("@"),r="";return t.length>1&&(r=t[0]+"@",e=t[1]),r+T((e=e.replace(y,".")).split("."),n).join(".")}function j(e){for(var n,t,r=[],a=0,i=e.length;a<i;)(n=e.charCodeAt(a++))>=55296&&n<=56319&&a<i?56320==(64512&(t=e.charCodeAt(a++)))?r.push(((1023&n)<<10)+(1023&t)+65536):(r.push(n),a--):r.push(n);return r}function k(e){return T(e,function(e){var n="";return e>65535&&(n+=E((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=E(e)}).join("")}function N(e,n){return e+22+75*(e<26)-((0!=n)<<5)}function S(e,n,t){var r=0;for(e=t?w(e/f):e>>1,e+=w(e/n);e>x*p>>1;r+=c)e=w(e/x);return w(r+(x+1)*e/(e+l))}function I(e){var n,t,r,a,i,o,l,f,v,g,y,b=[],x=e.length,E=0,T=m,_=d;for((t=e.lastIndexOf(h))<0&&(t=0),r=0;r<t;++r)e.charCodeAt(r)>=128&&O("not-basic"),b.push(e.charCodeAt(r));for(a=t>0?t+1:0;a<x;){for(i=E,o=1,l=c;a>=x&&O("invalid-input"),((f=(y=e.charCodeAt(a++))-48<10?y-22:y-65<26?y-65:y-97<26?y-97:c)>=c||f>w((s-E)/o))&&O("overflow"),E+=f*o,!(f<(v=l<=_?u:l>=_+p?p:l-_));l+=c)o>w(s/(g=c-v))&&O("overflow"),o*=g;_=S(E-i,n=b.length+1,0==i),w(E/n)>s-T&&O("overflow"),T+=w(E/n),E%=n,b.splice(E++,0,T)}return k(b)}function A(e){var n,t,r,a,i,o,l,f,v,g,y,b,x,T,_,k=[];for(b=(e=j(e)).length,n=m,t=0,i=d,o=0;o<b;++o)(y=e[o])<128&&k.push(E(y));for(r=a=k.length,a&&k.push(h);r<b;){for(l=s,o=0;o<b;++o)(y=e[o])>=n&&y<l&&(l=y);for(l-n>w((s-t)/(x=r+1))&&O("overflow"),t+=(l-n)*x,n=l,o=0;o<b;++o)if((y=e[o])<n&&++t>s&&O("overflow"),y==n){for(f=t,v=c;!(f<(g=v<=i?u:v>=i+p?p:v-i));v+=c)_=f-g,T=c-g,k.push(E(N(g+_%T,0))),f=w(_/T);k.push(E(N(f,0))),i=S(t,x,r==a),t=0,++r}++t,++n}return k.join("")}o={version:"1.3.2",ucs2:{decode:j,encode:k},decode:I,encode:A,toASCII:function(e){return _(e,function(e){return g.test(e)?"xn--"+A(e):e})},toUnicode:function(e){return _(e,function(e){return v.test(e)?I(e.slice(4).toLowerCase()):e})}},void 0===(r=function(){return o}.call(n,t,n,e))||(e.exports=r)}()}).call(this,t(143)(e))},function(e,n,t){function r(e){var t;function r(){if(r.enabled){var e=r,a=+new Date,i=a-(t||a);e.diff=i,e.prev=t,e.curr=a,t=a;for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];o[0]=n.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(t,r){if("%%"===t)return t;c++;var a=n.formatters[r];if("function"==typeof a){var i=o[c];t=a.call(e,i),o.splice(c,1),c--}return t}),n.formatArgs.call(e,o),(r.log||n.log||console.log.bind(console)).apply(e,o)}}return r.namespace=e,r.enabled=n.enabled(e),r.useColors=n.useColors(),r.color=function(e){var t,r=0;for(t in e)r=(r<<5)-r+e.charCodeAt(t),r|=0;return n.colors[Math.abs(r)%n.colors.length]}(e),r.destroy=a,"function"==typeof n.init&&n.init(r),n.instances.push(r),r}function a(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}(n=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){var t;n.save(e),n.names=[],n.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),a=r.length;for(t=0;t<a;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){var i=n.instances[t];i.enabled=n.enabled(i.namespace)}},n.enabled=function(e){if("*"===e[e.length-1])return!0;var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=t(81),n.instances=[],n.names=[],n.skips=[],n.formatters={}},function(e,n,t){"undefined"==typeof process||"renderer"===process.type?e.exports=t(152):e.exports=t(151)},function(e,n,t){e.exports=t(156)().Promise},function(e,n){e.exports=require("crypto")},function(e,n,t){try{var r=t(28);if("function"!=typeof r.inherits)throw"";e.exports=r.inherits}catch(n){e.exports=t(178)}},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(41).EventEmitter;function a(e,n,t){Object.defineProperty(e,n,{configurable:!0,enumerable:!0,get:function(){var r=t();return Object.defineProperty(e,n,{configurable:!0,enumerable:!0,value:r}),r}})}function i(e){return e.toString()}a(e.exports,"callSiteToString",function(){var e=Error.stackTraceLimit,n={},r=Error.prepareStackTrace;Error.prepareStackTrace=function(e,n){return n},Error.stackTraceLimit=2,Error.captureStackTrace(n);var a=n.stack.slice();return Error.prepareStackTrace=r,Error.stackTraceLimit=e,a[0].toString?i:t(181)}),a(e.exports,"eventListenerCount",function(){return r.listenerCount||t(180)})},function(e,n){e.exports=require("assert")},function(e,n){e.exports=function(e){return!!e&&"string"!=typeof e&&"function"!=typeof e.pipe&&!Buffer.isBuffer(e)}},function(e,n,t){"use strict";
/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,n){if(!1!==i(e))return a(n,null,e),e;return function(e,n){var t=e.__onFinished;t&&t.queue||(t=e.__onFinished=function(e){function n(t){if(e.__onFinished===n&&(e.__onFinished=null),n.queue){var r=n.queue;n.queue=null;for(var a=0;a<r.length;a++)r[a](t,e)}}return n.queue=[],n}(e),function(e,n){var t,a,i=!1;function o(e){t.cancel(),a.cancel(),i=!0,n(e)}function s(n){e.removeListener("socket",s),i||t===a&&(a=r([[n,"error","close"]],o))}t=a=r([[e,"end","finish"]],o),e.socket?s(e.socket):(e.on("socket",s),void 0===e.socket&&function(e,n){var t=e.assignSocket;"function"==typeof t&&(e.assignSocket=function(e){t.call(this,e),n(e)})}(e,s))}(e,t)),t.queue.push(n)}(e,n),e},e.exports.isFinished=i;var r=t(194),a="function"==typeof setImmediate?setImmediate:function(e){process.nextTick(e.bind.apply(e,arguments))};function i(e){var n=e.socket;return"boolean"==typeof e.finished?Boolean(e.finished||n&&!n.writable):"boolean"==typeof e.complete?Boolean(e.upgrade||!n||!n.readable||e.complete&&!e.readable):void 0}},function(e,n){e.exports=require("net")},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("tty")},function(e,n){var t=1e3,r=60*t,a=60*r,i=24*a,o=365.25*i;function s(e,n,t){if(!(e<n))return e<1.5*n?Math.floor(e/n)+" "+t:Math.ceil(e/n)+" "+t+"s"}e.exports=function(e,n){n=n||{};var c,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var n=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!n)return;var s=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*o;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*a;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===u&&!1===isNaN(e))return n.long?s(c=e,i,"day")||s(c,a,"hour")||s(c,r,"minute")||s(c,t,"second")||c+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=a)return Math.round(e/a)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=t)return Math.round(e/t)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,n,t){var r;function a(e){function t(){if(t.enabled){var e=t,a=+new Date,i=a-(r||a);e.diff=i,e.prev=r,e.curr=a,r=a;for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];o[0]=n.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(t,r){if("%%"===t)return t;c++;var a=n.formatters[r];if("function"==typeof a){var i=o[c];t=a.call(e,i),o.splice(c,1),c--}return t}),n.formatArgs.call(e,o),(t.log||n.log||console.log.bind(console)).apply(e,o)}}return t.namespace=e,t.enabled=n.enabled(e),t.useColors=n.useColors(),t.color=function(e){var t,r=0;for(t in e)r=(r<<5)-r+e.charCodeAt(t),r|=0;return n.colors[Math.abs(r)%n.colors.length]}(e),"function"==typeof n.init&&n.init(t),t}(n=e.exports=a.debug=a.default=a).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){n.save(e),n.names=[],n.skips=[];for(var t=("string"==typeof e?e:"").split(/[\s,]+/),r=t.length,a=0;a<r;a++)t[a]&&("-"===(e=t[a].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=t(81),n.names=[],n.skips=[],n.formatters={}},function(e,n,t){e.exports=t(90).Observable},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a={commentDescriptions:!0},i=t(34);function o(e,n){var t={};return n.forEach(function(n){t[n.name.value]={type:c(e,n.type),args:s(e,n.arguments),description:u(n,a)}}),t}function s(e,n){var t={};return n.forEach(function(n){var i=c(e,n.type);t[n.name.value]={type:i,defaultValue:r.valueFromAST(n.defaultValue,i),description:u(n,a)}}),t}function c(e,n){switch(n.kind){case r.Kind.LIST_TYPE:return new r.GraphQLList(c(e,n.type));case r.Kind.NON_NULL_TYPE:return new r.GraphQLNonNull(c(e,n.type));default:return e.getType(n.name.value)}}function u(e,n){if(e.description)return e.description.value;if(n&&n.commentDescriptions){var t=function(e){var n=e.loc;if(!n)return;var t=[],r=n.startToken.prev;for(;r&&"Comment"===r.kind&&r.next&&r.prev&&r.line+1===r.next.line&&r.line!==r.prev.line;){var a=String(r.value);t.push(a),r=r.prev}return t.reverse().join("\n")}(e);if(void 0!==t)return function(e){for(var n=e.split(/\r\n|[\n\r]/g),t=null,r=1;r<n.length;r++){var a=n[r],i=p(a);if(i<a.length&&(null===t||i<t)&&0===(t=i))break}if(t)for(var r=1;r<n.length;r++)n[r]=n[r].slice(t);for(;n.length>0&&l(n[0]);)n.shift();for(;n.length>0&&l(n[n.length-1]);)n.pop();return n.join("\n")}("\n"+t)}}function p(e){for(var n=0;n<e.length&&(" "===e[n]||"\t"===e[n]);)n++;return n}function l(e){return p(e)===e.length}n.default=function(e,n){switch(n.kind){case r.Kind.OBJECT_TYPE_DEFINITION:return function(e,n){return new r.GraphQLObjectType({name:n.name.value,fields:function(){return o(e,n.fields)},interfaces:function(){return n.interfaces.map(function(n){return e.getType(n.name.value)})},description:u(n,a)})}(e,n);case r.Kind.INTERFACE_TYPE_DEFINITION:return function(e,n){return new r.GraphQLInterfaceType({name:n.name.value,fields:function(){return o(e,n.fields)},description:u(n,a),resolveType:function(e,n,t){return i.default(e,t.schema)}})}(e,n);case r.Kind.ENUM_TYPE_DEFINITION:return function(e,n){var t={};return n.values.forEach(function(e){t[e.name.value]={description:u(e,a)}}),new r.GraphQLEnumType({name:n.name.value,values:t,description:u(n,a)})}(0,n);case r.Kind.UNION_TYPE_DEFINITION:return function(e,n){return new r.GraphQLUnionType({name:n.name.value,types:function(){return n.types.map(function(n){return c(e,n)})},description:u(n,a),resolveType:function(e,n,t){return i.default(e,t.schema)}})}(e,n);case r.Kind.SCALAR_TYPE_DEFINITION:return function(e,n){return new r.GraphQLScalarType({name:n.name.value,description:u(n,a),serialize:function(){return null},parseValue:function(){return!1},parseLiteral:function(){return!1}})}(0,n);case r.Kind.INPUT_OBJECT_TYPE_DEFINITION:return function(e,n){return new r.GraphQLInputObjectType({name:n.name.value,fields:function(){return s(e,n.fields)},description:u(n,a)})}(e,n);default:return null}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=t(34),i=t(33);function o(e){switch(e.kind){case r.Kind.STRING:case r.Kind.BOOLEAN:return e.value;case r.Kind.INT:case r.Kind.FLOAT:return parseFloat(e.value);case r.Kind.OBJECT:var n=Object.create(null);return e.fields.forEach(function(e){n[e.name.value]=o(e.value)}),n;case r.Kind.LIST:return e.values.map(o);default:return null}}function s(e,n){var t={};return Object.keys(e).forEach(function(r){var a=e[r];null!==n(a.type)&&(t[r]=function(e,n){return{type:n(e.type),args:function(e,n){var t={};return e.forEach(function(e){var r=function(e,n){return[e.name,{type:n(e.type),defaultValue:e.defaultValue,description:e.description}]}(e,n),a=r[0],i=r[1];t[a]=i}),t}(e.args,n),resolve:i.default,description:e.description,deprecationReason:e.deprecationReason,astNode:e.astNode}}(e[r],n))}),t}n.recreateType=function(e,n){if(e instanceof r.GraphQLObjectType){var t=e.getFields(),i=e.getInterfaces();return new r.GraphQLObjectType({name:e.name,description:e.description,astNode:e.astNode,fields:function(){return s(t,n)},interfaces:function(){return i.map(function(e){return n(e)})}})}if(e instanceof r.GraphQLInterfaceType){var c=e.getFields();return new r.GraphQLInterfaceType({name:e.name,description:e.description,astNode:e.astNode,fields:function(){return s(c,n)},resolveType:function(e,n,t){return a.default(e,t.schema)}})}if(e instanceof r.GraphQLUnionType)return new r.GraphQLUnionType({name:e.name,description:e.description,astNode:e.astNode,types:function(){return e.getTypes().map(function(e){return n(e)})},resolveType:function(e,n,t){return a.default(e,t.schema)}});if(e instanceof r.GraphQLInputObjectType)return new r.GraphQLInputObjectType({name:e.name,description:e.description,astNode:e.astNode,fields:function(){return function(e,n){var t={};return Object.keys(e).forEach(function(r){var a=e[r];null!==n(a.type)&&(t[r]=function(e,n){return{type:n(e.type),defaultValue:e.defaultValue,description:e.description,astNode:e.astNode}}(e[r],n))}),t}(e.getFields(),n)}});if(e instanceof r.GraphQLEnumType){var u={};return e.getValues().forEach(function(e){u[e.name]={value:e.name}}),new r.GraphQLEnumType({name:e.name,description:e.description,astNode:e.astNode,values:u})}if(e instanceof r.GraphQLScalarType)return e===r.GraphQLID||e===r.GraphQLString||e===r.GraphQLFloat||e===r.GraphQLBoolean||e===r.GraphQLInt?e:new r.GraphQLScalarType({name:e.name,description:e.description,astNode:e.astNode,serialize:function(e){return e},parseValue:function(e){return e},parseLiteral:function(e){return o(e)}});throw new Error("Invalid type "+e)},n.fieldMapToFieldConfigMap=s,n.createResolveType=function(e){var n=function(t){var a;return t instanceof r.GraphQLList?null===(a=n(t.ofType))?null:new r.GraphQLList(a):t instanceof r.GraphQLNonNull?null===(a=n(t.ofType))?null:new r.GraphQLNonNull(a):r.isNamedType(t)?e(r.getNamedType(t).name,t):t};return n}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=function(){function e(){this.types={},this.schemaByField={query:{},mutation:{},subscription:{}},this.fragmentReplacements={}}return e.prototype.getSchemaByField=function(e,n){return this.schemaByField[e][n]},e.prototype.getAllTypes=function(){var e=this;return Object.keys(this.types).map(function(n){return e.types[n]})},e.prototype.getType=function(e){if(!this.types[e])throw new Error("No such type: "+e);return this.types[e]},e.prototype.resolveType=function(e){return e instanceof r.GraphQLList?new r.GraphQLList(this.resolveType(e.ofType)):e instanceof r.GraphQLNonNull?new r.GraphQLNonNull(this.resolveType(e.ofType)):r.isNamedType(e)?this.getType(r.getNamedType(e).name):e},e.prototype.addSchema=function(e){var n=this,t=e.getQueryType();t&&Object.keys(t.getFields()).forEach(function(t){n.schemaByField.query[t]=e});var r=e.getMutationType();r&&Object.keys(r.getFields()).forEach(function(t){n.schemaByField.mutation[t]=e});var a=e.getSubscriptionType();a&&Object.keys(a.getFields()).forEach(function(t){n.schemaByField.subscription[t]=e})},e.prototype.addType=function(e,n,t){if(this.types[e]){if(!t)throw new Error("Type name conflict: "+e);n=t(this.types[e],n)}this.types[e]=n},e.prototype.addFragment=function(e,n,t){this.fragmentReplacements[e]||(this.fragmentReplacements[e]={}),this.fragmentReplacements[e][n]=function(e){for(var n=0,t=r.parse(e).definitions;n<t.length;n++){var a=t[n];if(a.kind===r.Kind.FRAGMENT_DEFINITION)return{kind:r.Kind.INLINE_FRAGMENT,typeCondition:a.typeCondition,selectionSet:a.selectionSet}}throw new Error("Could not parse fragment")}(t)},e}();n.default=a},function(e,n,t){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e};Object.defineProperty(n,"__esModule",{value:!0});var a=t(10),i=t(86),o=t(49),s=t(53),c=t(27),u=t(85),p=t(48),l=t(84),f={commentDescriptions:!0};function d(e,n){return e}function m(e,n,t){return function(r,a,i,o){return e.delegate(n,t,a,i,o)}}n.default=function(e){var n=e.schemas,t=e.onTypeConflict,h=e.resolvers;t||(t=d);var v={},g={},y={},b=new i.default,x=u.createResolveType(function(e){return b.getType(e)}),w=function(e){return{delegate:function(n,t,r,a,i){var o=e.getSchemaByField(n,t);if(!o)throw new Error("Cannot find subschema for root field "+n+"."+t);var s=e.fragmentReplacements;return p.default(o,s,n,t,r,a,i)}}}(b),E=[],O=[],T=[],_={};n.forEach(function(e){if(e instanceof a.GraphQLSchema)E.push(e);else if("string"==typeof e){var n=a.parse(e);try{var t=a.buildASTSchema(n,f);t.getQueryType()&&E.push(t)}catch(e){O.push(n)}(n=c.extractExtensionDefinitions(n)).definitions.length>0&&T.push(n)}}),E.forEach(function(e){b.addSchema(e);var n=e.getQueryType(),i=e.getMutationType(),o=e.getSubscriptionType(),s=e.getTypeMap();Object.keys(s).forEach(function(e){var r=s[e];if(a.isNamedType(r)&&"__"!==a.getNamedType(r).name.slice(0,2)&&r!==n&&r!==i&&r!==o){var c=u.recreateType(r,x);b.addType(c.name,c,t)}}),Object.keys(n.getFields()).forEach(function(e){_.Query||(_.Query={}),_.Query[e]=m(w,"query",e)}),v=r({},v,n.getFields()),i&&(_.Mutation||(_.Mutation={}),Object.keys(i.getFields()).forEach(function(e){_.Mutation[e]=m(w,"mutation",e)}),g=r({},g,i.getFields())),o&&(_.Subscription||(_.Subscription={}),Object.keys(o.getFields()).forEach(function(e){_.Subscription[e]={subscribe:m(w,"subscription",e)}}),y=r({},y,o.getFields()))}),O.forEach(function(e){e.definitions.forEach(function(e){var n=l.default(b,e);n&&b.addType(n.name,n,t)})});var j={};h&&(j="function"==typeof h?h(w):Array.isArray(h)?h.map(function(e){return"function"==typeof e?e(w):e}).reduce(s.default,{}):r({},h)),Object.keys(j).forEach(function(e){var n=j[e];n instanceof a.GraphQLScalarType||Object.keys(n).forEach(function(t){var r=n[t];r.fragment&&b.addFragment(e,t,r.fragment)})}),_=s.default(_,j);var k,N,S=new a.GraphQLObjectType({name:"Query",fields:function(){return u.fieldMapToFieldConfigMap(v,x)}});o.default(g)||(k=new a.GraphQLObjectType({name:"Mutation",fields:function(){return u.fieldMapToFieldConfigMap(g,x)}})),o.default(y)||(N=new a.GraphQLObjectType({name:"Subscription",fields:function(){return u.fieldMapToFieldConfigMap(y,x)}})),b.addType("Query",S),b.addType("Mutation",k),b.addType("Subscription",N);var I,A,L=new a.GraphQLSchema({query:S,mutation:k,subscription:N,types:b.getAllTypes()});return T.forEach(function(e){L=a.extendSchema(L,e,f)}),c.addResolveFunctionsToSchema(L,_),I=function(e){if(e.resolve){var n=e.resolve;e.resolve=function(e,t,a,i){var o=r({},i,{mergeInfo:w});return n(e,t,a,o)}}},A=L.getTypeMap(),Object.keys(A).forEach(function(e){var n=A[e];if(!a.getNamedType(n).name.startsWith("__")&&n instanceof a.GraphQLObjectType){var t=n.getFields();Object.keys(t).forEach(function(n){var r=t[n];I(r,e,n)})}}),L}},function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),o=t(50),s=i.parse(i.introspectionQuery);n.default=function(e,n){return r(this,void 0,void 0,function(){var t;return a(this,function(r){switch(r.label){case 0:return e.request&&(e=o.default(e)),[4,e({query:s,context:n})];case 1:if((t=r.sent()).errors&&t.errors.length||!t.data.__schema)throw t.errors;return[2,i.buildClientSchema(t.data)]}})})}},function(e,n,t){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},a=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},i=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var o=t(12);n.observableToAsyncIterable=function(e){var n,t=[],s=[],c=!0,u=e.subscribe({next:function(e){var n;n=e.data,0!==t.length?t.shift()({value:n,done:!1}):s.push({value:n})},error:function(e){var n;n=e,0!==t.length?t.shift()({value:{errors:[n]},done:!1}):s.push({value:{errors:[n]}})}}),p=function(){c&&(c=!1,u.unsubscribe(),t.forEach(function(e){return e({value:void 0,done:!0})}),t.length=0,s.length=0)};return(n={next:function(){return a(this,void 0,void 0,function(){return i(this,function(e){return[2,c?new Promise(function(e){if(0!==s.length){var n=s.shift();e(r({},n,{done:!1}))}else t.push(e)}):this.return()]})})},return:function(){return p(),Promise.resolve({value:void 0,done:!0})},throw:function(e){return p(),Promise.reject(e)}})[o.$$asyncIterator]=function(){return this},n}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function(){return"function"==typeof Symbol},o=function(e){return i()&&Boolean(Symbol[e])},s=function(e){return o(e)?Symbol[e]:"@@"+e};function c(e,n){var t=e[n];if(null!=t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return t}}function u(e){var n=e.constructor;return void 0!==n&&null===(n=n[s("species")])&&(n=void 0),void 0!==n?n:b}function p(e){return e instanceof b}function l(e){l.log?l.log(e):setTimeout(function(){throw e})}function f(e){Promise.resolve().then(function(){try{e()}catch(e){l(e)}})}function d(e){var n=e._cleanup;if(void 0!==n&&(e._cleanup=void 0,n))try{if("function"==typeof n)n();else{var t=c(n,"unsubscribe");t&&t.call(n)}}catch(e){l(e)}}function m(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function h(e,n,t){e._state="running";var r=e._observer;try{var a=c(r,n);switch(n){case"next":a&&a.call(r,t);break;case"error":if(m(e),!a)throw t;a.call(r,t);break;case"complete":m(e),a&&a.call(r)}}catch(e){l(e)}"closed"===e._state?d(e):"running"===e._state&&(e._state="ready")}function v(e,n,t){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:n,value:t}],void f(function(){return function(e){var n=e._queue;if(n){e._queue=void 0,e._state="ready";for(var t=0;t<n.length&&(h(e,n[t].type,n[t].value),"closed"!==e._state);++t);}}(e)})):void h(e,n,t);e._queue.push({type:n,value:t})}}i()&&!o("observable")&&(Symbol.observable=Symbol("observable"));var g=function(){function e(n,t){a(this,e),this._cleanup=void 0,this._observer=n,this._queue=void 0,this._state="initializing";var r=new y(this);try{this._cleanup=t.call(void 0,r)}catch(e){r.error(e)}"initializing"===this._state&&(this._state="ready")}return r(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(m(this),d(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),y=function(){function e(n){a(this,e),this._subscription=n}return r(e,[{key:"next",value:function(e){v(this._subscription,"next",e)}},{key:"error",value:function(e){v(this._subscription,"error",e)}},{key:"complete",value:function(){v(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),b=n.Observable=function(){function e(n){if(a(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof n)throw new TypeError("Observable initializer must be a function");this._subscriber=n}return r(e,[{key:"subscribe",value:function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new g(e,this._subscriber)}},{key:"forEach",value:function(e){var n=this;return new Promise(function(t,r){if("function"==typeof e)var a=n.subscribe({next:function(n){try{e(n,i)}catch(e){r(e),a.unsubscribe()}},error:r,complete:t});else r(new TypeError(e+" is not a function"));function i(){a.unsubscribe(),t()}})}},{key:"map",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(u(this))(function(t){return n.subscribe({next:function(n){try{n=e(n)}catch(e){return t.error(e)}t.next(n)},error:function(e){t.error(e)},complete:function(){t.complete()}})})}},{key:"filter",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(u(this))(function(t){return n.subscribe({next:function(n){try{if(!e(n))return}catch(e){return t.error(e)}t.next(n)},error:function(e){t.error(e)},complete:function(){t.complete()}})})}},{key:"reduce",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var t=u(this),r=arguments.length>1,a=!1,i=arguments[1];return new t(function(t){return n.subscribe({next:function(n){var o=!a;if(a=!0,!o||r)try{i=e(i,n)}catch(e){return t.error(e)}else i=n},error:function(e){t.error(e)},complete:function(){if(!a&&!r)return t.error(new TypeError("Cannot reduce an empty sequence"));t.next(i),t.complete()}})})}},{key:"concat",value:function(){for(var e=this,n=arguments.length,t=Array(n),r=0;r<n;r++)t[r]=arguments[r];var a=u(this);return new a(function(n){var r=void 0;return function e(i){r=i.subscribe({next:function(e){n.next(e)},error:function(e){n.error(e)},complete:function(){0===t.length?(r=void 0,n.complete()):e(a.from(t.shift()))}})}(e),function(){r&&(r=void 0).unsubscribe()}})}},{key:"flatMap",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var t=u(this);return new t(function(r){var a=[],i=n.subscribe({next:function(n){if(e)try{n=e(n)}catch(e){return r.error(e)}var i=t.from(n).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=a.indexOf(i);e>=0&&a.splice(e,1),o()}});a.push(i)},error:function(e){r.error(e)},complete:function(){o()}});function o(){i.closed&&0===a.length&&r.complete()}return function(){a.forEach(function(e){return e.unsubscribe()}),i.unsubscribe()}})}},{key:s("observable"),value:function(){return this}}],[{key:"from",value:function(n){var t="function"==typeof this?this:e;if(null==n)throw new TypeError(n+" is not an object");var r=c(n,s("observable"));if(r){var a=r.call(n);if(Object(a)!==a)throw new TypeError(a+" is not an object");return p(a)&&a.constructor===t?a:new t(function(e){return a.subscribe(e)})}if(o("iterator")&&(r=c(n,s("iterator"))))return new t(function(e){f(function(){if(!e.closed){var t=!0,a=!1,i=void 0;try{for(var o,s=r.call(n)[Symbol.iterator]();!(t=(o=s.next()).done);t=!0){var c=o.value;if(e.next(c),e.closed)return}}catch(e){a=!0,i=e}finally{try{!t&&s.return&&s.return()}finally{if(a)throw i}}e.complete()}})});if(Array.isArray(n))return new t(function(e){f(function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}})});throw new TypeError(n+" is not observable")}},{key:"of",value:function(){for(var n=arguments.length,t=Array(n),r=0;r<n;r++)t[r]=arguments[r];return new("function"==typeof this?this:e)(function(e){f(function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}})})}},{key:s("species"),get:function(){return this}}]),e}();i()&&Object.defineProperty(b,Symbol("extensions"),{value:{symbol:s("observable"),hostReportError:l},configurabe:!0})},function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),o=t(50),s=t(49),c=t(27),u=t(34),p=t(33),l=t(32),f=t(89);function d(e){var n=this;return function(t,o,s,c){return r(n,void 0,void 0,function(){var n,t,r;return a(this,function(a){switch(a.label){case 0:return n=Object.keys(c.fragments).map(function(e){return c.fragments[e]}),t={kind:i.Kind.DOCUMENT,definitions:[c.operation].concat(n)},[4,e({query:t,variables:c.variableValues,context:{graphqlContext:s}})];case 1:return r=a.sent(),[2,l.checkResultAndHandleErrors(r,c)]}})})}}function m(e){switch(e.kind){case i.Kind.STRING:case i.Kind.BOOLEAN:return e.value;case i.Kind.INT:case i.Kind.FLOAT:return parseFloat(e.value);case i.Kind.OBJECT:var n=Object.create(null);return e.fields.forEach(function(e){n[e.name.value]=m(e.value)}),n;case i.Kind.LIST:return e.values.map(m);default:return null}}n.default=function(e){var n,t=e.schema,r=e.link,a=e.fetcher;!a&&r&&(a=o.default(r)),"string"==typeof t?(n=t,t=i.buildSchema(n)):n=i.printSchema(t);var l={},h=t.getQueryType(),v=h.getFields();Object.keys(v).forEach(function(e){l[e]=d(a)});var g={},y=t.getMutationType();if(y){var b=y.getFields();Object.keys(b).forEach(function(e){g[e]=d(a)})}var x={},w=t.getSubscriptionType();if(w){var E=w.getFields();Object.keys(E).forEach(function(e){x[e]={subscribe:function(e,n){return function(e,t,r,a){var s=Object.keys(a.fragments).map(function(e){return a.fragments[e]}),c={kind:i.Kind.DOCUMENT,definitions:[a.operation].concat(s)},u={query:c,variables:a.variableValues,context:{graphqlContext:r}},p=o.execute(n,u);return f.observableToAsyncIterable(p)}}(0,r)}})}var O=((T={})[h.name]=l,T);s.default(g)||(O[y.name]=g),s.default(x)||(O[w.name]=x);for(var T,_=t.getTypeMap(),j=function(e){if(e instanceof i.GraphQLInterfaceType||e instanceof i.GraphQLUnionType)O[e.name]={__resolveType:function(e,n,t){return u.default(e,t.schema)}};else if(e instanceof i.GraphQLScalarType)e!==i.GraphQLID&&e!==i.GraphQLString&&e!==i.GraphQLFloat&&e!==i.GraphQLBoolean&&e!==i.GraphQLInt&&(O[e.name]=(r=(t=e).name,a=t.description,new i.GraphQLScalarType({name:r,description:a,serialize:function(e){return e},parseValue:function(e){return e},parseLiteral:function(e){return m(e)}})));else if(e instanceof i.GraphQLObjectType&&"__"!==e.name.slice(0,2)&&e!==h&&e!==y&&e!==w){var n={};Object.keys(e.getFields()).forEach(function(e){n[e]=p.default}),O[e.name]=n}var t,r,a},k=0,N=Object.keys(_).map(function(e){return _[e]});k<N.length;k++)j(N[k]);return c.makeExecutableSchema({typeDefs:n,resolvers:O})}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(91);n.makeRemoteExecutableSchema=r.default;var a=t(88);n.introspectSchema=a.default;var i=t(87);n.mergeSchemas=i.default;var o=t(48);n.delegateToSchema=o.default,n.createDocument=o.createDocument;var s=t(33);n.defaultMergedResolver=s.default},function(e,n,t){var r=t(52),a=t(51);e.exports=function(e,n,t){var i=n&&t||0;"string"==typeof e&&(n="binary"===e?new Array(16):null,e=null);var o=(e=e||{}).random||(e.rng||r)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n)for(var s=0;s<16;++s)n[i+s]=o[s];return n||a(o)}},function(e,n,t){var r,a,i=t(52),o=t(51),s=0,c=0;e.exports=function(e,n,t){var u=n&&t||0,p=n||[],l=(e=e||{}).node||r,f=void 0!==e.clockseq?e.clockseq:a;if(null==l||null==f){var d=i();null==l&&(l=r=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==f&&(f=a=16383&(d[6]<<8|d[7]))}var m=void 0!==e.msecs?e.msecs:(new Date).getTime(),h=void 0!==e.nsecs?e.nsecs:c+1,v=m-s+(h-c)/1e4;if(v<0&&void 0===e.clockseq&&(f=f+1&16383),(v<0||m>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=m,c=h,a=f;var g=(1e4*(268435455&(m+=122192928e5))+h)%4294967296;p[u++]=g>>>24&255,p[u++]=g>>>16&255,p[u++]=g>>>8&255,p[u++]=255&g;var y=m/4294967296*1e4&268435455;p[u++]=y>>>8&255,p[u++]=255&y,p[u++]=y>>>24&15|16,p[u++]=y>>>16&255,p[u++]=f>>>8|128,p[u++]=255&f;for(var b=0;b<6;++b)p[u+b]=l[b];return n||o(p)}},function(e,n,t){var r=t(94),a=t(93),i=a;i.v1=r,i.v4=a,e.exports=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=t(10),i=t(95),o=t(27);function s(e){var n=e.schema,t=e.mocks,a=void 0===t?{}:t,s=e.preserveResolvers,u=void 0!==s&&s;function p(e){return e===Object(e)&&!Array.isArray(e)}if(!n)throw new Error("Must provide schema to mock");if(!(n instanceof r.GraphQLSchema))throw new Error('Value at "schema" must be of type GraphQLSchema');if(!p(a))throw new Error("mocks must be of type Object");var l=new Map;Object.keys(a).forEach(function(e){l.set(e,a[e])}),l.forEach(function(e,n){if("function"!=typeof e)throw new Error("mockFunctionMap["+n+"] must be a function")});var f=new Map;function d(e,n){Object.getOwnPropertyNames(n).forEach(function(t){Object.getOwnPropertyDescriptor(e,t)||Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}function m(e){return e[Math.floor(Math.random()*e.length)]}function h(e,n){return Array.isArray(n)?n.map(function(n){return h(e,n)}):p(n)?(t=e(),r=n,Object.assign(t,r)):n;var t,r}function v(e){var n=r.getNullableType(e),t=r.getNamedType(n),a=function(e){return e instanceof r.GraphQLInterfaceType||e instanceof r.GraphQLUnionType?e.resolveType:void 0}(t);u&&a&&a.length||(t instanceof r.GraphQLUnionType||t instanceof r.GraphQLInterfaceType)&&(t.resolveType=function(e,n,t){return t.schema.getType(e.__typename)})}f.set("Int",function(){return Math.round(200*Math.random())-100}),f.set("Float",function(){return 200*Math.random()-100}),f.set("String",function(){return"Hello World"}),f.set("Boolean",function(){return Math.random()>.5}),f.set("ID",function(){return i.v4()});var g=function(e,t,a){return function(t,i,o,s){var u=r.getNullableType(e),p=r.getNamedType(u);if(t&&void 0!==t[a]){var d=void 0;return"function"==typeof t[a]?(d=t[a](t,i,o,s))instanceof c&&(d=d.mock(t,i,o,s,u,g)):d=t[a],l.has(p.name)&&(d=h(l.get(p.name).bind(null,t,i,o,s),d)),d}if(u instanceof r.GraphQLList)return[g(u.ofType)(t,i,o,s),g(u.ofType)(t,i,o,s)];if(l.has(u.name)&&!(u instanceof r.GraphQLUnionType||u instanceof r.GraphQLInterfaceType))return l.get(u.name)(t,i,o,s);if(u instanceof r.GraphQLObjectType)return{};if(u instanceof r.GraphQLUnionType||u instanceof r.GraphQLInterfaceType){var v=void 0;if(l.has(u.name)){var y=l.get(u.name)(t,i,o,s);if(!y||!y.__typename)return Error('Please return a __typename in "'+u.name+'"');v=n.getType(y.__typename)}else{v=m(n.getPossibleTypes(u))}return Object.assign({__typename:v},g(v)(t,i,o,s))}return u instanceof r.GraphQLEnumType?m(u.getValues()).value:f.has(u.name)?f.get(u.name)(t,i,o,s):Error('No mock defined for type "'+u.name+'"')}};o.forEachField(n,function(e,t,r){var a;v(e.type);var i=!!n.getQueryType()&&n.getQueryType().name===t,o=!!n.getMutationType()&&n.getMutationType().name===t;if((i||o)&&l.has(t)){var s=l.get(t);s(void 0,{},{},{})[r]&&(a=function(n,a,i,o){var c=n||{};return c[r]=s(n,a,i,o)[r],g(e.type,t,r)(c,a,i,o)})}if(a||(a=g(e.type,t,r)),u&&e.resolve){var c=e.resolve;e.resolve=function(e,n,t,r){return Promise.all([a(e,n,t,r),c(e,n,t,r)]).then(function(e){var n=e[0],t=e[1];if(n instanceof Error){if(void 0===t)throw n;return t}return t instanceof Date&&n instanceof Date?void 0!==t?t:n:p(n)&&p(t)?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return n.forEach(function(n){for(var t=n;t;)d(e,t),t=Object.getPrototypeOf(t)}),e}(Object.create(Object.getPrototypeOf(t)),t,n):void 0!==t?t:n})}}else e.resolve=a})}n.mockServer=function(e,n,t){var i;return void 0===t&&(t=!1),s({schema:i=e instanceof r.GraphQLSchema?e:o.buildSchemaFromTypeDefinitions(e),mocks:n,preserveResolvers:t}),{query:function(e,n){return a.graphql(i,e,{},{},n)}}},n.addMockFunctionsToSchema=s;var c=function(){function e(e,n){if(this.len=e,void 0!==n){if("function"!=typeof n)throw new Error("Second argument to MockList must be a function or undefined");this.wrappedFunction=n}}return e.prototype.mock=function(n,t,a,i,o,s){var c;c=Array.isArray(this.len)?new Array(this.randint(this.len[0],this.len[1])):new Array(this.len);for(var u=0;u<c.length;u++)if("function"==typeof this.wrappedFunction){var p=this.wrappedFunction(n,t,a,i);if(p instanceof e){var l=r.getNullableType(o.ofType);c[u]=p.mock(n,t,a,i,l,s)}else c[u]=p}else c[u]=s(o.ofType)(n,t,a,i);return c},e.prototype.randint=function(e,n){return Math.floor(Math.random()*(n-e+1)+e)},e}();n.MockList=c},function(e,n,t){"use strict";function r(e,n,t,r,a){var i={};return function(){var o=(((new Error).stack||"").match(/(?:\s+at\s.+){2}\s+at\s(.+)/)||[void 0,""])[1];if(!((o=/\)$/.test(o)?o.match(/[^(]+(?=\)$)/)[0]:o.trim())in i)){var s;switch(i[o]=!0,e){case"class":s="Class";break;case"property":s="Property";break;case"method":s="Method";break;case"function":s="Function"}s+=" `"+n+"` has been deprecated",r&&(s+=" since version "+r),t&&(s+=", use `"+t+"` instead"),s+=".",o&&(s+="\n    at "+o),a&&(s+="\nCheck out "+a+" for more information."),console.warn(s)}}}function a(e,t,a,i,o,s){var c=(n.options.getWarner||r)(e,t,i,o,s),u={enumerable:(a=a||{writable:!0,enumerable:!1,configurable:!0}).enumerable,configurable:a.configurable};if(a.get||a.set)a.get&&(u.get=function(){return c(),a.get.call(this)}),a.set&&(u.set=function(e){return c(),a.set.call(this,e)});else{var p=a.value;u.get=function(){return c(),p},a.writable&&(u.set=function(e){c(),p=e})}return u}function i(e,t,a,i,o){for(var s=t.name,c=(n.options.getWarner||r)(e,s,a,i,o),u=function(){return c(),t.apply(this,arguments)},p=0,l=Object.getOwnPropertyNames(t);p<l.length;p++){var f=l[p],d=Object.getOwnPropertyDescriptor(t,f);d.writable?u[f]=t[f]:d.configurable&&Object.defineProperty(u,f,d)}return u}function o(){for(var e=[],n=0;n<arguments.length;n++)e[n-0]=arguments[n];var t=e[e.length-1];t="function"==typeof t?e.pop():void 0;var r,o,s,c=e[0];return"string"==typeof c?(r=c,o=e[1],s=e[2]):c&&(r=c.alternative,o=c.version,s=c.url),t?i("function",t,r,o,s):function(e,n,t){if("string"==typeof n)return a(t&&"function"==typeof t.value?"method":"property",n,t,r,o,s);if("function"==typeof e){for(var c=i("class",e,r,o,s),u=e.name,p=0,l=Object.getOwnPropertyNames(c);p<l.length;p++){var f=l[p],d=Object.getOwnPropertyDescriptor(c,f);(d=a("class",u,d,r,o,s)).writable?c[f]=e[f]:d.configurable&&Object.defineProperty(c,f,d)}return c}}}n.options={getWarner:void 0},n.deprecated=o,Object.defineProperty(n,"__esModule",{value:!0}),n.default=o},function(e,n,t){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(t(27)),r(t(96)),r(t(92)),r(t(54))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[{id:1,label:"nothing",type:"basic"},{id:2,label:"here",type:"basic"},{id:3,label:"here",type:"advanced"}],a={Query:{hello:function(e,n,t){return"Hello world!"},ping:function(e,n,t){return"Answering "+n.message},tags:function(e,n,t){var a=n.type;return r.filter(function(e){return e.type===a})},lastTag:function(e,n,t){return r[r.length-1]}},Mutation:{addTag:async function(e,n,t){var a=n.type,i=n.label;console.log("adding "+a+" tag '"+i+"'");var o={id:r[r.length-1].id+1,label:i,type:a};return r.push(i),o},startStreaming:async function(e,n,t){n.streamKey;return console.log("should start streaming"),"OK"}}},i=(0,t(98).makeExecutableSchema)({typeDefs:["\n  type Tag {\n    id: Int\n    label: String\n    type: String\n  }\n  type TagsPage {\n    tags: [Tag]\n    hasMore: Boolean\n  }\n  type Query {\n    hello: String\n    ping(message: String!): String\n    tags(type: String!): [Tag]\n    tagsPage(page: Int!, size: Int!): TagsPage\n    randomTag: Tag\n    lastTag: Tag\n  }\n  type Mutation {\n    addTag(type: String!, label: String!): Tag\n    startStreaming(streamKey: String!): String\n  }\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n"],resolvers:a});n.default=i},function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=t(55);n.resolveGraphiQLString=function(e,n){void 0===e&&(e={});for(var t=[],o=2;o<arguments.length;o++)t[o-2]=arguments[o];return r(this,void 0,void 0,function(){var o,s,c;return a(this,function(u){switch(u.label){case 0:return o=function(e){var n=e||{};return{query:n.query||"",variables:n.variables,operationName:n.operationName||""}}(e),[4,function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return r(this,void 0,void 0,function(){var t;return a(this,function(r){switch(r.label){case 0:if("function"!=typeof e)return[3,5];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,e.apply(void 0,n)];case 2:return[2,r.sent()];case 3:throw t=r.sent(),new Error("Invalid options provided for GraphiQL: "+t.message);case 4:return[3,6];case 5:return[2,e];case 6:return[2]}})})}.apply(void 0,[n].concat(t))];case 1:return s=u.sent(),c=function(e,n){return{endpointURL:n.endpointURL,subscriptionsEndpoint:n.subscriptionsEndpoint,query:e.query||n.query,variables:e.variables&&JSON.parse(e.variables)||n.variables,operationName:e.operationName||n.operationName,passHeader:n.passHeader,editorTheme:n.editorTheme,websocketConnectionParams:n.websocketConnectionParams}}(o,s),[2,i.renderGraphiQL(c)]}})})}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(55);n.renderGraphiQL=r.renderGraphiQL;var a=t(100);n.resolveGraphiQLString=a.resolveGraphiQLString},function(e,n,t){"use strict";var r,a=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}c((r=r.apply(e,n||[])).next())})},o=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var s=t(10),c=t(57),u=t(56),p=function(e){function n(n,t,r,a){void 0===r&&(r=!1);var i=e.call(this,t)||this;return i.name="HttpQueryError",i.statusCode=n,i.isGraphQLError=r,i.headers=a,i}return a(n,e),n}(Error);n.HttpQueryError=p,n.runHttpQuery=function(e,n){return i(this,void 0,void 0,function(){var t,r,a,i,l,f,d,m,h;return o(this,function(o){switch(o.label){case 0:t=!1,o.label=1;case 1:return o.trys.push([1,3,,4]),[4,u.resolveGraphqlOptions.apply(void 0,[n.options].concat(e))];case 2:return r=o.sent(),[3,4];case 3:throw a=o.sent(),new p(500,a.message);case 4:switch(i=r.formatError||s.formatError,n.method){case"POST":if(!n.query||0===Object.keys(n.query).length)throw new p(500,"POST body missing. Did you forget use body-parser middleware?");l=n.query;break;case"GET":if(!n.query||0===Object.keys(n.query).length)throw new p(400,"GET query missing.");t=!0,l=n.query;break;default:throw new p(405,"Apollo Server supports only GET/POST requests.",!1,{Allow:"GET, POST"})}return f=!0,Array.isArray(l)||(f=!1,l=[l]),d=l.map(function(e){try{var n=e.query;if(t&&("string"==typeof n&&(n=s.parse(n)),!function(e,n){return"query"===s.getOperationAST(e,n).operation}(n,e.operationName)))throw new p(405,"GET supports only query operation",!1,{Allow:"POST"});var a=e.operationName,o=e.variables;if("string"==typeof o)try{o=JSON.parse(o)}catch(e){throw new p(400,"Variables are invalid JSON.")}var u=r.context||{};"function"==typeof u?u=u():f&&(u=Object.assign(Object.create(Object.getPrototypeOf(u)),u));var l={schema:r.schema,query:n,variables:o,context:u,rootValue:r.rootValue,operationName:a,logFunction:r.logFunction,validationRules:r.validationRules,formatError:i,formatResponse:r.formatResponse,fieldResolver:r.fieldResolver,debug:r.debug,tracing:r.tracing,cacheControl:r.cacheControl};return r.formatParams&&(l=r.formatParams(l)),c.runQuery(l)}catch(e){return"HttpQueryError"===e.name?Promise.reject(e):Promise.resolve({errors:[i(e)]})}}),[4,Promise.all(d)];case 5:if(m=o.sent(),!f){if((h=m[0]).errors&&void 0===h.data)throw new p(400,JSON.stringify(h),!0,{"Content-Type":"application/json"});return[2,JSON.stringify(h)]}return[2,JSON.stringify(m)]}})})}},function(e,n,t){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e};Object.defineProperty(n,"__esModule",{value:!0});var a=t(10);!function(e){e.Public="PUBLIC",e.Private="PRIVATE"}(n.CacheScope||(n.CacheScope={}));var i=function(){function e(e){void 0===e&&(e={}),this.hints=new Map,this.defaultMaxAge=e.defaultMaxAge||0}return e.prototype.willResolveField=function(e,n,t,r){var i=this,c={},u=a.getNamedType(r.returnType);(u instanceof a.GraphQLObjectType||u instanceof a.GraphQLInterfaceType)&&u.astNode&&(c=s(c,o(u.astNode.directives)));var p=r.parentType;if(p instanceof a.GraphQLObjectType){var l=p.getFields()[r.fieldName];l.astNode&&(c=s(c,o(l.astNode.directives)))}u instanceof a.GraphQLObjectType&&void 0===c.maxAge&&(c.maxAge=this.defaultMaxAge),void 0===c.maxAge&&void 0===c.scope||this.addHint(r.path,c),r.cacheControl={setCacheHint:function(e){i.addHint(r.path,e)},cacheHint:c}},e.prototype.addHint=function(e,n){var t=this.hints.get(e);t?this.hints.set(e,s(t,n)):this.hints.set(e,n)},e.prototype.format=function(){return["cacheControl",{version:1,hints:Array.from(this.hints).map(function(e){var n=e[0],t=e[1];return r({path:a.responsePathAsArray(n)},t)})}]},e}();function o(e){if(e){var n=e.find(function(e){return"cacheControl"===e.name.value});if(n&&n.arguments){var t=n.arguments.find(function(e){return"maxAge"===e.name.value}),r=n.arguments.find(function(e){return"scope"===e.name.value});return{maxAge:t&&t.value&&"IntValue"===t.value.kind?parseInt(t.value.value):void 0,scope:r&&r.value&&"EnumValue"===r.value.kind?r.value.value:void 0}}}}function s(e,n){return n?{maxAge:n.maxAge||e.maxAge,scope:n.scope||e.scope}:e}n.CacheControlExtension=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=function(){function e(){this.resolverCalls=[]}return e.prototype.requestDidStart=function(){this.startWallTime=new Date,this.startHrTime=process.hrtime()},e.prototype.executionDidStart=function(){},e.prototype.willResolveField=function(e,n,t,r){var a=this,i={path:r.path,fieldName:r.fieldName,parentType:r.parentType,returnType:r.returnType,startOffset:process.hrtime(this.startHrTime)};return this.resolverCalls.push(i),function(){i.endOffset=process.hrtime(a.startHrTime)}},e.prototype.didResolveField=function(e,n,t,r){},e.prototype.requestDidEnd=function(){this.duration=process.hrtime(this.startHrTime),this.endWallTime=new Date},e.prototype.format=function(){if(void 0!==this.startWallTime&&void 0!==this.endWallTime&&void 0!==this.duration)return["tracing",{version:1,startTime:this.startWallTime.toISOString(),endTime:this.endWallTime.toISOString(),duration:i(this.duration),execution:{resolvers:this.resolverCalls.map(function(e){var n=i(e.startOffset),t=e.endOffset?i(e.endOffset)-n:0;return{path:r.responsePathAsArray(e.path),parentType:e.parentType.toString(),fieldName:e.fieldName,returnType:e.returnType.toString(),startOffset:n,duration:t}})}}]},e}();function i(e){return 1e9*e[0]+e[1]}n.TracingExtension=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(10),a=function(){return function(){}}();n.GraphQLExtension=a;var i=function(){function e(e){this.extensions=e.map(function(e){return"function"==typeof e?new e:e})}return e.prototype.requestDidStart=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.requestDidStart&&t.requestDidStart()}},e.prototype.parsingDidStart=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.parsingDidStart&&t.parsingDidStart()}},e.prototype.parsingDidEnd=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.parsingDidEnd&&t.parsingDidEnd()}},e.prototype.validationDidStart=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.validationDidStart&&t.validationDidStart()}},e.prototype.validationDidEnd=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.validationDidEnd&&t.validationDidEnd()}},e.prototype.executionDidStart=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.executionDidStart&&t.executionDidStart()}},e.prototype.willResolveField=function(e,n,t,r){var a=this.extensions.map(function(a){return a.willResolveField&&a.willResolveField(e,n,t,r)}).filter(function(e){return e});return function(e){for(var n=0,t=a;n<t.length;n++){(0,t[n])(e)}}},e.prototype.executionDidEnd=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.executionDidEnd&&t.executionDidEnd()}},e.prototype.requestDidEnd=function(){for(var e=0,n=this.extensions;e<n.length;e++){var t=n[e];t.requestDidEnd&&t.requestDidEnd()}},e.prototype.format=function(){return this.extensions.map(function(e){return e.format&&e.format()}).filter(function(e){return e}).reduce(function(e,n){var t,r=n[0],a=n[1];return Object.assign(e,((t={})[r]=a,t))},{})},e}();function o(e){var n=e.resolve;e.resolve=function(e,t,a,i){var o=a&&a._extensionStack,s=o&&o.willResolveField(e,t,a,i);try{var c=(n||r.defaultFieldResolver)(e,t,a,i);return function(e,n){if(null===e||void 0===e)n();else if("function"==typeof e.then)e.then(n,n);else if(Array.isArray(e)){var t=[];e.forEach(function(e){e&&"function"==typeof e.then&&t.push(e)}),t.length>0?Promise.all(t).then(n,n):n()}else n()}(c,function(){s&&s(c)}),c}catch(e){throw s&&s(),e}}}n.GraphQLExtensionStack=i,n.enableGraphQLExtensions=function(e){return e._extensionsEnabled?e:(e._extensionsEnabled=!0,function(e,n){var t=e.getTypeMap();Object.keys(t).forEach(function(e){var a=t[e];if(!r.getNamedType(a).name.startsWith("__")&&a instanceof r.GraphQLObjectType){var i=a.getFields();Object.keys(i).forEach(function(t){var r=i[t];n(r,e,t)})}})}(e,o),e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(57);n.runQuery=r.runQuery,n.LogStep=r.LogStep,n.LogAction=r.LogAction;var a=t(102);n.runHttpQuery=a.runHttpQuery,n.HttpQueryError=a.HttpQueryError;var i=t(56);n.resolveGraphqlOptions=i.resolveGraphqlOptions},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(106),a=t(101);n.graphqlKoa=function(e){if(!e)throw new Error("Apollo Server requires options.");if(arguments.length>1)throw new Error("Apollo Server expects exactly one argument, got "+arguments.length);return function(n){return r.runHttpQuery([n],{method:n.request.method,options:e,query:"POST"===n.request.method?n.request.body:n.request.query}).then(function(e){n.set("Content-Type","application/json"),n.body=e},function(e){if("HttpQueryError"!==e.name)throw e;e.headers&&Object.keys(e.headers).forEach(function(t){n.set(t,e.headers[t])}),n.status=e.statusCode,n.body=e.message})}},n.graphiqlKoa=function(e){return function(n){var t=n.request.query;return a.resolveGraphiQLString(t,e,n).then(function(e){n.set("Content-Type","text/html"),n.body=e},function(e){n.status=500,n.body=e.message})}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(107);n.graphqlKoa=r.graphqlKoa,n.graphiqlKoa=r.graphiqlKoa},function(e,n,t){"use strict";
/*!
 * copy-to - index.js
 * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
 * MIT Licensed
 */var r=Array.prototype.slice;function a(e,n){if(!(this instanceof a))return new a(e,n);this.src=e,this._withAccess=n}function i(e,n){return void 0===e[n]&&void 0===e.__lookupGetter__(n)&&void 0===e.__lookupSetter__(n)}e.exports=a,a.prototype.withAccess=function(e){return this._withAccess=!1!==e,this},a.prototype.pick=function(e){return Array.isArray(e)||(e=r.call(arguments)),e.length&&(this.keys=e),this},a.prototype.to=function(e){if(e=e||{},!this.src)return e;var n=this.keys||Object.keys(this.src);if(!this._withAccess){for(var t=0;t<n.length;t++)void 0===e[r=n[t]]&&(e[r]=this.src[r]);return e}for(t=0;t<n.length;t++){var r=n[t];if(i(e,r)){var a=this.src.__lookupGetter__(r),o=this.src.__lookupSetter__(r);a&&e.__defineGetter__(r,a),o&&e.__defineSetter__(r,o),a||o||(e[r]=this.src[r])}}return e},a.prototype.toCover=function(e){for(var n=this.keys||Object.keys(this.src),t=0;t<n.length;t++){var r=n[t];delete e[r];var a=this.src.__lookupGetter__(r),i=this.src.__lookupSetter__(r);a&&e.__defineGetter__(r,a),i&&e.__defineSetter__(r,i),a||i||(e[r]=this.src[r])}},a.prototype.override=a.prototype.toCover,a.prototype.and=function(e){var n={};return this.to(n),this.src=e,this.to(n),this.src=n,this}},function(e,n,t){"use strict";var r=t(60),a=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:r.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},o=function(e,n,t){if(e){var r=t.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,o=/(\[[^[\]]*])/.exec(r),s=o?r.slice(0,o.index):r,c=[];if(s){if(!t.plainObjects&&a.call(Object.prototype,s)&&!t.allowPrototypes)return;c.push(s)}for(var u=0;null!==(o=i.exec(r))&&u<t.depth;){if(u+=1,!t.plainObjects&&a.call(Object.prototype,o[1].slice(1,-1))&&!t.allowPrototypes)return;c.push(o[1])}return o&&c.push("["+r.slice(o.index)+"]"),function(e,n,t){for(var r=n,a=e.length-1;a>=0;--a){var i,o=e[a];if("[]"===o)i=(i=[]).concat(r);else{i=t.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,c=parseInt(s,10);!isNaN(c)&&o!==s&&String(c)===s&&c>=0&&t.parseArrays&&c<=t.arrayLimit?(i=[])[c]=r:i[s]=r}r=i}return r}(c,n,t)}};e.exports=function(e,n){var t=n?r.assign({},n):{};if(null!==t.decoder&&void 0!==t.decoder&&"function"!=typeof t.decoder)throw new TypeError("Decoder has to be a function.");if(t.ignoreQueryPrefix=!0===t.ignoreQueryPrefix,t.delimiter="string"==typeof t.delimiter||r.isRegExp(t.delimiter)?t.delimiter:i.delimiter,t.depth="number"==typeof t.depth?t.depth:i.depth,t.arrayLimit="number"==typeof t.arrayLimit?t.arrayLimit:i.arrayLimit,t.parseArrays=!1!==t.parseArrays,t.decoder="function"==typeof t.decoder?t.decoder:i.decoder,t.allowDots="boolean"==typeof t.allowDots?t.allowDots:i.allowDots,t.plainObjects="boolean"==typeof t.plainObjects?t.plainObjects:i.plainObjects,t.allowPrototypes="boolean"==typeof t.allowPrototypes?t.allowPrototypes:i.allowPrototypes,t.parameterLimit="number"==typeof t.parameterLimit?t.parameterLimit:i.parameterLimit,t.strictNullHandling="boolean"==typeof t.strictNullHandling?t.strictNullHandling:i.strictNullHandling,""===e||null===e||void 0===e)return t.plainObjects?Object.create(null):{};for(var s="string"==typeof e?function(e,n){for(var t={},r=n.ignoreQueryPrefix?e.replace(/^\?/,""):e,o=n.parameterLimit===1/0?void 0:n.parameterLimit,s=r.split(n.delimiter,o),c=0;c<s.length;++c){var u,p,l=s[c],f=l.indexOf("]="),d=-1===f?l.indexOf("="):f+1;-1===d?(u=n.decoder(l,i.decoder),p=n.strictNullHandling?null:""):(u=n.decoder(l.slice(0,d),i.decoder),p=n.decoder(l.slice(d+1),i.decoder)),a.call(t,u)?t[u]=[].concat(t[u]).concat(p):t[u]=p}return t}(e,t):e,c=t.plainObjects?Object.create(null):{},u=Object.keys(s),p=0;p<u.length;++p){var l=u[p],f=o(l,s[l],t);c=r.merge(c,f,t)}return r.compact(c)}},function(e,n,t){"use strict";var r=t(60),a=t(59),i={brackets:function(e){return e+"[]"},indices:function(e,n){return e+"["+n+"]"},repeat:function(e){return e}},o=Date.prototype.toISOString,s={delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,serializeDate:function(e){return o.call(e)},skipNulls:!1,strictNullHandling:!1},c=function e(n,t,a,i,o,c,u,p,l,f,d,m){var h=n;if("function"==typeof u)h=u(t,h);else if(h instanceof Date)h=f(h);else if(null===h){if(i)return c&&!m?c(t,s.encoder):t;h=""}if("string"==typeof h||"number"==typeof h||"boolean"==typeof h||r.isBuffer(h))return c?[d(m?t:c(t,s.encoder))+"="+d(c(h,s.encoder))]:[d(t)+"="+d(String(h))];var v,g=[];if(void 0===h)return g;if(Array.isArray(u))v=u;else{var y=Object.keys(h);v=p?y.sort(p):y}for(var b=0;b<v.length;++b){var x=v[b];o&&null===h[x]||(g=Array.isArray(h)?g.concat(e(h[x],a(t,x),a,i,o,c,u,p,l,f,d,m)):g.concat(e(h[x],t+(l?"."+x:"["+x+"]"),a,i,o,c,u,p,l,f,d,m)))}return g};e.exports=function(e,n){var t=e,o=n?r.assign({},n):{};if(null!==o.encoder&&void 0!==o.encoder&&"function"!=typeof o.encoder)throw new TypeError("Encoder has to be a function.");var u=void 0===o.delimiter?s.delimiter:o.delimiter,p="boolean"==typeof o.strictNullHandling?o.strictNullHandling:s.strictNullHandling,l="boolean"==typeof o.skipNulls?o.skipNulls:s.skipNulls,f="boolean"==typeof o.encode?o.encode:s.encode,d="function"==typeof o.encoder?o.encoder:s.encoder,m="function"==typeof o.sort?o.sort:null,h=void 0!==o.allowDots&&o.allowDots,v="function"==typeof o.serializeDate?o.serializeDate:s.serializeDate,g="boolean"==typeof o.encodeValuesOnly?o.encodeValuesOnly:s.encodeValuesOnly;if(void 0===o.format)o.format=a.default;else if(!Object.prototype.hasOwnProperty.call(a.formatters,o.format))throw new TypeError("Unknown format option provided.");var y,b,x=a.formatters[o.format];"function"==typeof o.filter?t=(b=o.filter)("",t):Array.isArray(o.filter)&&(y=b=o.filter);var w,E=[];if("object"!=typeof t||null===t)return"";w=o.arrayFormat in i?o.arrayFormat:"indices"in o?o.indices?"indices":"repeat":"indices";var O=i[w];y||(y=Object.keys(t)),m&&y.sort(m);for(var T=0;T<y.length;++T){var _=y[T];l&&null===t[_]||(E=E.concat(c(t[_],_,O,p,l,f?d:null,b,m,h,v,x,g)))}var j=E.join(u),k=!0===o.addQueryPrefix?"?":"";return j.length>0?k+j:""}},function(e,n,t){"use strict";var r=t(111),a=t(110),i=t(59);e.exports={formats:i,parse:a,stringify:r}},function(e,n){e.exports=require("zlib")},function(e,n,t){"use strict";
/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){if(!e)throw new TypeError("argument stream is required");if("function"==typeof e.unpipe)return void e.unpipe();if(!function(e){for(var n=e.listeners("data"),t=0;t<n.length;t++)if("ondata"===n[t].name)return!0;return!1}(e))return;for(var n,t=e.listeners("close"),r=0;r<t.length;r++)"cleanup"!==(n=t[r]).name&&"onclose"!==n.name||n.call(e)}},function(e,n,t){"use strict";var r=t(17).Buffer;e.exports=function(e){var n=void 0;e.supportsNodeEncodingsExtension=!(new r(0)instanceof Uint8Array),e.extendNodeEncodings=function(){if(!n){if(n={},!e.supportsNodeEncodingsExtension)return console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node"),void console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");var a={hex:!0,utf8:!0,"utf-8":!0,ascii:!0,binary:!0,base64:!0,ucs2:!0,"ucs-2":!0,utf16le:!0,"utf-16le":!0};r.isNativeEncoding=function(e){return e&&a[e.toLowerCase()]};var i=t(17).SlowBuffer;if(n.SlowBufferToString=i.prototype.toString,i.prototype.toString=function(t,a,i){return t=String(t||"utf8").toLowerCase(),r.isNativeEncoding(t)?n.SlowBufferToString.call(this,t,a,i):(void 0===a&&(a=0),void 0===i&&(i=this.length),e.decode(this.slice(a,i),t))},n.SlowBufferWrite=i.prototype.write,i.prototype.write=function(t,a,i,o){if(isFinite(a))isFinite(i)||(o=i,i=void 0);else{var s=o;o=a,a=i,i=s}a=+a||0;var c=this.length-a;if(i?(i=+i)>c&&(i=c):i=c,o=String(o||"utf8").toLowerCase(),r.isNativeEncoding(o))return n.SlowBufferWrite.call(this,t,a,i,o);if(t.length>0&&(i<0||a<0))throw new RangeError("attempt to write beyond buffer bounds");var u=e.encode(t,o);return u.length<i&&(i=u.length),u.copy(this,a,0,i),i},n.BufferIsEncoding=r.isEncoding,r.isEncoding=function(n){return r.isNativeEncoding(n)||e.encodingExists(n)},n.BufferByteLength=r.byteLength,r.byteLength=i.byteLength=function(t,a){return a=String(a||"utf8").toLowerCase(),r.isNativeEncoding(a)?n.BufferByteLength.call(this,t,a):e.encode(t,a).length},n.BufferToString=r.prototype.toString,r.prototype.toString=function(t,a,i){return t=String(t||"utf8").toLowerCase(),r.isNativeEncoding(t)?n.BufferToString.call(this,t,a,i):(void 0===a&&(a=0),void 0===i&&(i=this.length),e.decode(this.slice(a,i),t))},n.BufferWrite=r.prototype.write,r.prototype.write=function(t,a,i,o){var s=a,c=i,u=o;if(isFinite(a))isFinite(i)||(o=i,i=void 0);else{var p=o;o=a,a=i,i=p}if(o=String(o||"utf8").toLowerCase(),r.isNativeEncoding(o))return n.BufferWrite.call(this,t,s,c,u);a=+a||0;var l=this.length-a;if(i?(i=+i)>l&&(i=l):i=l,t.length>0&&(i<0||a<0))throw new RangeError("attempt to write beyond buffer bounds");var f=e.encode(t,o);return f.length<i&&(i=f.length),f.copy(this,a,0,i),i},e.supportsStreams){var o=t(23).Readable;n.ReadableSetEncoding=o.prototype.setEncoding,o.prototype.setEncoding=function(n,t){this._readableState.decoder=e.getDecoder(n,t),this._readableState.encoding=n},o.prototype.collect=e._collect}}},e.undoExtendNodeEncodings=function(){if(e.supportsNodeEncodingsExtension){if(!n)throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");delete r.isNativeEncoding;var a=t(17).SlowBuffer;if(a.prototype.toString=n.SlowBufferToString,a.prototype.write=n.SlowBufferWrite,r.isEncoding=n.BufferIsEncoding,r.byteLength=n.BufferByteLength,r.prototype.toString=n.BufferToString,r.prototype.write=n.BufferWrite,e.supportsStreams){var i=t(23).Readable;i.prototype.setEncoding=n.ReadableSetEncoding,delete i.prototype.collect}n=void 0}}}},function(e,n,t){"use strict";var r=t(17).Buffer,a=t(23).Transform;function i(e,n){this.conv=e,(n=n||{}).decodeStrings=!1,a.call(this,n)}function o(e,n){this.conv=e,(n=n||{}).encoding=this.encoding="utf8",a.call(this,n)}e.exports=function(e){e.encodeStream=function(n,t){return new i(e.getEncoder(n,t),t)},e.decodeStream=function(n,t){return new o(e.getDecoder(n,t),t)},e.supportsStreams=!0,e.IconvLiteEncoderStream=i,e.IconvLiteDecoderStream=o,e._collect=o.prototype.collect},i.prototype=Object.create(a.prototype,{constructor:{value:i}}),i.prototype._transform=function(e,n,t){if("string"!=typeof e)return t(new Error("Iconv encoding stream needs strings as its input."));try{var r=this.conv.write(e);r&&r.length&&this.push(r),t()}catch(e){t(e)}},i.prototype._flush=function(e){try{var n=this.conv.end();n&&n.length&&this.push(n),e()}catch(n){e(n)}},i.prototype.collect=function(e){var n=[];return this.on("error",e),this.on("data",function(e){n.push(e)}),this.on("end",function(){e(null,r.concat(n))}),this},o.prototype=Object.create(a.prototype,{constructor:{value:o}}),o.prototype._transform=function(e,n,t){if(!r.isBuffer(e))return t(new Error("Iconv decoding stream needs buffers as its input."));try{var a=this.conv.write(e);a&&a.length&&this.push(a,this.encoding),t()}catch(e){t(e)}},o.prototype._flush=function(e){try{var n=this.conv.end();n&&n.length&&this.push(n,this.encoding),e()}catch(n){e(n)}},o.prototype.collect=function(e){var n="";return this.on("error",e),this.on("data",function(e){n+=e}),this.on("end",function(){e(null,n)}),this}},function(e){e.exports=[["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]},function(e){e.exports=[["0","\0",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]},function(e){e.exports={uChars:[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],gbChars:[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189e3]}},function(e){e.exports=[["0","\0",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]},function(e){e.exports=[["0","\0",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]},function(e,n,t){"use strict";e.exports={shiftjis:{type:"_dbcs",table:function(){return t(121)},encodeAdd:{"¥":92,"‾":126},encodeSkipVals:[{from:60736,to:63808}]},csshiftjis:"shiftjis",mskanji:"shiftjis",sjis:"shiftjis",windows31j:"shiftjis",ms31j:"shiftjis",xsjis:"shiftjis",windows932:"shiftjis",ms932:"shiftjis",932:"shiftjis",cp932:"shiftjis",eucjp:{type:"_dbcs",table:function(){return t(120)},encodeAdd:{"¥":92,"‾":126}},gb2312:"cp936",gb231280:"cp936",gb23121980:"cp936",csgb2312:"cp936",csiso58gb231280:"cp936",euccn:"cp936",windows936:"cp936",ms936:"cp936",936:"cp936",cp936:{type:"_dbcs",table:function(){return t(37)}},gbk:{type:"_dbcs",table:function(){return t(37).concat(t(63))}},xgbk:"gbk",isoir58:"gbk",gb18030:{type:"_dbcs",table:function(){return t(37).concat(t(63))},gb18030:function(){return t(119)},encodeSkipVals:[128],encodeAdd:{"€":41699}},chinese:"gb18030",windows949:"cp949",ms949:"cp949",949:"cp949",cp949:{type:"_dbcs",table:function(){return t(118)}},cseuckr:"cp949",csksc56011987:"cp949",euckr:"cp949",isoir149:"cp949",korean:"cp949",ksc56011987:"cp949",ksc56011989:"cp949",ksc5601:"cp949",windows950:"cp950",ms950:"cp950",950:"cp950",cp950:{type:"_dbcs",table:function(){return t(62)}},big5:"big5hkscs",big5hkscs:{type:"_dbcs",table:function(){return t(62).concat(t(117))},encodeSkipVals:[41676]},cnbig5:"big5hkscs",csbig5:"big5hkscs",xxbig5:"big5hkscs"}},function(e,n,t){"use strict";var r=t(17).Buffer;n._dbcs=u;for(var a=-1,i=-2,o=-1e3,s=new Array(256),c=0;c<256;c++)s[c]=a;function u(e,n){if(this.encodingName=e.encodingName,!e)throw new Error("DBCS codec is called without the data.");if(!e.table)throw new Error("Encoding '"+this.encodingName+"' has no data.");var t=e.table();this.decodeTables=[],this.decodeTables[0]=s.slice(0),this.decodeTableSeq=[];for(var r=0;r<t.length;r++)this._addDecodeChunk(t[r]);this.defaultCharUnicode=n.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var c={};if(e.encodeSkipVals)for(r=0;r<e.encodeSkipVals.length;r++){var u=e.encodeSkipVals[r];if("number"==typeof u)c[u]=!0;else for(var p=u.from;p<=u.to;p++)c[p]=!0}if(this._fillEncodeTable(0,0,c),e.encodeAdd)for(var l in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,l)&&this._setEncodeChar(l.charCodeAt(0),e.encodeAdd[l]);if(this.defCharSB=this.encodeTable[0][n.defaultCharSingleByte.charCodeAt(0)],this.defCharSB===a&&(this.defCharSB=this.encodeTable[0]["?"]),this.defCharSB===a&&(this.defCharSB="?".charCodeAt(0)),"function"==typeof e.gb18030){this.gb18030=e.gb18030();var f=this.decodeTables.length,d=this.decodeTables[f]=s.slice(0),m=this.decodeTables.length,h=this.decodeTables[m]=s.slice(0);for(r=129;r<=254;r++){var v=o-this.decodeTables[0][r],g=this.decodeTables[v];for(p=48;p<=57;p++)g[p]=o-f}for(r=129;r<=254;r++)d[r]=o-m;for(r=48;r<=57;r++)h[r]=i}}function p(e,n){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=n.encodeTable,this.encodeTableSeq=n.encodeTableSeq,this.defaultCharSingleByte=n.defCharSB,this.gb18030=n.gb18030}function l(e,n){this.nodeIdx=0,this.prevBuf=new r(0),this.decodeTables=n.decodeTables,this.decodeTableSeq=n.decodeTableSeq,this.defaultCharUnicode=n.defaultCharUnicode,this.gb18030=n.gb18030}function f(e,n){if(e[0]>n)return-1;for(var t=0,r=e.length;t<r-1;){var a=t+Math.floor((r-t+1)/2);e[a]<=n?t=a:r=a}return t}u.prototype.encoder=p,u.prototype.decoder=l,u.prototype._getDecodeTrieNode=function(e){for(var n=[];e>0;e>>=8)n.push(255&e);0==n.length&&n.push(0);for(var t=this.decodeTables[0],r=n.length-1;r>0;r--){var i=t[n[r]];if(i==a)t[n[r]]=o-this.decodeTables.length,this.decodeTables.push(t=s.slice(0));else{if(!(i<=o))throw new Error("Overwrite byte in "+this.encodingName+", addr: "+e.toString(16));t=this.decodeTables[o-i]}}return t},u.prototype._addDecodeChunk=function(e){var n=parseInt(e[0],16),t=this._getDecodeTrieNode(n);n&=255;for(var r=1;r<e.length;r++){var a=e[r];if("string"==typeof a)for(var i=0;i<a.length;){var o=a.charCodeAt(i++);if(55296<=o&&o<56320){var s=a.charCodeAt(i++);if(!(56320<=s&&s<57344))throw new Error("Incorrect surrogate pair in "+this.encodingName+" at chunk "+e[0]);t[n++]=65536+1024*(o-55296)+(s-56320)}else if(4080<o&&o<=4095){for(var c=4095-o+2,u=[],p=0;p<c;p++)u.push(a.charCodeAt(i++));t[n++]=-10-this.decodeTableSeq.length,this.decodeTableSeq.push(u)}else t[n++]=o}else{if("number"!=typeof a)throw new Error("Incorrect type '"+typeof a+"' given in "+this.encodingName+" at chunk "+e[0]);var l=t[n-1]+1;for(i=0;i<a;i++)t[n++]=l++}}if(n>255)throw new Error("Incorrect chunk in "+this.encodingName+" at addr "+e[0]+": too long"+n)},u.prototype._getEncodeBucket=function(e){var n=e>>8;return void 0===this.encodeTable[n]&&(this.encodeTable[n]=s.slice(0)),this.encodeTable[n]},u.prototype._setEncodeChar=function(e,n){var t=this._getEncodeBucket(e),r=255&e;t[r]<=-10?this.encodeTableSeq[-10-t[r]][-1]=n:t[r]==a&&(t[r]=n)},u.prototype._setEncodeSequence=function(e,n){var t,r=e[0],i=this._getEncodeBucket(r),o=255&r;i[o]<=-10?t=this.encodeTableSeq[-10-i[o]]:(t={},i[o]!==a&&(t[-1]=i[o]),i[o]=-10-this.encodeTableSeq.length,this.encodeTableSeq.push(t));for(var s=1;s<e.length-1;s++){var c=t[r];"object"==typeof c?t=c:(t=t[r]={},void 0!==c&&(t[-1]=c))}t[r=e[e.length-1]]=n},u.prototype._fillEncodeTable=function(e,n,t){for(var r=this.decodeTables[e],a=0;a<256;a++){var i=r[a],s=n+a;t[s]||(i>=0?this._setEncodeChar(i,s):i<=o?this._fillEncodeTable(o-i,s<<8,t):i<=-10&&this._setEncodeSequence(this.decodeTableSeq[-10-i],s))}},p.prototype.write=function(e){for(var n=new r(e.length*(this.gb18030?4:3)),t=this.leadSurrogate,i=this.seqObj,o=-1,s=0,c=0;;){if(-1===o){if(s==e.length)break;var u=e.charCodeAt(s++)}else{u=o;o=-1}if(55296<=u&&u<57344)if(u<56320){if(-1===t){t=u;continue}t=u,u=a}else-1!==t?(u=65536+1024*(t-55296)+(u-56320),t=-1):u=a;else-1!==t&&(o=u,u=a,t=-1);var p=a;if(void 0!==i&&u!=a){var l=i[u];if("object"==typeof l){i=l;continue}"number"==typeof l?p=l:void 0==l&&void 0!==(l=i[-1])&&(p=l,o=u),i=void 0}else if(u>=0){var d=this.encodeTable[u>>8];if(void 0!==d&&(p=d[255&u]),p<=-10){i=this.encodeTableSeq[-10-p];continue}if(p==a&&this.gb18030){var m=f(this.gb18030.uChars,u);if(-1!=m){p=this.gb18030.gbChars[m]+(u-this.gb18030.uChars[m]);n[c++]=129+Math.floor(p/12600),p%=12600,n[c++]=48+Math.floor(p/1260),p%=1260,n[c++]=129+Math.floor(p/10),p%=10,n[c++]=48+p;continue}}}p===a&&(p=this.defaultCharSingleByte),p<256?n[c++]=p:p<65536?(n[c++]=p>>8,n[c++]=255&p):(n[c++]=p>>16,n[c++]=p>>8&255,n[c++]=255&p)}return this.seqObj=i,this.leadSurrogate=t,n.slice(0,c)},p.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=new r(10),n=0;if(this.seqObj){var t=this.seqObj[-1];void 0!==t&&(t<256?e[n++]=t:(e[n++]=t>>8,e[n++]=255&t)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[n++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,n)}},p.prototype.findIdx=f,l.prototype.write=function(e){var n=new r(2*e.length),t=this.nodeIdx,s=this.prevBuf,c=this.prevBuf.length,u=-this.prevBuf.length;c>0&&(s=r.concat([s,e.slice(0,10)]));for(var p=0,l=0;p<e.length;p++){var d,m=p>=0?e[p]:s[p+c];if((d=this.decodeTables[t][m])>=0);else if(d===a)p=u,d=this.defaultCharUnicode.charCodeAt(0);else if(d===i){var h=u>=0?e.slice(u,p+1):s.slice(u+c,p+1+c),v=12600*(h[0]-129)+1260*(h[1]-48)+10*(h[2]-129)+(h[3]-48),g=f(this.gb18030.gbChars,v);d=this.gb18030.uChars[g]+v-this.gb18030.gbChars[g]}else{if(d<=o){t=o-d;continue}if(!(d<=-10))throw new Error("iconv-lite internal error: invalid decoding table value "+d+" at "+t+"/"+m);for(var y=this.decodeTableSeq[-10-d],b=0;b<y.length-1;b++)d=y[b],n[l++]=255&d,n[l++]=d>>8;d=y[y.length-1]}if(d>65535){d-=65536;var x=55296+Math.floor(d/1024);n[l++]=255&x,n[l++]=x>>8,d=56320+d%1024}n[l++]=255&d,n[l++]=d>>8,t=0,u=p+1}return this.nodeIdx=t,this.prevBuf=u>=0?e.slice(u):s.slice(u+c),n.slice(0,l).toString("ucs2")},l.prototype.end=function(){for(var e="";this.prevBuf.length>0;){e+=this.defaultCharUnicode;var n=this.prevBuf.slice(1);this.prevBuf=new r(0),this.nodeIdx=0,n.length>0&&(e+=this.write(n))}return this.nodeIdx=0,e}},function(e,n,t){"use strict";e.exports={437:"cp437",737:"cp737",775:"cp775",850:"cp850",852:"cp852",855:"cp855",856:"cp856",857:"cp857",858:"cp858",860:"cp860",861:"cp861",862:"cp862",863:"cp863",864:"cp864",865:"cp865",866:"cp866",869:"cp869",874:"windows874",922:"cp922",1046:"cp1046",1124:"cp1124",1125:"cp1125",1129:"cp1129",1133:"cp1133",1161:"cp1161",1162:"cp1162",1163:"cp1163",1250:"windows1250",1251:"windows1251",1252:"windows1252",1253:"windows1253",1254:"windows1254",1255:"windows1255",1256:"windows1256",1257:"windows1257",1258:"windows1258",28591:"iso88591",28592:"iso88592",28593:"iso88593",28594:"iso88594",28595:"iso88595",28596:"iso88596",28597:"iso88597",28598:"iso88598",28599:"iso88599",28600:"iso885910",28601:"iso885911",28603:"iso885913",28604:"iso885914",28605:"iso885915",28606:"iso885916",windows874:{type:"_sbcs",chars:"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},win874:"windows874",cp874:"windows874",windows1250:{type:"_sbcs",chars:"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},win1250:"windows1250",cp1250:"windows1250",windows1251:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},win1251:"windows1251",cp1251:"windows1251",windows1252:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},win1252:"windows1252",cp1252:"windows1252",windows1253:{type:"_sbcs",chars:"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},win1253:"windows1253",cp1253:"windows1253",windows1254:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},win1254:"windows1254",cp1254:"windows1254",windows1255:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},win1255:"windows1255",cp1255:"windows1255",windows1256:{type:"_sbcs",chars:"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"},win1256:"windows1256",cp1256:"windows1256",windows1257:{type:"_sbcs",chars:"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"},win1257:"windows1257",cp1257:"windows1257",windows1258:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},win1258:"windows1258",cp1258:"windows1258",iso88591:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28591:"iso88591",iso88592:{type:"_sbcs",chars:" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},cp28592:"iso88592",iso88593:{type:"_sbcs",chars:" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"},cp28593:"iso88593",iso88594:{type:"_sbcs",chars:" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"},cp28594:"iso88594",iso88595:{type:"_sbcs",chars:" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"},cp28595:"iso88595",iso88596:{type:"_sbcs",chars:" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"},cp28596:"iso88596",iso88597:{type:"_sbcs",chars:" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},cp28597:"iso88597",iso88598:{type:"_sbcs",chars:" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},cp28598:"iso88598",iso88599:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},cp28599:"iso88599",iso885910:{type:"_sbcs",chars:" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"},cp28600:"iso885910",iso885911:{type:"_sbcs",chars:" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},cp28601:"iso885911",iso885913:{type:"_sbcs",chars:" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"},cp28603:"iso885913",iso885914:{type:"_sbcs",chars:" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"},cp28604:"iso885914",iso885915:{type:"_sbcs",chars:" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28605:"iso885915",iso885916:{type:"_sbcs",chars:" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"},cp28606:"iso885916",cp437:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm437:"cp437",csibm437:"cp437",cp737:{type:"_sbcs",chars:"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "},ibm737:"cp737",csibm737:"cp737",cp775:{type:"_sbcs",chars:"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "},ibm775:"cp775",csibm775:"cp775",cp850:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm850:"cp850",csibm850:"cp850",cp852:{type:"_sbcs",chars:"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "},ibm852:"cp852",csibm852:"cp852",cp855:{type:"_sbcs",chars:"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "},ibm855:"cp855",csibm855:"cp855",cp856:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm856:"cp856",csibm856:"cp856",cp857:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "},ibm857:"cp857",csibm857:"cp857",cp858:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm858:"cp858",csibm858:"cp858",cp860:{type:"_sbcs",chars:"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm860:"cp860",csibm860:"cp860",cp861:{type:"_sbcs",chars:"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm861:"cp861",csibm861:"cp861",cp862:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm862:"cp862",csibm862:"cp862",cp863:{type:"_sbcs",chars:"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm863:"cp863",csibm863:"cp863",cp864:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"},ibm864:"cp864",csibm864:"cp864",cp865:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm865:"cp865",csibm865:"cp865",cp866:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "},ibm866:"cp866",csibm866:"cp866",cp869:{type:"_sbcs",chars:"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "},ibm869:"cp869",csibm869:"cp869",cp922:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"},ibm922:"cp922",csibm922:"cp922",cp1046:{type:"_sbcs",chars:"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"},ibm1046:"cp1046",csibm1046:"cp1046",cp1124:{type:"_sbcs",chars:" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"},ibm1124:"cp1124",csibm1124:"cp1124",cp1125:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "},ibm1125:"cp1125",csibm1125:"cp1125",cp1129:{type:"_sbcs",chars:" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1129:"cp1129",csibm1129:"cp1129",cp1133:{type:"_sbcs",chars:" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"},ibm1133:"cp1133",csibm1133:"cp1133",cp1161:{type:"_sbcs",chars:"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "},ibm1161:"cp1161",csibm1161:"cp1161",cp1162:{type:"_sbcs",chars:"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},ibm1162:"cp1162",csibm1162:"cp1162",cp1163:{type:"_sbcs",chars:" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1163:"cp1163",csibm1163:"cp1163",maccroatian:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"},maccyrillic:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},macgreek:{type:"_sbcs",chars:"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"},maciceland:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macroman:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macromania:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macthai:{type:"_sbcs",chars:"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\ufeff​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"},macturkish:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"},macukraine:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},koi8r:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8u:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8ru:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8t:{type:"_sbcs",chars:"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},armscii8:{type:"_sbcs",chars:" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"},rk1048:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},tcvn:{type:"_sbcs",chars:"\0ÚỤỪỬỮ\b\t\n\v\f\rỨỰỲỶỸÝỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"},georgianacademy:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},georgianps:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},pt154:{type:"_sbcs",chars:"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},viscii:{type:"_sbcs",chars:"\0ẲẴẪ\b\t\n\v\f\rỶỸỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"},iso646cn:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},iso646jp:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},hproman8:{type:"_sbcs",chars:" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"},macintosh:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},ascii:{type:"_sbcs",chars:"��������������������������������������������������������������������������������������������������������������������������������"},tis620:{type:"_sbcs",chars:"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"}}},function(e,n,t){"use strict";e.exports={10029:"maccenteuro",maccenteuro:{type:"_sbcs",chars:"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"},808:"cp808",ibm808:"cp808",cp808:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "},ascii8bit:"ascii",usascii:"ascii",ansix34:"ascii",ansix341968:"ascii",ansix341986:"ascii",csascii:"ascii",cp367:"ascii",ibm367:"ascii",isoir6:"ascii",iso646us:"ascii",iso646irv:"ascii",us:"ascii",latin1:"iso88591",latin2:"iso88592",latin3:"iso88593",latin4:"iso88594",latin5:"iso88599",latin6:"iso885910",latin7:"iso885913",latin8:"iso885914",latin9:"iso885915",latin10:"iso885916",csisolatin1:"iso88591",csisolatin2:"iso88592",csisolatin3:"iso88593",csisolatin4:"iso88594",csisolatincyrillic:"iso88595",csisolatinarabic:"iso88596",csisolatingreek:"iso88597",csisolatinhebrew:"iso88598",csisolatin5:"iso88599",csisolatin6:"iso885910",l1:"iso88591",l2:"iso88592",l3:"iso88593",l4:"iso88594",l5:"iso88599",l6:"iso885910",l7:"iso885913",l8:"iso885914",l9:"iso885915",l10:"iso885916",isoir14:"iso646jp",isoir57:"iso646cn",isoir100:"iso88591",isoir101:"iso88592",isoir109:"iso88593",isoir110:"iso88594",isoir144:"iso88595",isoir127:"iso88596",isoir126:"iso88597",isoir138:"iso88598",isoir148:"iso88599",isoir157:"iso885910",isoir166:"tis620",isoir179:"iso885913",isoir199:"iso885914",isoir203:"iso885915",isoir226:"iso885916",cp819:"iso88591",ibm819:"iso88591",cyrillic:"iso88595",arabic:"iso88596",arabic8:"iso88596",ecma114:"iso88596",asmo708:"iso88596",greek:"iso88597",greek8:"iso88597",ecma118:"iso88597",elot928:"iso88597",hebrew:"iso88598",hebrew8:"iso88598",turkish:"iso88599",turkish8:"iso88599",thai:"iso885911",thai8:"iso885911",celtic:"iso885914",celtic8:"iso885914",isoceltic:"iso885914",tis6200:"tis620",tis62025291:"tis620",tis62025330:"tis620",10000:"macroman",10006:"macgreek",10007:"maccyrillic",10079:"maciceland",10081:"macturkish",cspc8codepage437:"cp437",cspc775baltic:"cp775",cspc850multilingual:"cp850",cspcp852:"cp852",cspc862latinhebrew:"cp862",cpgr:"cp869",msee:"cp1250",mscyrl:"cp1251",msansi:"cp1252",msgreek:"cp1253",msturk:"cp1254",mshebr:"cp1255",msarab:"cp1256",winbaltrim:"cp1257",cp20866:"koi8r",20866:"koi8r",ibm878:"koi8r",cskoi8r:"koi8r",cp21866:"koi8u",21866:"koi8u",ibm1168:"koi8u",strk10482002:"rk1048",tcvn5712:"tcvn",tcvn57121:"tcvn",gb198880:"iso646cn",cn:"iso646cn",csiso14jisc6220ro:"iso646jp",jisc62201969ro:"iso646jp",jp:"iso646jp",cshproman8:"hproman8",r8:"hproman8",roman8:"hproman8",xroman8:"hproman8",ibm1051:"hproman8",mac:"macintosh",csmacintosh:"macintosh"}},function(e,n,t){"use strict";var r=t(17).Buffer;function a(e,n){if(!e)throw new Error("SBCS codec is called without the data.");if(!e.chars||128!==e.chars.length&&256!==e.chars.length)throw new Error("Encoding '"+e.type+"' has incorrect 'chars' (must be of len 128 or 256)");if(128===e.chars.length){for(var t="",a=0;a<128;a++)t+=String.fromCharCode(a);e.chars=t+e.chars}this.decodeBuf=new r(e.chars,"ucs2");var i=new r(65536);i.fill(n.defaultCharSingleByte.charCodeAt(0));for(a=0;a<e.chars.length;a++)i[e.chars.charCodeAt(a)]=a;this.encodeBuf=i}function i(e,n){this.encodeBuf=n.encodeBuf}function o(e,n){this.decodeBuf=n.decodeBuf}n._sbcs=a,a.prototype.encoder=i,a.prototype.decoder=o,i.prototype.write=function(e){for(var n=new r(e.length),t=0;t<e.length;t++)n[t]=this.encodeBuf[e.charCodeAt(t)];return n},i.prototype.end=function(){},o.prototype.write=function(e){for(var n=this.decodeBuf,t=new r(2*e.length),a=0,i=0,o=0;o<e.length;o++)a=2*e[o],t[i=2*o]=n[a],t[i+1]=n[a+1];return t.toString("ucs2")},o.prototype.end=function(){}},function(e,n,t){"use strict";var r=t(17).Buffer;function a(e,n){this.iconv=n}n.utf7=a,n.unicode11utf7="utf7",a.prototype.encoder=o,a.prototype.decoder=s,a.prototype.bomAware=!0;var i=/[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;function o(e,n){this.iconv=n.iconv}function s(e,n){this.iconv=n.iconv,this.inBase64=!1,this.base64Accum=""}o.prototype.write=function(e){return new r(e.replace(i,function(e){return"+"+("+"===e?"":this.iconv.encode(e,"utf16-be").toString("base64").replace(/=+$/,""))+"-"}.bind(this)))},o.prototype.end=function(){};for(var c=/[A-Za-z0-9\/+]/,u=[],p=0;p<256;p++)u[p]=c.test(String.fromCharCode(p));var l="+".charCodeAt(0),f="-".charCodeAt(0),d="&".charCodeAt(0);function m(e,n){this.iconv=n}function h(e,n){this.iconv=n.iconv,this.inBase64=!1,this.base64Accum=new r(6),this.base64AccumIdx=0}function v(e,n){this.iconv=n.iconv,this.inBase64=!1,this.base64Accum=""}s.prototype.write=function(e){for(var n="",t=0,a=this.inBase64,i=this.base64Accum,o=0;o<e.length;o++)if(a){if(!u[e[o]]){if(o==t&&e[o]==f)n+="+";else{var s=i+e.slice(t,o).toString();n+=this.iconv.decode(new r(s,"base64"),"utf16-be")}e[o]!=f&&o--,t=o+1,a=!1,i=""}}else e[o]==l&&(n+=this.iconv.decode(e.slice(t,o),"ascii"),t=o+1,a=!0);if(a){var c=(s=i+e.slice(t).toString()).length-s.length%8;i=s.slice(c),s=s.slice(0,c),n+=this.iconv.decode(new r(s,"base64"),"utf16-be")}else n+=this.iconv.decode(e.slice(t),"ascii");return this.inBase64=a,this.base64Accum=i,n},s.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(new r(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e},n.utf7imap=m,m.prototype.encoder=h,m.prototype.decoder=v,m.prototype.bomAware=!0,h.prototype.write=function(e){for(var n=this.inBase64,t=this.base64Accum,a=this.base64AccumIdx,i=new r(5*e.length+10),o=0,s=0;s<e.length;s++){var c=e.charCodeAt(s);32<=c&&c<=126?(n&&(a>0&&(o+=i.write(t.slice(0,a).toString("base64").replace(/\//g,",").replace(/=+$/,""),o),a=0),i[o++]=f,n=!1),n||(i[o++]=c,c===d&&(i[o++]=f))):(n||(i[o++]=d,n=!0),n&&(t[a++]=c>>8,t[a++]=255&c,a==t.length&&(o+=i.write(t.toString("base64").replace(/\//g,","),o),a=0)))}return this.inBase64=n,this.base64AccumIdx=a,i.slice(0,o)},h.prototype.end=function(){var e=new r(10),n=0;return this.inBase64&&(this.base64AccumIdx>0&&(n+=e.write(this.base64Accum.slice(0,this.base64AccumIdx).toString("base64").replace(/\//g,",").replace(/=+$/,""),n),this.base64AccumIdx=0),e[n++]=f,this.inBase64=!1),e.slice(0,n)};var g=u.slice();g[",".charCodeAt(0)]=!0,v.prototype.write=function(e){for(var n="",t=0,a=this.inBase64,i=this.base64Accum,o=0;o<e.length;o++)if(a){if(!g[e[o]]){if(o==t&&e[o]==f)n+="&";else{var s=i+e.slice(t,o).toString().replace(/,/g,"/");n+=this.iconv.decode(new r(s,"base64"),"utf16-be")}e[o]!=f&&o--,t=o+1,a=!1,i=""}}else e[o]==d&&(n+=this.iconv.decode(e.slice(t,o),"ascii"),t=o+1,a=!0);if(a){var c=(s=i+e.slice(t).toString().replace(/,/g,"/")).length-s.length%8;i=s.slice(c),s=s.slice(0,c),n+=this.iconv.decode(new r(s,"base64"),"utf16-be")}else n+=this.iconv.decode(e.slice(t),"ascii");return this.inBase64=a,this.base64Accum=i,n},v.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(new r(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e}},function(e,n,t){"use strict";var r=t(17).Buffer;function a(){}function i(){}function o(){this.overflowByte=-1}function s(e,n){this.iconv=n}function c(e,n){void 0===(e=e||{}).addBOM&&(e.addBOM=!0),this.encoder=n.iconv.getEncoder("utf-16le",e)}function u(e,n){this.decoder=null,this.initialBytes=[],this.initialBytesLen=0,this.options=e||{},this.iconv=n.iconv}function p(e,n){var t=n||"utf-16le";if(e.length>=2)if(254==e[0]&&255==e[1])t="utf-16be";else if(255==e[0]&&254==e[1])t="utf-16le";else{for(var r=0,a=0,i=Math.min(e.length-e.length%2,64),o=0;o<i;o+=2)0===e[o]&&0!==e[o+1]&&a++,0!==e[o]&&0===e[o+1]&&r++;a>r?t="utf-16be":a<r&&(t="utf-16le")}return t}n.utf16be=a,a.prototype.encoder=i,a.prototype.decoder=o,a.prototype.bomAware=!0,i.prototype.write=function(e){for(var n=new r(e,"ucs2"),t=0;t<n.length;t+=2){var a=n[t];n[t]=n[t+1],n[t+1]=a}return n},i.prototype.end=function(){},o.prototype.write=function(e){if(0==e.length)return"";var n=new r(e.length+1),t=0,a=0;for(-1!==this.overflowByte&&(n[0]=e[0],n[1]=this.overflowByte,t=1,a=2);t<e.length-1;t+=2,a+=2)n[a]=e[t+1],n[a+1]=e[t];return this.overflowByte=t==e.length-1?e[e.length-1]:-1,n.slice(0,a).toString("ucs2")},o.prototype.end=function(){},n.utf16=s,s.prototype.encoder=c,s.prototype.decoder=u,c.prototype.write=function(e){return this.encoder.write(e)},c.prototype.end=function(){return this.encoder.end()},u.prototype.write=function(e){if(!this.decoder){if(this.initialBytes.push(e),this.initialBytesLen+=e.length,this.initialBytesLen<16)return"";var n=p(e=r.concat(this.initialBytes),this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(n,this.options),this.initialBytes.length=this.initialBytesLen=0}return this.decoder.write(e)},u.prototype.end=function(){if(!this.decoder){var e=r.concat(this.initialBytes),n=p(e,this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(n,this.options);var t=this.decoder.write(e),a=this.decoder.end();return a?t+a:t}return this.decoder.end()}},function(e,n){e.exports=require("string_decoder")},function(e,n,t){"use strict";var r=t(17).Buffer;function a(e,n){this.enc=e.encodingName,this.bomAware=e.bomAware,"base64"===this.enc?this.encoder=c:"cesu8"===this.enc&&(this.enc="utf8",this.encoder=u,"💩"!==new r("eda0bdedb2a9","hex").toString()&&(this.decoder=p,this.defaultCharUnicode=n.defaultCharUnicode))}e.exports={utf8:{type:"_internal",bomAware:!0},cesu8:{type:"_internal",bomAware:!0},unicode11utf8:"utf8",ucs2:{type:"_internal",bomAware:!0},utf16le:"ucs2",binary:{type:"_internal"},base64:{type:"_internal"},hex:{type:"_internal"},_internal:a},a.prototype.encoder=s,a.prototype.decoder=o;var i=t(129).StringDecoder;function o(e,n){i.call(this,n.enc)}function s(e,n){this.enc=n.enc}function c(e,n){this.prevStr=""}function u(e,n){}function p(e,n){this.acc=0,this.contBytes=0,this.accBytes=0,this.defaultCharUnicode=n.defaultCharUnicode}i.prototype.end||(i.prototype.end=function(){}),o.prototype=i.prototype,s.prototype.write=function(e){return new r(e,this.enc)},s.prototype.end=function(){},c.prototype.write=function(e){var n=(e=this.prevStr+e).length-e.length%4;return this.prevStr=e.slice(n),e=e.slice(0,n),new r(e,"base64")},c.prototype.end=function(){return new r(this.prevStr,"base64")},u.prototype.write=function(e){for(var n=new r(3*e.length),t=0,a=0;a<e.length;a++){var i=e.charCodeAt(a);i<128?n[t++]=i:i<2048?(n[t++]=192+(i>>>6),n[t++]=128+(63&i)):(n[t++]=224+(i>>>12),n[t++]=128+(i>>>6&63),n[t++]=128+(63&i))}return n.slice(0,t)},u.prototype.end=function(){},p.prototype.write=function(e){for(var n=this.acc,t=this.contBytes,r=this.accBytes,a="",i=0;i<e.length;i++){var o=e[i];128!=(192&o)?(t>0&&(a+=this.defaultCharUnicode,t=0),o<128?a+=String.fromCharCode(o):o<224?(n=31&o,t=1,r=1):o<240?(n=15&o,t=2,r=1):a+=this.defaultCharUnicode):t>0?(n=n<<6|63&o,r++,0===--t&&(a+=2===r&&n<128&&n>0?this.defaultCharUnicode:3===r&&n<2048?this.defaultCharUnicode:String.fromCharCode(n))):a+=this.defaultCharUnicode}return this.acc=n,this.contBytes=t,this.accBytes=r,a},p.prototype.end=function(){var e=0;return this.contBytes>0&&(e+=this.defaultCharUnicode),e}},function(e,n,t){"use strict";for(var r=[t(130),t(128),t(127),t(126),t(125),t(124),t(123),t(122)],a=0;a<r.length;a++){e=r[a];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i])}},function(e,n,t){"use strict";function r(e,n){this.encoder=e,this.addBOM=!0}function a(e,n){this.decoder=e,this.pass=!1,this.options=n||{}}n.PrependBOM=r,r.prototype.write=function(e){return this.addBOM&&(e="\ufeff"+e,this.addBOM=!1),this.encoder.write(e)},r.prototype.end=function(){return this.encoder.end()},n.StripBOM=a,a.prototype.write=function(e){var n=this.decoder.write(e);return this.pass||!n?n:("\ufeff"===n[0]&&(n=n.slice(1),"function"==typeof this.options.stripBOM&&this.options.stripBOM()),this.pass=!0,n)},a.prototype.end=function(){return this.decoder.end()}},function(e,n,t){"use strict";var r=t(17).Buffer,a=t(132),i=e.exports;i.encodings=null,i.defaultCharUnicode="�",i.defaultCharSingleByte="?",i.encode=function(e,n,t){e=""+(e||"");var a=i.getEncoder(n,t),o=a.write(e),s=a.end();return s&&s.length>0?r.concat([o,s]):o},i.decode=function(e,n,t){"string"==typeof e&&(i.skipDecodeWarning||(console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding"),i.skipDecodeWarning=!0),e=new r(""+(e||""),"binary"));var a=i.getDecoder(n,t),o=a.write(e),s=a.end();return s?o+s:o},i.encodingExists=function(e){try{return i.getCodec(e),!0}catch(e){return!1}},i.toEncoding=i.encode,i.fromEncoding=i.decode,i._codecDataCache={},i.getCodec=function(e){i.encodings||(i.encodings=t(131));for(var n=(""+e).toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g,""),r={};;){var a=i._codecDataCache[n];if(a)return a;var o=i.encodings[n];switch(typeof o){case"string":n=o;break;case"object":for(var s in o)r[s]=o[s];r.encodingName||(r.encodingName=n),n=o.type;break;case"function":return r.encodingName||(r.encodingName=n),a=new o(r,i),i._codecDataCache[r.encodingName]=a,a;default:throw new Error("Encoding not recognized: '"+e+"' (searched as: '"+n+"')")}}},i.getEncoder=function(e,n){var t=i.getCodec(e),r=new t.encoder(n,t);return t.bomAware&&n&&n.addBOM&&(r=new a.PrependBOM(r,n)),r},i.getDecoder=function(e,n){var t=i.getCodec(e),r=new t.decoder(n,t);return!t.bomAware||n&&!1===n.stripBOM||(r=new a.StripBOM(r,n)),r};var o="undefined"!=typeof process&&process.versions&&process.versions.node;if(o){var s=o.split(".").map(Number);(s[0]>0||s[1]>=10)&&t(116)(i),t(115)(i)}},function(e,n){e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,n){return e.__proto__=n,e}:function(e,n){for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t]);return e})},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,n){return e.listeners(n).length}},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){var n=!0,t=function(e){var n,t="";e.isNative()?t="native":e.isEval()?(n=e.getScriptNameOrSourceURL())||(t=e.getEvalOrigin()):n=e.getFileName();if(n){t+=n;var r=e.getLineNumber();if(null!=r){t+=":"+r;var a=e.getColumnNumber();a&&(t+=":"+a)}}return t||"unknown source"}(e),r=e.getFunctionName(),a=e.isConstructor(),i="";if(e.isToplevel()||a)a?i+="new "+(r||"<anonymous>"):r?i+=r:(n=!1,i+=t);else{var o=e.getMethodName(),s=(c=e.receiver).constructor&&c.constructor.name||null;r?(s&&0!==r.indexOf(s)&&(i+=s+"."),i+=r,o&&r.lastIndexOf("."+o)!==r.length-o.length-1&&(i+=" [as "+o+"]")):i+=s+"."+(o||"<anonymous>")}var c;n&&(i+=" ("+t+")");return i}},function(module,exports,__webpack_require__){
/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
var callSiteToString=__webpack_require__(64).callSiteToString,eventListenerCount=__webpack_require__(64).eventListenerCount,relative=__webpack_require__(26).relative;module.exports=depd;var basePath=process.cwd();function containsNamespace(e,n){var t=e.split(/[ ,]+/);n=String(n).toLowerCase();for(var r=0;r<t.length;r++)if((e=t[r])&&("*"===e||e.toLowerCase()===n))return!0;return!1}function convertDataDescriptorToAccessor(e,n,t){var r=Object.getOwnPropertyDescriptor(e,n),a=r.value;return r.get=function(){return a},r.writable&&(r.set=function(e){return a=e}),delete r.value,delete r.writable,Object.defineProperty(e,n,r),r}function createArgumentsString(e){for(var n="",t=0;t<e;t++)n+=", arg"+t;return n.substr(2)}function createStackString(e){var n=this.name+": "+this.namespace;this.message&&(n+=" deprecated "+this.message);for(var t=0;t<e.length;t++)n+="\n    at "+callSiteToString(e[t]);return n}function depd(e){if(!e)throw new TypeError("argument namespace is required");var n=callSiteLocation(getStack()[1])[0];function t(e){log.call(t,e)}return t._file=n,t._ignored=isignored(e),t._namespace=e,t._traced=istraced(e),t._warned=Object.create(null),t.function=wrapfunction,t.property=wrapproperty,t}function isignored(e){return!!process.noDeprecation||containsNamespace(process.env.NO_DEPRECATION||"",e)}function istraced(e){return!!process.traceDeprecation||containsNamespace(process.env.TRACE_DEPRECATION||"",e)}function log(e,n){var t=0!==eventListenerCount(process,"deprecation");if(t||!this._ignored){var r,a,i,o=0,s=!1,c=getStack(),u=this._file;for(n?((i=callSiteLocation(c[1])).name=n.name,u=i[0]):i=n=callSiteLocation(c[o=2]);o<c.length;o++)if((a=(r=callSiteLocation(c[o]))[0])===u)s=!0;else if(a===this._file)u=this._file;else if(s)break;var p=r?n.join(":")+"__"+r.join(":"):void 0;if(!(void 0!==p&&p in this._warned))if(this._warned[p]=!0,e||(e=i!==n&&i.name?defaultMessage(i):defaultMessage(n)),t){var l=DeprecationError(this._namespace,e,c.slice(o));process.emit("deprecation",l)}else{var f=(process.stderr.isTTY?formatColor:formatPlain).call(this,e,r,c.slice(o));process.stderr.write(f+"\n","utf8")}}}function callSiteLocation(e){var n=e.getFileName()||"<anonymous>",t=e.getLineNumber(),r=e.getColumnNumber();e.isEval()&&(n=e.getEvalOrigin()+", "+n);var a=[n,t,r];return a.callSite=e,a.name=e.getFunctionName(),a}function defaultMessage(e){var n=e.callSite,t=e.name;t||(t="<anonymous@"+formatLocation(e)+">");var r=n.getThis(),a=r&&n.getTypeName();return"Object"===a&&(a=void 0),"Function"===a&&(a=r.name||a),a&&n.getMethodName()?a+"."+t:t}function formatPlain(e,n,t){var r=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var a=0;a<t.length;a++)r+="\n    at "+callSiteToString(t[a]);return r}return n&&(r+=" at "+formatLocation(n)),r}function formatColor(e,n,t){var r="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var a=0;a<t.length;a++)r+="\n    [36mat "+callSiteToString(t[a])+"[39m";return r}return n&&(r+=" [36m"+formatLocation(n)+"[39m"),r}function formatLocation(e){return relative(basePath,e[0])+":"+e[1]+":"+e[2]}function getStack(){var e=Error.stackTraceLimit,n={},t=Error.prepareStackTrace;Error.prepareStackTrace=prepareObjectStackTrace,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(n);var r=n.stack.slice(1);return Error.prepareStackTrace=t,Error.stackTraceLimit=e,r}function prepareObjectStackTrace(e,n){return n}function wrapfunction(fn,message){if("function"!=typeof fn)throw new TypeError("argument fn must be a function");var args=createArgumentsString(fn.length),deprecate=this,stack=getStack(),site=callSiteLocation(stack[1]);site.name=fn.name;var deprecatedfn=eval("(function ("+args+') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');return deprecatedfn}function wrapproperty(e,n,t){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var r=Object.getOwnPropertyDescriptor(e,n);if(!r)throw new TypeError("must call property on owner object");if(!r.configurable)throw new TypeError("property must be configurable");var a=this,i=callSiteLocation(getStack()[1]);i.name=n,"value"in r&&(r=convertDataDescriptorToAccessor(e,n,t));var o=r.get,s=r.set;"function"==typeof o&&(r.get=function(){return log.call(a,t,i),o.apply(this,arguments)}),"function"==typeof s&&(r.set=function(){return log.call(a,t,i),s.apply(this,arguments)}),Object.defineProperty(e,n,r)}function DeprecationError(e,n,t){var r,a=new Error;return Object.defineProperty(a,"constructor",{value:DeprecationError}),Object.defineProperty(a,"message",{configurable:!0,enumerable:!1,value:n,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(a,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(a,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==r?r:r=createStackString.call(this,t)},set:function(e){r=e}}),a}},function(e,n,t){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(137)("http-errors"),a=t(134),i=t(25),o=t(73);function s(e){return Number(String(e).charAt(0)+"00")}e.exports=function e(){var n;var t;var a=500;var o={};for(var c=0;c<arguments.length;c++){var u=arguments[c];if(u instanceof Error)a=(n=u).status||n.statusCode||a;else switch(typeof u){case"string":t=u;break;case"number":a=u,0!==c&&r("non-first-argument status code; replace with createError("+u+", ...)");break;case"object":o=u}}"number"==typeof a&&(a<400||a>=600)&&r("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof a||!i[a]&&(a<400||a>=600))&&(a=500);var p=e[a]||e[s(a)];n||(n=p?new p(t):new Error(t||i[a]),Error.captureStackTrace(n,e));p&&n instanceof p&&n.status===a||(n.expose=a<500,n.status=n.statusCode=a);for(var l in o)"status"!==l&&"statusCode"!==l&&(n[l]=o[l]);return n},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return o(e,Error),e}(),function(e,n,t){n.forEach(function(n){var r,c=i[n].split(" ").map(function(e){return e.slice(0,1).toUpperCase()+e.slice(1)}).join("").replace(/[^ _0-9a-z]/gi,"");switch(s(n)){case 400:r=function(e,n,t){var r=n.match(/Error$/)?n:n+"Error";function s(e){var n=null!=e?e:i[t],o=new Error(n);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:n,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:r,writable:!0}),o}return o(s,e),s.prototype.status=t,s.prototype.statusCode=t,s.prototype.expose=!0,s}(t,c,n);break;case 500:r=function(e,n,t){var r=n.match(/Error$/)?n:n+"Error";function s(e){var n=null!=e?e:i[t],o=new Error(n);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:n,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:r,writable:!0}),o}return o(s,e),s.prototype.status=t,s.prototype.statusCode=t,s.prototype.expose=!1,s}(t,c,n)}r&&(e[n]=r,e[c]=r)}),e["I'mateapot"]=r.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,i.codes,e.exports.HttpError)},function(e,n,t){"use strict";
/*!
 * bytes
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015 Jed Watson
 * MIT Licensed
 */e.exports=function(e,n){if("string"==typeof e)return c(e);if("number"==typeof e)return s(e,n);return null},e.exports.format=s,e.exports.parse=c;var r=/\B(?=(\d{3})+(?!\d))/g,a=/(?:\.0*|(\.[^0]+)0+)$/,i={b:1,kb:1024,mb:1<<20,gb:1<<30,tb:1024*(1<<30)},o=/^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb)$/i;function s(e,n){if(!Number.isFinite(e))return null;var t=Math.abs(e),o=n&&n.thousandsSeparator||"",s=n&&n.unitSeparator||"",c=n&&void 0!==n.decimalPlaces?n.decimalPlaces:2,u=Boolean(n&&n.fixedDecimals),p=n&&n.unit||"";p&&i[p.toLowerCase()]||(p=t>=i.tb?"TB":t>=i.gb?"GB":t>=i.mb?"MB":t>=i.kb?"KB":"B");var l=(e/i[p.toLowerCase()]).toFixed(c);return u||(l=l.replace(a,"$1")),o&&(l=l.replace(r,o)),l+s+p}function c(e){if("number"==typeof e&&!isNaN(e))return e;if("string"!=typeof e)return null;var n,t=o.exec(e),r="b";return t?(n=parseFloat(t[1]),r=t[4].toLowerCase()):(n=parseInt(e,10),r="b"),Math.floor(i[r]*n)}},function(e,n,t){var r=t(45),a=t(65),i=t(61),o=t(58),s=["json","application/*+json","application/csp-report"],c=["urlencoded"],u=["text"];e.exports=function(e,n){e=e.req||e;var t=(n=n||{}).jsonTypes||s;if(r(e,t))return a(e,n);var p=n.formTypes||c;if(r(e,p))return i(e,n);var l=n.textTypes||u;if(r(e,l))return o(e,n);var f=e.headers["content-type"]||"",d=new Error(f?"Unsupported content-type: "+f:"Missing content-type");return d.status=415,Promise.reject(d)}},function(e,n,t){(n=e.exports=t(140)).json=t(65),n.form=t(61),n.text=t(58)},function(e,n,t){"use strict";
/**!
 * koa-body-parser - index.js
 * Copyright(c) 2014
 * MIT Licensed
 *
 * Authors:
 *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)
 *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)
 */var r=t(141),a=t(109);function i(e,n){var t={};return a(e).to(t),t.limit=e[n+"Limit"],t}function o(e,n){n&&(Array.isArray(n)||(n=[n]),n.forEach(function(n){e.push(n)}))}function s(e,n){return e.indexOf(n)>=0}e.exports=function(e){var n=(e=e||{}).detectJSON,t=e.onerror,a=e.enableTypes||["json","form"],c=s(a,"form"),u=s(a,"json"),p=s(a,"text");e.detectJSON=void 0,e.onerror=void 0,e.returnRawBody=!0;var l=["application/json","application/json-patch+json","application/vnd.api+json","application/csp-report"],f=["application/x-www-form-urlencoded"],d=["text/plain"],m=i(e,"json"),h=i(e,"form"),v=i(e,"text"),g=e.extendTypes||{};return o(l,g.json),o(f,g.form),o(d,g.text),async function(e,a){if(void 0!==e.request.body)return await a();if(e.disableBodyParser)return await a();try{const a=await async function(e){if(u&&(n&&n(e)||e.request.is(l)))return await r.json(e,m);if(c&&e.request.is(f))return await r.form(e,h);if(p&&e.request.is(d))return await r.text(e,v)||"";return{}}(e);e.request.body="parsed"in a?a.parsed:{},void 0===e.request.rawBody&&(e.request.rawBody=a.raw)}catch(n){if(!t)throw n;t(n,e)}await a()}}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){var r,a,i;
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(o,s){"use strict";"object"==typeof e&&e.exports?e.exports=s(t(68),t(67),t(66)):(a=[t(68),t(67),t(66)],void 0===(i="function"==typeof(r=s)?r.apply(n,a):r)||(e.exports=i))}(0,function(e,n,t,r){"use strict";var a=r&&r.URI;function i(e,n){var t=arguments.length>=1,r=arguments.length>=2;if(!(this instanceof i))return t?r?new i(e,n):new i(e):new i;if(void 0===e){if(t)throw new TypeError("undefined is not a valid argument for URI");e="undefined"!=typeof location?location.href+"":""}if(null===e&&t)throw new TypeError("null is not a valid argument for URI");return this.href(e),void 0!==n?this.absoluteTo(n):this}i.version="1.19.1";var o=i.prototype,s=Object.prototype.hasOwnProperty;function c(e){return e.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}function u(e){return void 0===e?"Undefined":String(Object.prototype.toString.call(e)).slice(8,-1)}function p(e){return"Array"===u(e)}function l(e,n){var t,r,a={};if("RegExp"===u(n))a=null;else if(p(n))for(t=0,r=n.length;t<r;t++)a[n[t]]=!0;else a[n]=!0;for(t=0,r=e.length;t<r;t++){(a&&void 0!==a[e[t]]||!a&&n.test(e[t]))&&(e.splice(t,1),r--,t--)}return e}function f(e,n){var t,r;if(p(n)){for(t=0,r=n.length;t<r;t++)if(!f(e,n[t]))return!1;return!0}var a=u(n);for(t=0,r=e.length;t<r;t++)if("RegExp"===a){if("string"==typeof e[t]&&e[t].match(n))return!0}else if(e[t]===n)return!0;return!1}function d(e,n){if(!p(e)||!p(n))return!1;if(e.length!==n.length)return!1;e.sort(),n.sort();for(var t=0,r=e.length;t<r;t++)if(e[t]!==n[t])return!1;return!0}function m(e){return e.replace(/^\/+|\/+$/g,"")}function h(e){return escape(e)}function v(e){return encodeURIComponent(e).replace(/[!'()*]/g,h).replace(/\*/g,"%2A")}i._parts=function(){return{protocol:null,username:null,password:null,hostname:null,urn:null,port:null,path:null,query:null,fragment:null,preventInvalidHostname:i.preventInvalidHostname,duplicateQueryParameters:i.duplicateQueryParameters,escapeQuerySpace:i.escapeQuerySpace}},i.preventInvalidHostname=!1,i.duplicateQueryParameters=!1,i.escapeQuerySpace=!0,i.protocol_expression=/^[a-z][a-z0-9.+-]*$/i,i.idn_expression=/[^a-z0-9\._-]/i,i.punycode_expression=/(xn--)/i,i.ip4_expression=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,i.ip6_expression=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,i.find_uri_expression=/\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi,i.findUri={start:/\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,end:/[\s\r\n]|$/,trim:/[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,parens:/(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g},i.defaultPorts={http:"80",https:"443",ftp:"21",gopher:"70",ws:"80",wss:"443"},i.hostProtocols=["http","https"],i.invalid_hostname_characters=/[^a-zA-Z0-9\.\-:_]/,i.domAttributes={a:"href",blockquote:"cite",link:"href",base:"href",script:"src",form:"action",img:"src",area:"href",iframe:"src",embed:"src",source:"src",track:"src",input:"src",audio:"src",video:"src"},i.getDomAttribute=function(e){if(e&&e.nodeName){var n=e.nodeName.toLowerCase();if("input"!==n||"image"===e.type)return i.domAttributes[n]}},i.encode=v,i.decode=decodeURIComponent,i.iso8859=function(){i.encode=escape,i.decode=unescape},i.unicode=function(){i.encode=v,i.decode=decodeURIComponent},i.characters={pathname:{encode:{expression:/%(24|26|2B|2C|3B|3D|3A|40)/gi,map:{"%24":"$","%26":"&","%2B":"+","%2C":",","%3B":";","%3D":"=","%3A":":","%40":"@"}},decode:{expression:/[\/\?#]/g,map:{"/":"%2F","?":"%3F","#":"%23"}}},reserved:{encode:{expression:/%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/gi,map:{"%3A":":","%2F":"/","%3F":"?","%23":"#","%5B":"[","%5D":"]","%40":"@","%21":"!","%24":"$","%26":"&","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"="}}},urnpath:{encode:{expression:/%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/gi,map:{"%21":"!","%24":"$","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"=","%40":"@"}},decode:{expression:/[\/\?#:]/g,map:{"/":"%2F","?":"%3F","#":"%23",":":"%3A"}}}},i.encodeQuery=function(e,n){var t=i.encode(e+"");return void 0===n&&(n=i.escapeQuerySpace),n?t.replace(/%20/g,"+"):t},i.decodeQuery=function(e,n){e+="",void 0===n&&(n=i.escapeQuerySpace);try{return i.decode(n?e.replace(/\+/g,"%20"):e)}catch(n){return e}};var g,y={encode:"encode",decode:"decode"},b=function(e,n){return function(t){try{return i[n](t+"").replace(i.characters[e][n].expression,function(t){return i.characters[e][n].map[t]})}catch(e){return t}}};for(g in y)i[g+"PathSegment"]=b("pathname",y[g]),i[g+"UrnPathSegment"]=b("urnpath",y[g]);var x=function(e,n,t){return function(r){var a;a=t?function(e){return i[n](i[t](e))}:i[n];for(var o=(r+"").split(e),s=0,c=o.length;s<c;s++)o[s]=a(o[s]);return o.join(e)}};function w(e){return function(n,t){return void 0===n?this._parts[e]||"":(this._parts[e]=n||null,this.build(!t),this)}}function E(e,n){return function(t,r){return void 0===t?this._parts[e]||"":(null!==t&&(t+="").charAt(0)===n&&(t=t.substring(1)),this._parts[e]=t,this.build(!r),this)}}i.decodePath=x("/","decodePathSegment"),i.decodeUrnPath=x(":","decodeUrnPathSegment"),i.recodePath=x("/","encodePathSegment","decode"),i.recodeUrnPath=x(":","encodeUrnPathSegment","decode"),i.encodeReserved=b("reserved","encode"),i.parse=function(e,n){var t;return n||(n={preventInvalidHostname:i.preventInvalidHostname}),(t=e.indexOf("#"))>-1&&(n.fragment=e.substring(t+1)||null,e=e.substring(0,t)),(t=e.indexOf("?"))>-1&&(n.query=e.substring(t+1)||null,e=e.substring(0,t)),"//"===e.substring(0,2)?(n.protocol=null,e=e.substring(2),e=i.parseAuthority(e,n)):(t=e.indexOf(":"))>-1&&(n.protocol=e.substring(0,t)||null,n.protocol&&!n.protocol.match(i.protocol_expression)?n.protocol=void 0:"//"===e.substring(t+1,t+3)?(e=e.substring(t+3),e=i.parseAuthority(e,n)):(e=e.substring(t+1),n.urn=!0)),n.path=e,n},i.parseHost=function(e,n){e||(e="");var t,r,a=(e=e.replace(/\\/g,"/")).indexOf("/");if(-1===a&&(a=e.length),"["===e.charAt(0))t=e.indexOf("]"),n.hostname=e.substring(1,t)||null,n.port=e.substring(t+2,a)||null,"/"===n.port&&(n.port=null);else{var o=e.indexOf(":"),s=e.indexOf("/"),c=e.indexOf(":",o+1);-1!==c&&(-1===s||c<s)?(n.hostname=e.substring(0,a)||null,n.port=null):(r=e.substring(0,a).split(":"),n.hostname=r[0]||null,n.port=r[1]||null)}return n.hostname&&"/"!==e.substring(a).charAt(0)&&(a++,e="/"+e),n.preventInvalidHostname&&i.ensureValidHostname(n.hostname,n.protocol),n.port&&i.ensureValidPort(n.port),e.substring(a)||"/"},i.parseAuthority=function(e,n){return e=i.parseUserinfo(e,n),i.parseHost(e,n)},i.parseUserinfo=function(e,n){var t,r=e.indexOf("/"),a=e.lastIndexOf("@",r>-1?r:e.length-1);return a>-1&&(-1===r||a<r)?(t=e.substring(0,a).split(":"),n.username=t[0]?i.decode(t[0]):null,t.shift(),n.password=t[0]?i.decode(t.join(":")):null,e=e.substring(a+1)):(n.username=null,n.password=null),e},i.parseQuery=function(e,n){if(!e)return{};if(!(e=e.replace(/&+/g,"&").replace(/^\?*&*|&+$/g,"")))return{};for(var t,r,a,o={},c=e.split("&"),u=c.length,p=0;p<u;p++)t=c[p].split("="),r=i.decodeQuery(t.shift(),n),a=t.length?i.decodeQuery(t.join("="),n):null,s.call(o,r)?("string"!=typeof o[r]&&null!==o[r]||(o[r]=[o[r]]),o[r].push(a)):o[r]=a;return o},i.build=function(e){var n="";return e.protocol&&(n+=e.protocol+":"),e.urn||!n&&!e.hostname||(n+="//"),n+=i.buildAuthority(e)||"","string"==typeof e.path&&("/"!==e.path.charAt(0)&&"string"==typeof e.hostname&&(n+="/"),n+=e.path),"string"==typeof e.query&&e.query&&(n+="?"+e.query),"string"==typeof e.fragment&&e.fragment&&(n+="#"+e.fragment),n},i.buildHost=function(e){var n="";return e.hostname?(i.ip6_expression.test(e.hostname)?n+="["+e.hostname+"]":n+=e.hostname,e.port&&(n+=":"+e.port),n):""},i.buildAuthority=function(e){return i.buildUserinfo(e)+i.buildHost(e)},i.buildUserinfo=function(e){var n="";return e.username&&(n+=i.encode(e.username)),e.password&&(n+=":"+i.encode(e.password)),n&&(n+="@"),n},i.buildQuery=function(e,n,t){var r,a,o,c,u="";for(a in e)if(s.call(e,a)&&a)if(p(e[a]))for(r={},o=0,c=e[a].length;o<c;o++)void 0!==e[a][o]&&void 0===r[e[a][o]+""]&&(u+="&"+i.buildQueryParameter(a,e[a][o],t),!0!==n&&(r[e[a][o]+""]=!0));else void 0!==e[a]&&(u+="&"+i.buildQueryParameter(a,e[a],t));return u.substring(1)},i.buildQueryParameter=function(e,n,t){return i.encodeQuery(e,t)+(null!==n?"="+i.encodeQuery(n,t):"")},i.addQuery=function(e,n,t){if("object"==typeof n)for(var r in n)s.call(n,r)&&i.addQuery(e,r,n[r]);else{if("string"!=typeof n)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");if(void 0===e[n])return void(e[n]=t);"string"==typeof e[n]&&(e[n]=[e[n]]),p(t)||(t=[t]),e[n]=(e[n]||[]).concat(t)}},i.setQuery=function(e,n,t){if("object"==typeof n)for(var r in n)s.call(n,r)&&i.setQuery(e,r,n[r]);else{if("string"!=typeof n)throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");e[n]=void 0===t?null:t}},i.removeQuery=function(e,n,t){var r,a,o;if(p(n))for(r=0,a=n.length;r<a;r++)e[n[r]]=void 0;else if("RegExp"===u(n))for(o in e)n.test(o)&&(e[o]=void 0);else if("object"==typeof n)for(o in n)s.call(n,o)&&i.removeQuery(e,o,n[o]);else{if("string"!=typeof n)throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");void 0!==t?"RegExp"===u(t)?!p(e[n])&&t.test(e[n])?e[n]=void 0:e[n]=l(e[n],t):e[n]!==String(t)||p(t)&&1!==t.length?p(e[n])&&(e[n]=l(e[n],t)):e[n]=void 0:e[n]=void 0}},i.hasQuery=function(e,n,t,r){switch(u(n)){case"String":break;case"RegExp":for(var a in e)if(s.call(e,a)&&n.test(a)&&(void 0===t||i.hasQuery(e,a,t)))return!0;return!1;case"Object":for(var o in n)if(s.call(n,o)&&!i.hasQuery(e,o,n[o]))return!1;return!0;default:throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter")}switch(u(t)){case"Undefined":return n in e;case"Boolean":return t===Boolean(p(e[n])?e[n].length:e[n]);case"Function":return!!t(e[n],n,e);case"Array":return!!p(e[n])&&(r?f:d)(e[n],t);case"RegExp":return p(e[n])?!!r&&f(e[n],t):Boolean(e[n]&&e[n].match(t));case"Number":t=String(t);case"String":return p(e[n])?!!r&&f(e[n],t):e[n]===t;default:throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter")}},i.joinPaths=function(){for(var e=[],n=[],t=0,r=0;r<arguments.length;r++){var a=new i(arguments[r]);e.push(a);for(var o=a.segment(),s=0;s<o.length;s++)"string"==typeof o[s]&&n.push(o[s]),o[s]&&t++}if(!n.length||!t)return new i("");var c=new i("").segment(n);return""!==e[0].path()&&"/"!==e[0].path().slice(0,1)||c.path("/"+c.path()),c.normalize()},i.commonPath=function(e,n){var t,r=Math.min(e.length,n.length);for(t=0;t<r;t++)if(e.charAt(t)!==n.charAt(t)){t--;break}return t<1?e.charAt(0)===n.charAt(0)&&"/"===e.charAt(0)?"/":"":("/"===e.charAt(t)&&"/"===n.charAt(t)||(t=e.substring(0,t).lastIndexOf("/")),e.substring(0,t+1))},i.withinString=function(e,n,t){t||(t={});var r=t.start||i.findUri.start,a=t.end||i.findUri.end,o=t.trim||i.findUri.trim,s=t.parens||i.findUri.parens,c=/[a-z0-9-]=["']?$/i;for(r.lastIndex=0;;){var u=r.exec(e);if(!u)break;var p=u.index;if(t.ignoreHtml){var l=e.slice(Math.max(p-3,0),p);if(l&&c.test(l))continue}for(var f=p+e.slice(p).search(a),d=e.slice(p,f),m=-1;;){var h=s.exec(d);if(!h)break;var v=h.index+h[0].length;m=Math.max(m,v)}if(!((d=m>-1?d.slice(0,m)+d.slice(m).replace(o,""):d.replace(o,"")).length<=u[0].length||t.ignore&&t.ignore.test(d))){var g=n(d,p,f=p+d.length,e);void 0!==g?(g=String(g),e=e.slice(0,p)+g+e.slice(f),r.lastIndex=p+g.length):r.lastIndex=f}}return r.lastIndex=0,e},i.ensureValidHostname=function(n,t){var r=!!n,a=!1;if(!!t&&(a=f(i.hostProtocols,t)),a&&!r)throw new TypeError("Hostname cannot be empty, if protocol is "+t);if(n&&n.match(i.invalid_hostname_characters)){if(!e)throw new TypeError('Hostname "'+n+'" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');if(e.toASCII(n).match(i.invalid_hostname_characters))throw new TypeError('Hostname "'+n+'" contains characters other than [A-Z0-9.-:_]')}},i.ensureValidPort=function(e){if(e){var n=Number(e);if(!(/^[0-9]+$/.test(n)&&n>0&&n<65536))throw new TypeError('Port "'+e+'" is not a valid port')}},i.noConflict=function(e){if(e){var n={URI:this.noConflict()};return r.URITemplate&&"function"==typeof r.URITemplate.noConflict&&(n.URITemplate=r.URITemplate.noConflict()),r.IPv6&&"function"==typeof r.IPv6.noConflict&&(n.IPv6=r.IPv6.noConflict()),r.SecondLevelDomains&&"function"==typeof r.SecondLevelDomains.noConflict&&(n.SecondLevelDomains=r.SecondLevelDomains.noConflict()),n}return r.URI===this&&(r.URI=a),this},o.build=function(e){return!0===e?this._deferred_build=!0:(void 0===e||this._deferred_build)&&(this._string=i.build(this._parts),this._deferred_build=!1),this},o.clone=function(){return new i(this)},o.valueOf=o.toString=function(){return this.build(!1)._string},o.protocol=w("protocol"),o.username=w("username"),o.password=w("password"),o.hostname=w("hostname"),o.port=w("port"),o.query=E("query","?"),o.fragment=E("fragment","#"),o.search=function(e,n){var t=this.query(e,n);return"string"==typeof t&&t.length?"?"+t:t},o.hash=function(e,n){var t=this.fragment(e,n);return"string"==typeof t&&t.length?"#"+t:t},o.pathname=function(e,n){if(void 0===e||!0===e){var t=this._parts.path||(this._parts.hostname?"/":"");return e?(this._parts.urn?i.decodeUrnPath:i.decodePath)(t):t}return this._parts.urn?this._parts.path=e?i.recodeUrnPath(e):"":this._parts.path=e?i.recodePath(e):"/",this.build(!n),this},o.path=o.pathname,o.href=function(e,n){var t;if(void 0===e)return this.toString();this._string="",this._parts=i._parts();var r=e instanceof i,a="object"==typeof e&&(e.hostname||e.path||e.pathname);e.nodeName&&(e=e[i.getDomAttribute(e)]||"",a=!1);if(!r&&a&&void 0!==e.pathname&&(e=e.toString()),"string"==typeof e||e instanceof String)this._parts=i.parse(String(e),this._parts);else{if(!r&&!a)throw new TypeError("invalid input");var o=r?e._parts:e;for(t in o)"query"!==t&&s.call(this._parts,t)&&(this._parts[t]=o[t]);o.query&&this.query(o.query,!1)}return this.build(!n),this},o.is=function(e){var n=!1,r=!1,a=!1,o=!1,s=!1,c=!1,u=!1,p=!this._parts.urn;switch(this._parts.hostname&&(p=!1,r=i.ip4_expression.test(this._parts.hostname),a=i.ip6_expression.test(this._parts.hostname),s=(o=!(n=r||a))&&t&&t.has(this._parts.hostname),c=o&&i.idn_expression.test(this._parts.hostname),u=o&&i.punycode_expression.test(this._parts.hostname)),e.toLowerCase()){case"relative":return p;case"absolute":return!p;case"domain":case"name":return o;case"sld":return s;case"ip":return n;case"ip4":case"ipv4":case"inet4":return r;case"ip6":case"ipv6":case"inet6":return a;case"idn":return c;case"url":return!this._parts.urn;case"urn":return!!this._parts.urn;case"punycode":return u}return null};var O=o.protocol,T=o.port,_=o.hostname;o.protocol=function(e,n){if(e&&!(e=e.replace(/:(\/\/)?$/,"")).match(i.protocol_expression))throw new TypeError('Protocol "'+e+"\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");return O.call(this,e,n)},o.scheme=o.protocol,o.port=function(e,n){return this._parts.urn?void 0===e?"":this:(void 0!==e&&(0===e&&(e=null),e&&(":"===(e+="").charAt(0)&&(e=e.substring(1)),i.ensureValidPort(e))),T.call(this,e,n))},o.hostname=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0!==e){var t={preventInvalidHostname:this._parts.preventInvalidHostname};if("/"!==i.parseHost(e,t))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');e=t.hostname,this._parts.preventInvalidHostname&&i.ensureValidHostname(e,this._parts.protocol)}return _.call(this,e,n)},o.origin=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var t=this.protocol();return this.authority()?(t?t+"://":"")+this.authority():""}var r=i(e);return this.protocol(r.protocol()).authority(r.authority()).build(!n),this},o.host=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?i.buildHost(this._parts):"";if("/"!==i.parseHost(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!n),this},o.authority=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?i.buildAuthority(this._parts):"";if("/"!==i.parseAuthority(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!n),this},o.userinfo=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var t=i.buildUserinfo(this._parts);return t?t.substring(0,t.length-1):t}return"@"!==e[e.length-1]&&(e+="@"),i.parseUserinfo(e,this._parts),this.build(!n),this},o.resource=function(e,n){var t;return void 0===e?this.path()+this.search()+this.hash():(t=i.parse(e),this._parts.path=t.path,this._parts.query=t.query,this._parts.fragment=t.fragment,this.build(!n),this)},o.subdomain=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var t=this._parts.hostname.length-this.domain().length-1;return this._parts.hostname.substring(0,t)||""}var r=this._parts.hostname.length-this.domain().length,a=this._parts.hostname.substring(0,r),o=new RegExp("^"+c(a));if(e&&"."!==e.charAt(e.length-1)&&(e+="."),-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");return e&&i.ensureValidHostname(e,this._parts.protocol),this._parts.hostname=this._parts.hostname.replace(o,e),this.build(!n),this},o.domain=function(e,n){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(n=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var t=this._parts.hostname.match(/\./g);if(t&&t.length<2)return this._parts.hostname;var r=this._parts.hostname.length-this.tld(n).length-1;return r=this._parts.hostname.lastIndexOf(".",r-1)+1,this._parts.hostname.substring(r)||""}if(!e)throw new TypeError("cannot set domain empty");if(-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");if(i.ensureValidHostname(e,this._parts.protocol),!this._parts.hostname||this.is("IP"))this._parts.hostname=e;else{var a=new RegExp(c(this.domain())+"$");this._parts.hostname=this._parts.hostname.replace(a,e)}return this.build(!n),this},o.tld=function(e,n){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(n=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.lastIndexOf("."),a=this._parts.hostname.substring(r+1);return!0!==n&&t&&t.list[a.toLowerCase()]&&t.get(this._parts.hostname)||a}var i;if(!e)throw new TypeError("cannot set TLD empty");if(e.match(/[^a-zA-Z0-9-]/)){if(!t||!t.is(e))throw new TypeError('TLD "'+e+'" contains characters other than [A-Z0-9]');i=new RegExp(c(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,e)}else{if(!this._parts.hostname||this.is("IP"))throw new ReferenceError("cannot set TLD on non-domain host");i=new RegExp(c(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,e)}return this.build(!n),this},o.directory=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path&&!this._parts.hostname)return"";if("/"===this._parts.path)return"/";var t=this._parts.path.length-this.filename().length-1,r=this._parts.path.substring(0,t)||(this._parts.hostname?"/":"");return e?i.decodePath(r):r}var a=this._parts.path.length-this.filename().length,o=this._parts.path.substring(0,a),s=new RegExp("^"+c(o));return this.is("relative")||(e||(e="/"),"/"!==e.charAt(0)&&(e="/"+e)),e&&"/"!==e.charAt(e.length-1)&&(e+="/"),e=i.recodePath(e),this._parts.path=this._parts.path.replace(s,e),this.build(!n),this},o.filename=function(e,n){if(this._parts.urn)return void 0===e?"":this;if("string"!=typeof e){if(!this._parts.path||"/"===this._parts.path)return"";var t=this._parts.path.lastIndexOf("/"),r=this._parts.path.substring(t+1);return e?i.decodePathSegment(r):r}var a=!1;"/"===e.charAt(0)&&(e=e.substring(1)),e.match(/\.?\//)&&(a=!0);var o=new RegExp(c(this.filename())+"$");return e=i.recodePath(e),this._parts.path=this._parts.path.replace(o,e),a?this.normalizePath(n):this.build(!n),this},o.suffix=function(e,n){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path||"/"===this._parts.path)return"";var t,r,a=this.filename(),o=a.lastIndexOf(".");return-1===o?"":(t=a.substring(o+1),r=/^[a-z0-9%]+$/i.test(t)?t:"",e?i.decodePathSegment(r):r)}"."===e.charAt(0)&&(e=e.substring(1));var s,u=this.suffix();if(u)s=e?new RegExp(c(u)+"$"):new RegExp(c("."+u)+"$");else{if(!e)return this;this._parts.path+="."+i.recodePath(e)}return s&&(e=i.recodePath(e),this._parts.path=this._parts.path.replace(s,e)),this.build(!n),this},o.segment=function(e,n,t){var r=this._parts.urn?":":"/",a=this.path(),i="/"===a.substring(0,1),o=a.split(r);if(void 0!==e&&"number"!=typeof e&&(t=n,n=e,e=void 0),void 0!==e&&"number"!=typeof e)throw new Error('Bad segment "'+e+'", must be 0-based integer');if(i&&o.shift(),e<0&&(e=Math.max(o.length+e,0)),void 0===n)return void 0===e?o:o[e];if(null===e||void 0===o[e])if(p(n)){o=[];for(var s=0,c=n.length;s<c;s++)(n[s].length||o.length&&o[o.length-1].length)&&(o.length&&!o[o.length-1].length&&o.pop(),o.push(m(n[s])))}else(n||"string"==typeof n)&&(n=m(n),""===o[o.length-1]?o[o.length-1]=n:o.push(n));else n?o[e]=m(n):o.splice(e,1);return i&&o.unshift(""),this.path(o.join(r),t)},o.segmentCoded=function(e,n,t){var r,a,o;if("number"!=typeof e&&(t=n,n=e,e=void 0),void 0===n){if(p(r=this.segment(e,n,t)))for(a=0,o=r.length;a<o;a++)r[a]=i.decode(r[a]);else r=void 0!==r?i.decode(r):void 0;return r}if(p(n))for(a=0,o=n.length;a<o;a++)n[a]=i.encode(n[a]);else n="string"==typeof n||n instanceof String?i.encode(n):n;return this.segment(e,n,t)};var j=o.query;return o.query=function(e,n){if(!0===e)return i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("function"==typeof e){var t=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace),r=e.call(this,t);return this._parts.query=i.buildQuery(r||t,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!n),this}return void 0!==e&&"string"!=typeof e?(this._parts.query=i.buildQuery(e,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!n),this):j.call(this,e,n)},o.setQuery=function(e,n,t){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("string"==typeof e||e instanceof String)r[e]=void 0!==n?n:null;else{if("object"!=typeof e)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");for(var a in e)s.call(e,a)&&(r[a]=e[a])}return this._parts.query=i.buildQuery(r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(t=n),this.build(!t),this},o.addQuery=function(e,n,t){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.addQuery(r,e,void 0===n?null:n),this._parts.query=i.buildQuery(r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(t=n),this.build(!t),this},o.removeQuery=function(e,n,t){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.removeQuery(r,e,n),this._parts.query=i.buildQuery(r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(t=n),this.build(!t),this},o.hasQuery=function(e,n,t){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.hasQuery(r,e,n,t)},o.setSearch=o.setQuery,o.addSearch=o.addQuery,o.removeSearch=o.removeQuery,o.hasSearch=o.hasQuery,o.normalize=function(){return this._parts.urn?this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build():this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()},o.normalizeProtocol=function(e){return"string"==typeof this._parts.protocol&&(this._parts.protocol=this._parts.protocol.toLowerCase(),this.build(!e)),this},o.normalizeHostname=function(t){return this._parts.hostname&&(this.is("IDN")&&e?this._parts.hostname=e.toASCII(this._parts.hostname):this.is("IPv6")&&n&&(this._parts.hostname=n.best(this._parts.hostname)),this._parts.hostname=this._parts.hostname.toLowerCase(),this.build(!t)),this},o.normalizePort=function(e){return"string"==typeof this._parts.protocol&&this._parts.port===i.defaultPorts[this._parts.protocol]&&(this._parts.port=null,this.build(!e)),this},o.normalizePath=function(e){var n,t=this._parts.path;if(!t)return this;if(this._parts.urn)return this._parts.path=i.recodeUrnPath(this._parts.path),this.build(!e),this;if("/"===this._parts.path)return this;var r,a,o="";for("/"!==(t=i.recodePath(t)).charAt(0)&&(n=!0,t="/"+t),"/.."!==t.slice(-3)&&"/."!==t.slice(-2)||(t+="/"),t=t.replace(/(\/(\.\/)+)|(\/\.$)/g,"/").replace(/\/{2,}/g,"/"),n&&(o=t.substring(1).match(/^(\.\.\/)+/)||"")&&(o=o[0]);-1!==(r=t.search(/\/\.\.(\/|$)/));)0!==r?(-1===(a=t.substring(0,r).lastIndexOf("/"))&&(a=r),t=t.substring(0,a)+t.substring(r+3)):t=t.substring(3);return n&&this.is("relative")&&(t=o+t.substring(1)),this._parts.path=t,this.build(!e),this},o.normalizePathname=o.normalizePath,o.normalizeQuery=function(e){return"string"==typeof this._parts.query&&(this._parts.query.length?this.query(i.parseQuery(this._parts.query,this._parts.escapeQuerySpace)):this._parts.query=null,this.build(!e)),this},o.normalizeFragment=function(e){return this._parts.fragment||(this._parts.fragment=null,this.build(!e)),this},o.normalizeSearch=o.normalizeQuery,o.normalizeHash=o.normalizeFragment,o.iso8859=function(){var e=i.encode,n=i.decode;i.encode=escape,i.decode=decodeURIComponent;try{this.normalize()}finally{i.encode=e,i.decode=n}return this},o.unicode=function(){var e=i.encode,n=i.decode;i.encode=v,i.decode=unescape;try{this.normalize()}finally{i.encode=e,i.decode=n}return this},o.readable=function(){var n=this.clone();n.username("").password("").normalize();var t="";if(n._parts.protocol&&(t+=n._parts.protocol+"://"),n._parts.hostname&&(n.is("punycode")&&e?(t+=e.toUnicode(n._parts.hostname),n._parts.port&&(t+=":"+n._parts.port)):t+=n.host()),n._parts.hostname&&n._parts.path&&"/"!==n._parts.path.charAt(0)&&(t+="/"),t+=n.path(!0),n._parts.query){for(var r="",a=0,o=n._parts.query.split("&"),s=o.length;a<s;a++){var c=(o[a]||"").split("=");r+="&"+i.decodeQuery(c[0],this._parts.escapeQuerySpace).replace(/&/g,"%26"),void 0!==c[1]&&(r+="="+i.decodeQuery(c[1],this._parts.escapeQuerySpace).replace(/&/g,"%26"))}t+="?"+r.substring(1)}return t+=i.decodeQuery(n.hash(),!0)},o.absoluteTo=function(e){var n,t,r,a=this.clone(),o=["protocol","username","password","hostname","port"];if(this._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e instanceof i||(e=new i(e)),a._parts.protocol)return a;if(a._parts.protocol=e._parts.protocol,this._parts.hostname)return a;for(t=0;r=o[t];t++)a._parts[r]=e._parts[r];return a._parts.path?(".."===a._parts.path.substring(-2)&&(a._parts.path+="/"),"/"!==a.path().charAt(0)&&(n=(n=e.directory())||(0===e.path().indexOf("/")?"/":""),a._parts.path=(n?n+"/":"")+a._parts.path,a.normalizePath())):(a._parts.path=e._parts.path,a._parts.query||(a._parts.query=e._parts.query)),a.build(),a},o.relativeTo=function(e){var n,t,r,a,o,s=this.clone().normalize();if(s._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e=new i(e).normalize(),n=s._parts,t=e._parts,a=s.path(),o=e.path(),"/"!==a.charAt(0))throw new Error("URI is already relative");if("/"!==o.charAt(0))throw new Error("Cannot calculate a URI relative to another relative URI");if(n.protocol===t.protocol&&(n.protocol=null),n.username!==t.username||n.password!==t.password)return s.build();if(null!==n.protocol||null!==n.username||null!==n.password)return s.build();if(n.hostname!==t.hostname||n.port!==t.port)return s.build();if(n.hostname=null,n.port=null,a===o)return n.path="",s.build();if(!(r=i.commonPath(a,o)))return s.build();var c=t.path.substring(r.length).replace(/[^\/]*$/,"").replace(/.*?\//g,"../");return n.path=c+n.path.substring(r.length)||"./",s.build()},o.equals=function(e){var n,t,r,a,o,c=this.clone(),u=new i(e),l={};if(c.normalize(),u.normalize(),c.toString()===u.toString())return!0;if(r=c.query(),a=u.query(),c.query(""),u.query(""),c.toString()!==u.toString())return!1;if(r.length!==a.length)return!1;for(o in n=i.parseQuery(r,this._parts.escapeQuerySpace),t=i.parseQuery(a,this._parts.escapeQuerySpace),n)if(s.call(n,o)){if(p(n[o])){if(!d(n[o],t[o]))return!1}else if(n[o]!==t[o])return!1;l[o]=!0}for(o in t)if(s.call(t,o)&&!l[o])return!1;return!0},o.preventInvalidHostname=function(e){return this._parts.preventInvalidHostname=!!e,this},o.duplicateQueryParameters=function(e){return this._parts.duplicateQueryParameters=!!e,this},o.escapeQuerySpace=function(e){return this._parts.escapeQuerySpace=!!e,this},i})},function(e,n){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,n,t){var r=t(145);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,n){return s(i(e,n))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,n){for(var t,r=[],i=0,o=0,s="",p=n&&n.delimiter||"/";null!=(t=a.exec(e));){var l=t[0],f=t[1],d=t.index;if(s+=e.slice(o,d),o=d+l.length,f)s+=f[1];else{var m=e[o],h=t[2],v=t[3],g=t[4],y=t[5],b=t[6],x=t[7];s&&(r.push(s),s="");var w=null!=h&&null!=m&&m!==h,E="+"===b||"*"===b,O="?"===b||"*"===b,T=t[2]||p,_=g||y;r.push({name:v||i++,prefix:h||"",delimiter:T,optional:O,repeat:E,partial:w,asterisk:!!x,pattern:_?u(_):x?".*":"[^"+c(T)+"]+?"})}}return o<e.length&&(s+=e.substr(o)),s&&r.push(s),r}function o(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var n=new Array(e.length),t=0;t<e.length;t++)"object"==typeof e[t]&&(n[t]=new RegExp("^(?:"+e[t].pattern+")$"));return function(t,a){for(var i="",s=t||{},c=(a||{}).pretty?o:encodeURIComponent,u=0;u<e.length;u++){var p=e[u];if("string"!=typeof p){var l,f=s[p.name];if(null==f){if(p.optional){p.partial&&(i+=p.prefix);continue}throw new TypeError('Expected "'+p.name+'" to be defined')}if(r(f)){if(!p.repeat)throw new TypeError('Expected "'+p.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(p.optional)continue;throw new TypeError('Expected "'+p.name+'" to not be empty')}for(var d=0;d<f.length;d++){if(l=c(f[d]),!n[u].test(l))throw new TypeError('Expected all "'+p.name+'" to match "'+p.pattern+'", but received `'+JSON.stringify(l)+"`");i+=(0===d?p.prefix:p.delimiter)+l}}else{if(l=p.asterisk?encodeURI(f).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):c(f),!n[u].test(l))throw new TypeError('Expected "'+p.name+'" to match "'+p.pattern+'", but received "'+l+'"');i+=p.prefix+l}}else i+=p}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function p(e,n){return e.keys=n,e}function l(e){return e.sensitive?"":"i"}function f(e,n,t){r(n)||(t=n||t,n=[]);for(var a=(t=t||{}).strict,i=!1!==t.end,o="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)o+=c(u);else{var f=c(u.prefix),d="(?:"+u.pattern+")";n.push(u),u.repeat&&(d+="(?:"+f+d+")*"),o+=d=u.optional?u.partial?f+"("+d+")?":"(?:"+f+"("+d+"))?":f+"("+d+")"}}var m=c(t.delimiter||"/"),h=o.slice(-m.length)===m;return a||(o=(h?o.slice(0,-m.length):o)+"(?:"+m+"(?=$))?"),o+=i?"$":a&&h?"":"(?="+m+"|$)",p(new RegExp("^"+o,l(t)),n)}function d(e,n,t){return r(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return p(e,n)}(e,n):r(e)?function(e,n,t){for(var r=[],a=0;a<e.length;a++)r.push(d(e[a],n,t).source);return p(new RegExp("(?:"+r.join("|")+")",l(t)),n)}(e,n,t):function(e,n,t){return f(i(e,t),n,t)}(e,n,t)}},function(e,n,t){var r=t(70)("koa-router"),a=t(146),i=t(144);function o(e,n,t,i){this.opts=i||{},this.name=this.opts.name||null,this.methods=[],this.paramNames=[],this.stack=Array.isArray(t)?t:[t],n.forEach(function(e){var n=this.methods.push(e.toUpperCase());"GET"===this.methods[n-1]&&this.methods.unshift("HEAD")},this),this.stack.forEach(function(t){var r=typeof t;if("function"!==r)throw new Error(n.toString()+" `"+(this.opts.name||e)+"`: `middleware` must be a function, not `"+r+"`")},this),this.path=e,this.regexp=a(e,this.paramNames,this.opts),r("defined route %s %s",this.methods,this.opts.prefix+this.path)}function s(e){try{return decodeURIComponent(e)}catch(n){return e}}e.exports=o,o.prototype.match=function(e){return this.regexp.test(e)},o.prototype.params=function(e,n,t){for(var r=t||{},a=n.length,i=0;i<a;i++)if(this.paramNames[i]){var o=n[i];r[this.paramNames[i].name]=o?s(o):o}return r},o.prototype.captures=function(e){return this.opts.ignoreCaptures?[]:e.match(this.regexp).slice(1)},o.prototype.url=function(e,n){var t=e,r=this.path.replace(/\(\.\*\)/g,""),o=a.compile(r);"object"!=typeof e&&"object"==typeof(t=Array.prototype.slice.call(arguments))[t.length-1]&&(n=t[t.length-1],t=t.slice(0,t.length-1));var s,c=a.parse(r),u={};if(t instanceof Array)for(var p=c.length,l=0,f=0;l<p;l++)c[l].name&&(u[c[l].name]=t[f++]);else c.some(e=>e.name)?u=e:n=e;return s=o(u),n&&n.query?((s=new i(s)).search(n.query),s.toString()):s},o.prototype.param=function(e,n){var t=this.stack,r=this.paramNames,a=function(t,r){return n.call(this,t.params[e],t,r)};a.param=e;var i=r.map(function(e){return e.name}),o=i.indexOf(e);return o>-1&&t.some(function(e,n){if(!e.param||i.indexOf(e.param)>o)return t.splice(n,0,a),!0}),this},o.prototype.setPrefix=function(e){return this.path&&(this.path=e+this.path,this.paramNames=[],this.regexp=a(this.path,this.paramNames,this.opts)),this}},function(e,n,t){"use strict";
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(39);e.exports=r.METHODS&&r.METHODS.map(function(e){return e.toLowerCase()})||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},function(e,n,t){"use strict";const r=t(71);e.exports=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");for(const n of e)if("function"!=typeof n)throw new TypeError("Middleware must be composed of functions!");return function(n,t){let a=-1;return function i(o){if(o<=a)return r.reject(new Error("next() called multiple times"));a=o;let s=e[o];o===e.length&&(s=t);if(!s)return r.resolve();try{return r.resolve(s(n,function(){return i(o+1)}))}catch(e){return r.reject(e)}}(0)}}},function(e,n,t){"use strict";var r=process.argv,a=r.indexOf("--"),i=function(e){e="--"+e;var n=r.indexOf(e);return-1!==n&&(-1===a||n<a)};e.exports="FORCE_COLOR"in process.env||!(i("no-color")||i("no-colors")||i("color=false"))&&(!!(i("color")||i("colors")||i("color=true")||i("color=always"))||!(process.stdout&&!process.stdout.isTTY)&&("win32"===process.platform||"COLORTERM"in process.env||"dumb"!==process.env.TERM&&!!/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)))},function(e,n,t){var r=t(80),a=t(28);(n=e.exports=t(69)).init=function(e){e.inspectOpts={};for(var t=Object.keys(n.inspectOpts),r=0;r<t.length;r++)e.inspectOpts[t[r]]=n.inspectOpts[t[r]]},n.log=function(){return process.stderr.write(a.format.apply(a,arguments)+"\n")},n.formatArgs=function(e){var t=this.namespace;if(this.useColors){var r=this.color,a="[3"+(r<8?r:"8;5;"+r),i="  "+a+";1m"+t+" [0m";e[0]=i+e[0].split("\n").join("\n"+i),e.push(a+"m+"+n.humanize(this.diff)+"[0m")}else e[0]=(n.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+t+" "+e[0]},n.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},n.load=o,n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):r.isatty(process.stderr.fd)},n.colors=[6,2,3,4,5,1];try{var i=t(150);i&&i.level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}function o(){return process.env.DEBUG}n.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,n){var t=n.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,n){return n.toUpperCase()}),r=process.env[n];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[t]=r,e},{}),n.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).split("\n").map(function(e){return e.trim()}).join(" ")},n.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)},n.enable(o())},function(e,n,t){function r(){var e;try{e=n.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(n=e.exports=t(69)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),!t)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var a=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++a)}),e.splice(i,0,r)},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=r,n.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(r())},function(e,n,t){var r=t(70)("koa-router"),a=t(149),i=t(43),o=t(148),s=t(147);function c(e){if(!(this instanceof c))return new c(e);this.opts=e||{},this.methods=this.opts.methods||["HEAD","OPTIONS","GET","PUT","PATCH","POST","DELETE"],this.params={},this.stack=[]}e.exports=c,o.forEach(function(e){c.prototype[e]=function(n,t,r){return"string"==typeof t||t instanceof RegExp?r=Array.prototype.slice.call(arguments,2):(r=Array.prototype.slice.call(arguments,1),t=n,n=null),this.register(t,[e],r,{name:n}),this}}),c.prototype.del=c.prototype.delete,c.prototype.use=function(){var e,n=this,t=Array.prototype.slice.call(arguments);if(Array.isArray(t[0])&&"string"==typeof t[0][0])return t[0].forEach(function(e){n.use.apply(n,[e].concat(t.slice(1)))}),this;var r="string"==typeof t[0];return r&&(e=t.shift()),t.forEach(function(t){t.router?(t.router.stack.forEach(function(t){e&&t.setPrefix(e),n.opts.prefix&&t.setPrefix(n.opts.prefix),n.stack.push(t)}),n.params&&Object.keys(n.params).forEach(function(e){t.router.param(e,n.params[e])})):n.register(e||"(.*)",[],t,{end:!1,ignoreCaptures:!r})}),this},c.prototype.prefix=function(e){return e=e.replace(/\/$/,""),this.opts.prefix=e,this.stack.forEach(function(n){n.setPrefix(e)}),this},c.prototype.routes=c.prototype.middleware=function(){var e=this,n=function(n,t){r("%s %s",n.method,n.path);var i,o=e.opts.routerPath||n.routerPath||n.path,s=e.match(o,n.method);if(n.matched?n.matched.push.apply(n.matched,s.path):n.matched=s.path,n.router=e,!s.route)return t();var c=s.pathAndMethod,u=c[c.length-1];return n._matchedRoute=u.path,u.name&&(n._matchedRouteName=u.name),i=c.reduce(function(e,n){return e.push(function(e,t){return e.captures=n.captures(o,e.captures),e.params=n.params(o,e.captures,e.params),e.routerName=n.name,t()}),e.concat(n.stack)},[]),a(i)(n,t)};return n.router=this,n},c.prototype.allowedMethods=function(e){e=e||{};var n=this.methods;return function(t,r){return r().then(function(){var r={};if(!t.status||404===t.status){t.matched.forEach(function(e){e.methods.forEach(function(e){r[e]=e})});var a=Object.keys(r);if(~n.indexOf(t.method)){if(a.length)if("OPTIONS"===t.method)t.status=200,t.body="",t.set("Allow",a.join(", "));else if(!r[t.method]){if(e.throw)throw"function"==typeof e.methodNotAllowed?e.methodNotAllowed():new i.MethodNotAllowed;t.status=405,t.set("Allow",a.join(", "))}}else{if(e.throw)throw"function"==typeof e.notImplemented?e.notImplemented():new i.NotImplemented;t.status=501,t.set("Allow",a.join(", "))}}})}},c.prototype.all=function(e,n,t){return"string"==typeof n?t=Array.prototype.slice.call(arguments,2):(t=Array.prototype.slice.call(arguments,1),n=e,e=null),this.register(n,o,t,{name:e}),this},c.prototype.redirect=function(e,n,t){return"/"!==e[0]&&(e=this.url(e)),"/"!==n[0]&&(n=this.url(n)),this.all(e,e=>{e.redirect(n),e.status=t||301})},c.prototype.register=function(e,n,t,r){r=r||{};var a=this,i=this.stack;if(Array.isArray(e))return e.forEach(function(e){a.register.call(a,e,n,t,r)}),this;var o=new s(e,n,t,{end:!1!==r.end||r.end,name:r.name,sensitive:r.sensitive||this.opts.sensitive||!1,strict:r.strict||this.opts.strict||!1,prefix:r.prefix||this.opts.prefix||"",ignoreCaptures:r.ignoreCaptures});return this.opts.prefix&&o.setPrefix(this.opts.prefix),Object.keys(this.params).forEach(function(e){o.param(e,this.params[e])},this),i.push(o),o},c.prototype.route=function(e){for(var n=this.stack,t=n.length,r=0;r<t;r++)if(n[r].name&&n[r].name===e)return n[r];return!1},c.prototype.url=function(e,n){var t=this.route(e);if(t){var r=Array.prototype.slice.call(arguments,1);return t.url.apply(t,r)}return new Error("No route found for name: "+e)},c.prototype.match=function(e,n){for(var t,a=this.stack,i={path:[],pathAndMethod:[],route:!1},o=a.length,s=0;s<o;s++)t=a[s],r("test %s %s",t.path,t.regexp),t.match(e)&&(i.path.push(t),(0===t.methods.length||~t.methods.indexOf(n))&&(i.pathAndMethod.push(t),t.methods.length&&(i.route=!0)));return i},c.prototype.param=function(e,n){return this.params[e]=n,this.stack.forEach(function(t){t.param(e,n)}),this},c.url=function(e,n){return s.prototype.url.call({path:e},n)}},function(e,n){function t(e){var n=new Error('Cannot find module "'+e+'".');throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=154},function(e,n,t){"use strict";var r=null;e.exports=function(e,n){return function(t,a){t=t||null;var i=!1!==(a=a||{}).global;if(null===r&&i&&(r=e["@@any-promise/REGISTRATION"]||null),null!==r&&null!==t&&r.implementation!==t)throw new Error('any-promise already defined as "'+r.implementation+'".  You can only register an implementation before the first  call to require("any-promise") and an implementation cannot be changed');return null===r&&(r=null!==t&&void 0!==a.Promise?{Promise:a.Promise,implementation:t}:n(t),i&&(e["@@any-promise/REGISTRATION"]=r)),r}}},function(e,n,t){"use strict";function r(e){var n=null;if(function(e){if(e)return"global.Promise"===e;if(void 0!==global.Promise){var n=/v(\d+)\.(\d+)\.(\d+)/.exec(process.version);return!(n&&0==+n[1]&&+n[2]<12)}return!1}(e))n={Promise:global.Promise,implementation:"global.Promise"};else if(e){var a=t(154)(e);n={Promise:a.Promise||a,implementation:e}}else n=function(){for(var e=["es6-promise","promise","native-promise-only","bluebird","rsvp","when","q","pinkie","lie","vow"],n=0,t=e.length;n<t;n++)try{return r(e[n])}catch(e){}return null}();if(null===n)throw new Error('Cannot find any-promise implementation nor global.Promise. You must install polyfill or call require("any-promise/register") with your preferred implementation, e.g. require("any-promise/register/bluebird") on application load prior to any require("any-promise").');return n}e.exports=t(155)(global,r)},function(e,n,t){"use strict";const r=t(71);e.exports=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");for(const n of e)if("function"!=typeof n)throw new TypeError("Middleware must be composed of functions!");return function(n,t){let a=-1;return function i(o){if(o<=a)return r.reject(new Error("next() called multiple times"));a=o;let s=e[o];o===e.length&&(s=t);if(!s)return r.resolve();try{return r.resolve(s(n,function(){return i(o+1)}))}catch(e){return r.reject(e)}}(0)}}},function(e,n){var t=Array.prototype.slice;function r(e){var n=this,r=t.call(arguments,1);return new Promise(function(t,o){if("function"==typeof e&&(e=e.apply(n,r)),!e||"function"!=typeof e.next)return t(e);function s(n){var t;try{t=e.next(n)}catch(e){return o(e)}u(t)}function c(n){var t;try{t=e.throw(n)}catch(e){return o(e)}u(t)}function u(e){if(e.done)return t(e.value);var r=a.call(n,e.value);return r&&i(r)?r.then(s,c):c(new TypeError('You may only yield a function, promise, generator, array, or object, but the following object was passed: "'+String(e.value)+'"'))}s()})}function a(e){return e?i(e)?e:function(e){var n=e.constructor;return!!n&&("GeneratorFunction"===n.name||"GeneratorFunction"===n.displayName||o(n.prototype))}(e)||o(e)?r.call(this,e):"function"==typeof e?function(e){var n=this;return new Promise(function(r,a){e.call(n,function(e,n){if(e)return a(e);arguments.length>2&&(n=t.call(arguments,1)),r(n)})})}.call(this,e):Array.isArray(e)?function(e){return Promise.all(e.map(a,this))}.call(this,e):Object==e.constructor?function(e){for(var n=new e.constructor,t=Object.keys(e),r=[],o=0;o<t.length;o++){var s=t[o],c=a.call(this,e[s]);c&&i(c)?u(c,s):n[s]=e[s]}return Promise.all(r).then(function(){return n});function u(e,t){n[t]=void 0,r.push(e.then(function(e){n[t]=e}))}}.call(this,e):e:e}function i(e){return"function"==typeof e.then}function o(e){return"function"==typeof e.next&&"function"==typeof e.throw}e.exports=r.default=r.co=r,r.wrap=function(e){return n.__generatorFunction__=e,n;function n(){return r.call(this,e.apply(this,arguments))}}},function(e,n,t){"use strict";const r=t(158),a=t(157);function i(e){if("function"!=typeof e)throw new TypeError("middleware must be a function");if("GeneratorFunction"!==e.constructor.name)return e;const n=function(n,t){return r.call(n,e.call(n,function*(e){return yield e()}(t)))};return n._name=e._name||e.name,n}e.exports=i,i.compose=function(e){return Array.isArray(e)||(e=Array.from(arguments)),a(e.map(i))},i.back=function(e){if("function"!=typeof e)throw new TypeError("middleware must be a function");if("GeneratorFunction"===e.constructor.name)return e;const n=function*(n){let t=this,a=!1;yield Promise.resolve(e(t,function(){return a?Promise.reject(new Error("next() called multiple times")):(a=!0,r.call(t,n))}))};return n._name=e._name||e.name,n}},function(e,n,t){"use strict";e.exports=s,e.exports.preferredMediaTypes=s;var r=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;function a(e){for(var n=function(e){for(var n=e.split(","),t=1,r=0;t<n.length;t++)l(n[r])%2==0?n[++r]=n[t]:n[r]+=","+n[t];return n.length=r+1,n}(e),t=0,r=0;t<n.length;t++){var a=i(n[t].trim(),t);a&&(n[r++]=a)}return n.length=r,n}function i(e,n){var t=r.exec(e);if(!t)return null;var a=Object.create(null),i=1,o=t[2],s=t[1];if(t[3])for(var c=function(e){for(var n=e.split(";"),t=1,r=0;t<n.length;t++)l(n[r])%2==0?n[++r]=n[t]:n[r]+=";"+n[t];n.length=r+1;for(var t=0;t<n.length;t++)n[t]=n[t].trim();return n}(t[3]).map(f),u=0;u<c.length;u++){var p=c[u],d=p[0].toLowerCase(),m=p[1],h=m&&'"'===m[0]&&'"'===m[m.length-1]?m.substr(1,m.length-2):m;if("q"===d){i=parseFloat(h);break}a[d]=h}return{type:s,subtype:o,params:a,q:i,i:n}}function o(e,n,t){var r=i(e),a=0;if(!r)return null;if(n.type.toLowerCase()==r.type.toLowerCase())a|=4;else if("*"!=n.type)return null;if(n.subtype.toLowerCase()==r.subtype.toLowerCase())a|=2;else if("*"!=n.subtype)return null;var o=Object.keys(n.params);if(o.length>0){if(!o.every(function(e){return"*"==n.params[e]||(n.params[e]||"").toLowerCase()==(r.params[e]||"").toLowerCase()}))return null;a|=1}return{i:t,o:n.i,q:n.q,s:a}}function s(e,n){var t=a(void 0===e?"*/*":e||"");if(!n)return t.filter(p).sort(c).map(u);var r=n.map(function(e,n){return function(e,n,t){for(var r={o:-1,q:0,s:0},a=0;a<n.length;a++){var i=o(e,n[a],t);i&&(r.s-i.s||r.q-i.q||r.o-i.o)<0&&(r=i)}return r}(e,t,n)});return r.filter(p).sort(c).map(function(e){return n[r.indexOf(e)]})}function c(e,n){return n.q-e.q||n.s-e.s||e.o-n.o||e.i-n.i||0}function u(e){return e.type+"/"+e.subtype}function p(e){return e.q>0}function l(e){for(var n=0,t=0;-1!==(t=e.indexOf('"',t));)n++,t++;return n}function f(e){var n,t,r=e.indexOf("=");return-1===r?n=e:(n=e.substr(0,r),t=e.substr(r+1)),[n,t]}},function(e,n,t){"use strict";e.exports=o,e.exports.preferredLanguages=o;var r=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;function a(e,n){var t=r.exec(e);if(!t)return null;var a=t[1],i=t[2],o=a;i&&(o+="-"+i);var s=1;if(t[3]){var c=t[3].split(";");for(n=0;n<c.length;n++){var u=c[n].split("=");"q"===u[0]&&(s=parseFloat(u[1]))}}return{prefix:a,suffix:i,q:s,i:n,full:o}}function i(e,n,t){var r=a(e);if(!r)return null;var i=0;if(n.full.toLowerCase()===r.full.toLowerCase())i|=4;else if(n.prefix.toLowerCase()===r.full.toLowerCase())i|=2;else if(n.full.toLowerCase()===r.prefix.toLowerCase())i|=1;else if("*"!==n.full)return null;return{i:t,o:n.i,q:n.q,s:i}}function o(e,n){var t=function(e){for(var n=e.split(","),t=0,r=0;t<n.length;t++){var i=a(n[t].trim(),t);i&&(n[r++]=i)}return n.length=r,n}(void 0===e?"*":e||"");if(!n)return t.filter(u).sort(s).map(c);var r=n.map(function(e,n){return function(e,n,t){for(var r={o:-1,q:0,s:0},a=0;a<n.length;a++){var o=i(e,n[a],t);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,t,n)});return r.filter(u).sort(s).map(function(e){return n[r.indexOf(e)]})}function s(e,n){return n.q-e.q||n.s-e.s||e.o-n.o||e.i-n.i||0}function c(e){return e.full}function u(e){return e.q>0}},function(e,n,t){"use strict";e.exports=o,e.exports.preferredEncodings=o;var r=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function a(e,n){var t=r.exec(e);if(!t)return null;var a=t[1],i=1;if(t[2]){var o=t[2].split(";");for(n=0;n<o.length;n++){var s=o[n].trim().split("=");if("q"===s[0]){i=parseFloat(s[1]);break}}}return{encoding:a,q:i,i:n}}function i(e,n,t){var r=0;if(n.encoding.toLowerCase()===e.toLowerCase())r|=1;else if("*"!==n.encoding)return null;return{i:t,o:n.i,q:n.q,s:r}}function o(e,n){var t=function(e){for(var n=e.split(","),t=!1,r=1,o=0,s=0;o<n.length;o++){var c=a(n[o].trim(),o);c&&(n[s++]=c,t=t||i("identity",c),r=Math.min(r,c.q||1))}return t||(n[s++]={encoding:"identity",q:r,i:o}),n.length=s,n}(e||"");if(!n)return t.filter(u).sort(s).map(c);var r=n.map(function(e,n){return function(e,n,t){for(var r={o:-1,q:0,s:0},a=0;a<n.length;a++){var o=i(e,n[a],t);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,t,n)});return r.filter(u).sort(s).map(function(e){return n[r.indexOf(e)]})}function s(e,n){return n.q-e.q||n.s-e.s||e.o-n.o||e.i-n.i||0}function c(e){return e.encoding}function u(e){return e.q>0}},function(e,n,t){"use strict";e.exports=o,e.exports.preferredCharsets=o;var r=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function a(e,n){var t=r.exec(e);if(!t)return null;var a=t[1],i=1;if(t[2]){var o=t[2].split(";");for(n=0;n<o.length;n++){var s=o[n].trim().split("=");if("q"===s[0]){i=parseFloat(s[1]);break}}}return{charset:a,q:i,i:n}}function i(e,n,t){var r=0;if(n.charset.toLowerCase()===e.toLowerCase())r|=1;else if("*"!==n.charset)return null;return{i:t,o:n.i,q:n.q,s:r}}function o(e,n){var t=function(e){for(var n=e.split(","),t=0,r=0;t<n.length;t++){var i=a(n[t].trim(),t);i&&(n[r++]=i)}return n.length=r,n}(void 0===e?"*":e||"");if(!n)return t.filter(u).sort(s).map(c);var r=n.map(function(e,n){return function(e,n,t){for(var r={o:-1,q:0,s:0},a=0;a<n.length;a++){var o=i(e,n[a],t);o&&(r.s-o.s||r.q-o.q||r.o-o.o)<0&&(r=o)}return r}(e,t,n)});return r.filter(u).sort(s).map(function(e){return n[r.indexOf(e)]})}function s(e,n){return n.q-e.q||n.s-e.s||e.o-n.o||e.i-n.i||0}function c(e){return e.charset}function u(e){return e.q>0}},function(e,n,t){"use strict";
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=Object.create(null);function a(e){if(!(this instanceof a))return new a(e);this.request=e}function i(e){var n=r[e];if(void 0!==n)return n;switch(e){case"charset":n=t(163);break;case"encoding":n=t(162);break;case"language":n=t(161);break;case"mediaType":n=t(160);break;default:throw new Error("Cannot find module '"+e+"'")}return r[e]=n,n}e.exports=a,e.exports.Negotiator=a,a.prototype.charset=function(e){var n=this.charsets(e);return n&&n[0]},a.prototype.charsets=function(e){return(0,i("charset").preferredCharsets)(this.request.headers["accept-charset"],e)},a.prototype.encoding=function(e){var n=this.encodings(e);return n&&n[0]},a.prototype.encodings=function(e){return(0,i("encoding").preferredEncodings)(this.request.headers["accept-encoding"],e)},a.prototype.language=function(e){var n=this.languages(e);return n&&n[0]},a.prototype.languages=function(e){return(0,i("language").preferredLanguages)(this.request.headers["accept-language"],e)},a.prototype.mediaType=function(e){var n=this.mediaTypes(e);return n&&n[0]},a.prototype.mediaTypes=function(e){return(0,i("mediaType").preferredMediaTypes)(this.request.headers.accept,e)},a.prototype.preferredCharset=a.prototype.charset,a.prototype.preferredCharsets=a.prototype.charsets,a.prototype.preferredEncoding=a.prototype.encoding,a.prototype.preferredEncodings=a.prototype.encodings,a.prototype.preferredLanguage=a.prototype.language,a.prototype.preferredLanguages=a.prototype.languages,a.prototype.preferredMediaType=a.prototype.mediaType,a.prototype.preferredMediaTypes=a.prototype.mediaTypes},function(e,n,t){"use strict";
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(164),a=t(46);function i(e){if(!(this instanceof i))return new i(e);this.headers=e.headers,this.negotiator=new r(e)}function o(e){return-1===e.indexOf("/")?a.lookup(e):e}function s(e){return"string"==typeof e}e.exports=i,i.prototype.type=i.prototype.types=function(e){var n=e;if(n&&!Array.isArray(n)){n=new Array(arguments.length);for(var t=0;t<n.length;t++)n[t]=arguments[t]}if(!n||0===n.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return n[0];var r=n.map(o),a=this.negotiator.mediaTypes(r.filter(s))[0];return!!a&&n[r.indexOf(a)]},i.prototype.encoding=i.prototype.encodings=function(e){var n=e;if(n&&!Array.isArray(n)){n=new Array(arguments.length);for(var t=0;t<n.length;t++)n[t]=arguments[t]}return n&&0!==n.length?this.negotiator.encodings(n)[0]||!1:this.negotiator.encodings()},i.prototype.charset=i.prototype.charsets=function(e){var n=e;if(n&&!Array.isArray(n)){n=new Array(arguments.length);for(var t=0;t<n.length;t++)n[t]=arguments[t]}return n&&0!==n.length?this.negotiator.charsets(n)[0]||!1:this.negotiator.charsets()},i.prototype.lang=i.prototype.langs=i.prototype.language=i.prototype.languages=function(e){var n=e;if(n&&!Array.isArray(n)){n=new Array(arguments.length);for(var t=0;t<n.length;t++)n[t]=arguments[t]}return n&&0!==n.length?this.negotiator.languages(n)[0]||!1:this.negotiator.languages()}},function(e,n,t){
/*!
 * keygrip
 * Copyright(c) 2011-2014 Jed Schmidt
 * MIT Licensed
 */
var r=t(72);function a(e,n,t){if(n||(n="sha1"),t||(t="base64"),!(this instanceof a))return new a(e,n,t);if(!(e&&0 in e))throw new Error("Keys must be provided.");function o(e,a){return r.createHmac(n,a).update(e).digest(t).replace(/\/|\+|=/g,function(e){return{"/":"_","+":"-","=":""}[e]})}this.sign=function(n){return o(n,e[0])},this.verify=function(e,n){return this.index(e,n)>-1},this.index=function(n,t){for(var r=0,a=e.length;r<a;r++)if(i(t,o(n,e[r])))return r;return-1}}a.sign=a.verify=a.index=function(){throw new Error("Usage: require('keygrip')(<array-of-keys>)")};var i=function(e,n){if(null==e&&null!=n)return!1;if(null==n&&null!=e)return!1;if(null==e&&null==n)return!0;if(e.length!==n.length)return!1;for(var t=0,r=0;r<e.length;r++)t|=e.charCodeAt(r)^n.charCodeAt(r);return 0===t};e.exports=a},function(e,n,t){"use strict";
/*!
 * cookies
 * Copyright(c) 2014 Jed Schmidt, http://jed.is/
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(42)("cookies"),a=t(166),i=t(39),o={},s=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,c=/^(?:lax|strict)$/i;function u(e,n,t){if(!(this instanceof u))return new u(e,n,t);this.secure=void 0,this.request=e,this.response=n,t&&(Array.isArray(t)?(r('"keys" argument; provide using options {"keys": [...]}'),this.keys=new a(t)):t.constructor&&"Keygrip"===t.constructor.name?(r('"keys" argument; provide using options {"keys": keygrip}'),this.keys=t):(this.keys=Array.isArray(t.keys)?new a(t.keys):t.keys,this.secure=t.secure))}function p(e,n,t){if(!s.test(e))throw new TypeError("argument name is invalid");if(n&&!s.test(n))throw new TypeError("argument value is invalid");for(var e in n||(this.expires=new Date(0)),this.name=e,this.value=n||"",t)this[e]=t[e];if(this.path&&!s.test(this.path))throw new TypeError("option path is invalid");if(this.domain&&!s.test(this.domain))throw new TypeError("option domain is invalid");if(this.sameSite&&!0!==this.sameSite&&!c.test(this.sameSite))throw new TypeError("option sameSite is invalid")}function l(e,n){return n.overwrite&&(e=e.filter(function(e){return 0!==e.indexOf(n.name+"=")})),e.push(n.toHeader()),e}u.prototype.get=function(e,n){var t,r,a,i,s,c,u=e+".sig",p=n&&void 0!==n.signed?n.signed:!!this.keys;if((t=this.request.headers.cookie)&&(r=t.match(function(e){return o[e]?o[e]:o[e]=new RegExp("(?:^|;) *"+e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")+"=([^;]*)")}(e)))){if(a=r[1],!n||!p)return a;if(i=this.get(u)){if(s=e+"="+a,!this.keys)throw new Error(".keys required for signed cookies");if(!((c=this.keys.index(s,i))<0))return c&&this.set(u,this.keys.sign(s),{signed:!1}),a;this.set(u,null,{path:"/",signed:!1})}}},u.prototype.set=function(e,n,t){var a=this.response,o=this.request,s=a.getHeader("Set-Cookie")||[],c=void 0!==this.secure?!!this.secure:"https"===o.protocol||o.connection.encrypted,u=new p(e,n,t),f=t&&void 0!==t.signed?t.signed:!!this.keys;if("string"==typeof s&&(s=[s]),!c&&t&&t.secure)throw new Error("Cannot send secure cookie over unencrypted connection");if(u.secure=c,t&&"secure"in t&&(u.secure=t.secure),t&&"secureProxy"in t&&(r('"secureProxy" option; use "secure" option, provide "secure" to constructor if needed'),u.secure=t.secureProxy),s=l(s,u),t&&f){if(!this.keys)throw new Error(".keys required for signed cookies");u.value=this.keys.sign(u.toString()),u.name+=".sig",s=l(s,u)}return(a.set?i.OutgoingMessage.prototype.setHeader:a.setHeader).call(a,"Set-Cookie",s),this},p.prototype.path="/",p.prototype.expires=void 0,p.prototype.domain=void 0,p.prototype.httpOnly=!0,p.prototype.sameSite=!1,p.prototype.secure=!1,p.prototype.overwrite=!1,p.prototype.toString=function(){return this.name+"="+this.value},p.prototype.toHeader=function(){var e=this.toString();return this.maxAge&&(this.expires=new Date(Date.now()+this.maxAge)),this.path&&(e+="; path="+this.path),this.expires&&(e+="; expires="+this.expires.toUTCString()),this.domain&&(e+="; domain="+this.domain),this.sameSite&&(e+="; samesite="+(!0===this.sameSite?"strict":this.sameSite.toLowerCase())),this.secure&&(e+="; secure"),this.httpOnly&&(e+="; httponly"),e},Object.defineProperty(p.prototype,"maxage",{configurable:!0,enumerable:!0,get:function(){return this.maxAge},set:function(e){return this.maxAge=e}}),r.property(p.prototype,"maxage",'"maxage"; use "maxAge" instead'),u.connect=u.express=function(e){return function(n,t,r){n.cookies=t.cookies=new u(n,t,{keys:e}),r()}},u.Cookie=p,e.exports=u},function(e,n,t){"use strict";
/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var r=/(?:^|,)\s*?no-cache\s*?(?:,|$)/;function a(e){var n=e&&Date.parse(e);return"number"==typeof n?n:NaN}e.exports=function(e,n){var t=e["if-modified-since"],i=e["if-none-match"];if(!t&&!i)return!1;var o=e["cache-control"];if(o&&r.test(o))return!1;if(i&&"*"!==i){var s=n.etag;if(!s)return!1;for(var c=!0,u=function(e){for(var n=0,t=[],r=0,a=0,i=e.length;a<i;a++)switch(e.charCodeAt(a)){case 32:r===n&&(r=n=a+1);break;case 44:t.push(e.substring(r,n)),r=n=a+1;break;default:n=a+1}return t.push(e.substring(r,n)),t}(i),p=0;p<u.length;p++){var l=u[p];if(l===s||l==="W/"+s||"W/"+l===s){c=!1;break}}if(c)return!1}if(t){var f=n["last-modified"],d=!(f&&a(f)<=a(t));if(d)return!1}return!0}},function(e,n){e.exports=require("querystring")},function(e,n,t){"use strict";
/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var r=t(40),a=r.parse,i=r.Url;function o(e){var n=e.url;if(void 0!==n){var t=e._parsedUrl;return c(n,t)?t:((t=s(n))._raw=n,e._parsedUrl=t)}}function s(e){if("string"!=typeof e||47!==e.charCodeAt(0))return a(e);for(var n=e,t=null,r=null,o=1;o<e.length;o++)switch(e.charCodeAt(o)){case 63:null===r&&(n=e.substring(0,o),t=e.substring(o+1),r=e.substring(o));break;case 9:case 10:case 12:case 13:case 32:case 35:case 160:case 65279:return a(e)}var s=void 0!==i?new i:{};return s.path=e,s.href=e,s.pathname=n,s.query=t,s.search=r,s}function c(e,n){return"object"==typeof n&&null!==n&&(void 0===i||n instanceof i)&&n._raw===e}e.exports=o,e.exports.original=function(e){var n=e.originalUrl;if("string"!=typeof n)return o(e);var t=e._parsedOriginalUrl;if(c(n,t))return t;return(t=s(n))._raw=n,e._parsedOriginalUrl=t}},function(e,n,t){"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,a=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,i=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,o=/\\([\u000b\u0020-\u00ff])/g,s=/([\\"])/g,c=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function u(e){var n=String(e);if(i.test(n))return n;if(n.length>0&&!a.test(n))throw new TypeError("invalid parameter value");return'"'+n.replace(s,"\\$1")+'"'}n.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var n=e.parameters,t=e.type;if(!t||!c.test(t))throw new TypeError("invalid type");var r=t;if(n&&"object"==typeof n)for(var a,o=Object.keys(n).sort(),s=0;s<o.length;s++){if(a=o[s],!i.test(a))throw new TypeError("invalid parameter name");r+="; "+a+"="+u(n[a])}return r},n.parse=function(e){if(!e)throw new TypeError("argument string is required");var n="object"==typeof e?function(e){var n;"function"==typeof e.getHeader?n=e.getHeader("content-type"):"object"==typeof e.headers&&(n=e.headers&&e.headers["content-type"]);if("string"!=typeof n)throw new TypeError("content-type header is missing from object");return n}(e):e;if("string"!=typeof n)throw new TypeError("argument string is required to be a string");var t=n.indexOf(";"),a=-1!==t?n.substr(0,t).trim():n.trim();if(!c.test(a))throw new TypeError("invalid media type");var i=new function(e){this.parameters=Object.create(null),this.type=e}(a.toLowerCase());if(-1!==t){var s,u,p;for(r.lastIndex=t;u=r.exec(n);){if(u.index!==t)throw new TypeError("invalid parameter format");t+=u[0].length,s=u[1].toLowerCase(),'"'===(p=u[2])[0]&&(p=p.substr(1,p.length-2).replace(o,"$1")),i.parameters[s]=p}if(t!==n.length)throw new TypeError("invalid parameter format")}return i}},function(e,n,t){"use strict";const r=t(40).URL,a=t(78),i=t(171),o=t(40).format,s=t(170),c=t(169),u=t(45),p=t(168),l=t(44);e.exports={get header(){return this.req.headers},set header(e){this.req.headers=e},get headers(){return this.req.headers},set headers(e){this.req.headers=e},get url(){return this.req.url},set url(e){this.req.url=e},get origin(){return`${this.protocol}://${this.host}`},get href(){return/^https?:\/\//i.test(this.originalUrl)?this.originalUrl:this.origin+this.originalUrl},get method(){return this.req.method},set method(e){this.req.method=e},get path(){return s(this.req).pathname},set path(e){const n=s(this.req);n.pathname!==e&&(n.pathname=e,n.path=null,this.url=o(n))},get query(){const e=this.querystring,n=this._querycache=this._querycache||{};return n[e]||(n[e]=c.parse(e))},set query(e){this.querystring=c.stringify(e)},get querystring(){return this.req&&s(this.req).query||""},set querystring(e){const n=s(this.req);n.search!==`?${e}`&&(n.search=e,n.path=null,this.url=o(n))},get search(){return this.querystring?`?${this.querystring}`:""},set search(e){this.querystring=e},get host(){let e=this.app.proxy&&this.get("X-Forwarded-Host");return(e=e||this.get("Host"))?e.split(/\s*,\s*/)[0]:""},get hostname(){const e=this.host;return e?"["==e[0]?this.URL.hostname||"":e.split(":")[0]:""},get URL(){if(!this.memoizedURL){const e=this.protocol,n=this.host,t=this.originalUrl||"";try{this.memoizedURL=new r(`${e}://${n}${t}`)}catch(e){this.memoizedURL=Object.create(null)}}return this.memoizedURL},get fresh(){const e=this.method,n=this.ctx.status;return("GET"==e||"HEAD"==e)&&((n>=200&&n<300||304==n)&&p(this.header,this.ctx.response.header))},get stale(){return!this.fresh},get idempotent(){return!!~["GET","HEAD","PUT","DELETE","OPTIONS","TRACE"].indexOf(this.method)},get socket(){return this.req.socket},get charset(){let e=this.get("Content-Type");if(!e)return"";try{e=i.parse(e)}catch(e){return""}return e.parameters.charset||""},get length(){const e=this.get("Content-Length");if(""!=e)return~~e},get protocol(){const e=this.app.proxy;return this.socket.encrypted?"https":e?(this.get("X-Forwarded-Proto")||"http").split(/\s*,\s*/)[0]:"http"},get secure(){return"https"==this.protocol},get ips(){const e=this.app.proxy,n=this.get("X-Forwarded-For");return e&&n?n.split(/\s*,\s*/):[]},get subdomains(){const e=this.app.subdomainOffset,n=this.hostname;return a.isIP(n)?[]:n.split(".").reverse().slice(e)},accepts(...e){return this.accept.types(...e)},acceptsEncodings(...e){return this.accept.encodings(...e)},acceptsCharsets(...e){return this.accept.charsets(...e)},acceptsLanguages(...e){return this.accept.languages(...e)},is(e){return e?(Array.isArray(e)||(e=[].slice.call(arguments)),u(this.req,e)):u(this.req)},get type(){const e=this.get("Content-Type");return e?e.split(";")[0]:""},get(e){const n=this.req;switch(e=e.toLowerCase()){case"referer":case"referrer":return n.headers.referrer||n.headers.referer||"";default:return n.headers[e]||""}},inspect(){if(this.req)return this.toJSON()},toJSON(){return l(this,["method","url","header"])}}},function(e,n){function t(e,n){if(!(this instanceof t))return new t(e,n);this.proto=e,this.target=n,this.methods=[],this.getters=[],this.setters=[],this.fluents=[]}e.exports=t,t.prototype.method=function(e){var n=this.proto,t=this.target;return this.methods.push(e),n[e]=function(){return this[t][e].apply(this[t],arguments)},this},t.prototype.access=function(e){return this.getter(e).setter(e)},t.prototype.getter=function(e){var n=this.proto,t=this.target;return this.getters.push(e),n.__defineGetter__(e,function(){return this[t][e]}),this},t.prototype.setter=function(e){var n=this.proto,t=this.target;return this.setters.push(e),n.__defineSetter__(e,function(n){return this[t][e]=n}),this},t.prototype.fluent=function(e){var n=this.proto,t=this.target;return this.fluents.push(e),n[e]=function(n){return void 0!==n?(this[t][e]=n,this):this[t][e]},this}},function(e,n){var t="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function a(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}(n=e.exports=t?r:a).supported=r,n.unsupported=a},function(e,n){function t(e){var n=[];for(var t in e)n.push(t);return n}(e.exports="function"==typeof Object.keys?Object.keys:t).shim=t},function(e,n,t){var r=Array.prototype.slice,a=t(175),i=t(174),o=e.exports=function(e,n,t){return t||(t={}),e===n||(e instanceof Date&&n instanceof Date?e.getTime()===n.getTime():!e||!n||"object"!=typeof e&&"object"!=typeof n?t.strict?e===n:e==n:function(e,n,t){var u,p;if(s(e)||s(n))return!1;if(e.prototype!==n.prototype)return!1;if(i(e))return!!i(n)&&(e=r.call(e),n=r.call(n),o(e,n,t));if(c(e)){if(!c(n))return!1;if(e.length!==n.length)return!1;for(u=0;u<e.length;u++)if(e[u]!==n[u])return!1;return!0}try{var l=a(e),f=a(n)}catch(e){return!1}if(l.length!=f.length)return!1;for(l.sort(),f.sort(),u=l.length-1;u>=0;u--)if(l[u]!=f[u])return!1;for(u=l.length-1;u>=0;u--)if(p=l[u],!o(e[p],n[p],t))return!1;return typeof e==typeof n}(e,n,t))};function s(e){return null===e||void 0===e}function c(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}},function(e,n,t){var r=t(43),a=t(176);function i(e,n,t,a){if(!e)throw r(n,t,a)}e.exports=i,i.equal=function(e,n,t,r,a){i(e==n,t,r,a)},i.notEqual=function(e,n,t,r,a){i(e!=n,t,r,a)},i.strictEqual=function(e,n,t,r,a){i(e===n,t,r,a)},i.notStrictEqual=function(e,n,t,r,a){i(e!==n,t,r,a)},i.deepEqual=function(e,n,t,r,o){i(a(e,n),t,r,o)},i.notDeepEqual=function(e,n,t,r,o){i(!a(e,n),t,r,o)}},function(e,n){"function"==typeof Object.create?e.exports=function(e,n){e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,n){e.super_=n;var t=function(){};t.prototype=n.prototype,e.prototype=new t,e.prototype.constructor=e}},function(e,n){e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,n){return e.__proto__=n,e}:function(e,n){for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t]);return e})},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,n){return e.listeners(n).length}},function(e,n,t){"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){var n=!0,t=function(e){var n,t="";e.isNative()?t="native":e.isEval()?(n=e.getScriptNameOrSourceURL())||(t=e.getEvalOrigin()):n=e.getFileName();if(n){t+=n;var r=e.getLineNumber();if(null!=r){t+=":"+r;var a=e.getColumnNumber();a&&(t+=":"+a)}}return t||"unknown source"}(e),r=e.getFunctionName(),a=e.isConstructor(),i="";if(e.isToplevel()||a)a?i+="new "+(r||"<anonymous>"):r?i+=r:(n=!1,i+=t);else{var o=e.getMethodName(),s=(c=e.receiver).constructor&&c.constructor.name||null;r?(s&&0!==r.indexOf(s)&&(i+=s+"."),i+=r,o&&r.lastIndexOf("."+o)!==r.length-o.length-1&&(i+=" [as "+o+"]")):i+=s+"."+(o||"<anonymous>")}var c;n&&(i+=" ("+t+")");return i}},function(e,n,t){"use strict";const r=t(28),a=t(43),i=t(177),o=t(173),s=t(25),c=e.exports={inspect(){return this===c?this:this.toJSON()},toJSON(){return{request:this.request.toJSON(),response:this.response.toJSON(),app:this.app.toJSON(),originalUrl:this.originalUrl,req:"<original node req>",res:"<original node res>",socket:"<original node socket>"}},assert:i,throw(...e){throw a(...e)},onerror(e){if(null==e)return;e instanceof Error||(e=new Error(r.format("non-error thrown: %j",e)));let n=!1;if(!this.headerSent&&this.writable||(n=e.headerSent=!0),this.app.emit("error",e,this),n)return;const{res:t}=this;"function"==typeof t.getHeaderNames?t.getHeaderNames().forEach(e=>t.removeHeader(e)):t._headers={},this.set(e.headers),this.type="text","ENOENT"==e.code&&(e.status=404),"number"==typeof e.status&&s[e.status]||(e.status=500);const a=s[e.status],i=e.expose?e.message:a;this.status=e.status,this.length=Buffer.byteLength(i),this.res.end(i)}};o(c,"response").method("attachment").method("redirect").method("remove").method("vary").method("set").method("append").method("flushHeaders").access("status").access("message").access("body").access("length").access("type").access("lastModified").access("etag").getter("headerSent").getter("writable"),o(c,"request").method("acceptsLanguages").method("acceptsEncodings").method("acceptsCharsets").method("accepts").method("get").method("is").access("querystring").access("idempotent").access("socket").access("search").access("method").access("query").access("path").access("url").getter("origin").getter("href").getter("subdomains").getter("protocol").getter("host").getter("hostname").getter("URL").getter("header").getter("headers").getter("secure").getter("stale").getter("fresh").getter("ips").getter("ip")},function(e,n,t){"use strict";e.exports=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");for(const n of e)if("function"!=typeof n)throw new TypeError("Middleware must be composed of functions!");return function(n,t){let r=-1;return function a(i){if(i<=r)return Promise.reject(new Error("next() called multiple times"));r=i;let o=e[i];i===e.length&&(o=t);if(!o)return Promise.resolve();try{return Promise.resolve(o(n,function(){return a(i+1)}))}catch(e){return Promise.reject(e)}}(0)}}},function(e,n,t){"use strict";
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,n){if(!e||!e.getHeader||!e.setHeader)throw new TypeError("res argument is required");var t=e.getHeader("Vary")||"",r=Array.isArray(t)?t.join(", "):String(t);(t=a(r,n))&&e.setHeader("Vary",t)},e.exports.append=a;var r=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function a(e,n){if("string"!=typeof e)throw new TypeError("header argument is required");if(!n)throw new TypeError("field argument is required");for(var t=Array.isArray(n)?n:i(String(n)),a=0;a<t.length;a++)if(!r.test(t[a]))throw new TypeError("field argument contains an invalid header name");if("*"===e)return e;var o=e,s=i(e.toLowerCase());if(-1!==t.indexOf("*")||-1!==s.indexOf("*"))return"*";for(var c=0;c<t.length;c++){var u=t[c].toLowerCase();-1===s.indexOf(u)&&(s.push(u),o=o?o+", "+t[c]:t[c])}return o}function i(e){for(var n=0,t=[],r=0,a=0,i=e.length;a<i;a++)switch(e.charCodeAt(a)){case 32:r===n&&(r=n=a+1);break;case 44:t.push(e.substring(r,n)),r=n=a+1;break;default:n=a+1}return t.push(e.substring(r,n)),t}},function(e,n,t){"use strict";
/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */var r=t(79).ReadStream,a=t(23);function i(){"number"==typeof this.fd&&this.close()}e.exports=function(e){if(e instanceof r)return function(e){e.destroy(),"function"==typeof e.close&&e.on("open",i);return e}(e);if(!(e instanceof a))return e;"function"==typeof e.destroy&&e.destroy();return e}},function(e){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",103:"Early Hints",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",306:"(Unused)",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,n){
/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */
var t=/; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g,r=/^[\u0020-\u007e\u0080-\u00ff]+$/,a=/^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/,i=/\\([\u0000-\u007f])/g,o=/([\\"])/g,s=/^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/,c=/^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/,u=/^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;function p(e){var n=String(e);if(a.test(n))return n;if(n.length>0&&!r.test(n))throw new TypeError("invalid parameter value");return'"'+n.replace(o,"\\$1")+'"'}n.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var n=e.parameters,t=e.subtype,r=e.suffix,i=e.type;if(!i||!c.test(i))throw new TypeError("invalid type");if(!t||!s.test(t))throw new TypeError("invalid subtype");var o=i+"/"+t;if(r){if(!c.test(r))throw new TypeError("invalid suffix");o+="+"+r}if(n&&"object"==typeof n)for(var u,l=Object.keys(n).sort(),f=0;f<l.length;f++){if(u=l[f],!a.test(u))throw new TypeError("invalid parameter name");o+="; "+u+"="+p(n[u])}return o},n.parse=function(e){if(!e)throw new TypeError("argument string is required");"object"==typeof e&&(e=function(e){if("function"==typeof e.getHeader)return e.getHeader("content-type");if("object"==typeof e.headers)return e.headers&&e.headers["content-type"]}(e));if("string"!=typeof e)throw new TypeError("argument string is required to be a string");var n,r,a,o=e.indexOf(";"),s=function(e){var n=u.exec(e.toLowerCase());if(!n)throw new TypeError("invalid media type");var t,r=n[1],a=n[2],i=a.lastIndexOf("+");-1!==i&&(t=a.substr(i+1),a=a.substr(0,i));return{type:r,subtype:a,suffix:t}}(-1!==o?e.substr(0,o):e),c={};t.lastIndex=o;for(;r=t.exec(e);){if(r.index!==o)throw new TypeError("invalid parameter format");o+=r[0].length,n=r[1].toLowerCase(),'"'===(a=r[2])[0]&&(a=a.substr(1,a.length-2).replace(i,"$1")),c[n]=a}if(-1!==o&&o!==e.length)throw new TypeError("invalid parameter format");return s.parameters=c,s}},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;e.exports=function(e){var n,t=""+e,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=n}return s!==o?i+t.substring(s,o):i}},function(e){e.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana"},"application/3gpp-ims+xml":{source:"iana"},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana"},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",extensions:["atomsvc"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana"},"application/bacnet-xdd+zip":{source:"iana"},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana"},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana"},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cbor":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana"},"application/ccxml+xml":{source:"iana",extensions:["ccxml"]},"application/cdfx+xml":{source:"iana"},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana"},"application/cellml+xml":{source:"iana"},"application/cfw":{source:"iana"},"application/clue_info+xml":{source:"iana"},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana"},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana"},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana"},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana"},"application/cstadata+xml":{source:"iana"},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana"},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana"},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/docbook+xml":{source:"apache",extensions:["dbk"]},"application/dskpp+xml":{source:"iana"},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana"},"application/emergencycalldata.control+xml":{source:"iana"},"application/emergencycalldata.deviceinfo+xml":{source:"iana"},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana"},"application/emergencycalldata.serviceinfo+xml":{source:"iana"},"application/emergencycalldata.subscriberinfo+xml":{source:"iana"},"application/emergencycalldata.veds+xml":{source:"iana"},"application/emma+xml":{source:"iana",extensions:["emma"]},"application/emotionml+xml":{source:"iana"},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana"},"application/epub+zip":{source:"iana",extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana"},"application/fhir+xml":{source:"iana"},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1,extensions:["woff"]},"application/framework-attributes+xml":{source:"iana"},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geoxacml+xml":{source:"iana"},"application/gml+xml":{source:"iana",extensions:["gml"]},"application/gpx+xml":{source:"apache",extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana"},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana"},"application/ibe-pkg-reply+xml":{source:"iana"},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana"},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana"},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana"},"application/kpml-response+xml":{source:"iana"},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana"},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana"},"application/lost+xml":{source:"iana",extensions:["lostxml"]},"application/lostsync+xml":{source:"iana"},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",extensions:["mathml"]},"application/mathml-content+xml":{source:"iana"},"application/mathml-presentation+xml":{source:"iana"},"application/mbms-associated-procedure-description+xml":{source:"iana"},"application/mbms-deregister+xml":{source:"iana"},"application/mbms-envelope+xml":{source:"iana"},"application/mbms-msk+xml":{source:"iana"},"application/mbms-msk-response+xml":{source:"iana"},"application/mbms-protection-description+xml":{source:"iana"},"application/mbms-reception-report+xml":{source:"iana"},"application/mbms-register+xml":{source:"iana"},"application/mbms-register-response+xml":{source:"iana"},"application/mbms-schedule+xml":{source:"iana"},"application/mbms-user-service-description+xml":{source:"iana"},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana"},"application/media_control+xml":{source:"iana"},"application/mediaservercontrol+xml":{source:"iana",extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",extensions:["metalink"]},"application/metalink4+xml":{source:"iana",extensions:["meta4"]},"application/mets+xml":{source:"iana",extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mmt-usd+xml":{source:"iana"},"application/mods+xml":{source:"iana",extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana"},"application/mrb-publish+xml":{source:"iana"},"application/msc-ivr+xml":{source:"iana"},"application/msc-mixer+xml":{source:"iana"},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana"},"application/n-triples":{source:"iana"},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana"},"application/news-groupinfo":{source:"iana"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana"},"application/node":{source:"iana"},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana"},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana"},"application/pidf-diff+xml":{source:"iana"},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",extensions:["pls"]},"application/poc-settings+xml":{source:"iana"},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana"},"application/provenance+xml":{source:"iana"},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana"},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana"},"application/pskc+xml":{source:"iana",extensions:["pskcxml"]},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf"]},"application/reginfo+xml":{source:"iana",extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",extensions:["rld"]},"application/rfc+xml":{source:"iana"},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana"},"application/rls-services+xml":{source:"iana",extensions:["rs"]},"application/route-apd+xml":{source:"iana"},"application/route-s-tsid+xml":{source:"iana"},"application/route-usd+xml":{source:"iana"},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana"},"application/samlmetadata+xml":{source:"iana"},"application/sbml+xml":{source:"iana",extensions:["sbml"]},"application/scaip+xml":{source:"iana"},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/sep+xml":{source:"iana"},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",extensions:["shf"]},"application/sieve":{source:"iana"},"application/simple-filter+xml":{source:"iana"},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",extensions:["srx"]},"application/spirits-event+xml":{source:"iana"},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",extensions:["grxml"]},"application/sru+xml":{source:"iana",extensions:["sru"]},"application/ssdl+xml":{source:"apache",extensions:["ssdl"]},"application/ssml+xml":{source:"iana",extensions:["ssml"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/tei+xml":{source:"iana",extensions:["tei","teicorpus"]},"application/thraud+xml":{source:"iana",extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tnauthlist":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana"},"application/tve-trigger":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana"},"application/urc-ressheet+xml":{source:"iana"},"application/urc-targetdesc+xml":{source:"iana"},"application/urc-uisocketdesc+xml":{source:"iana"},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana"},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana"},"application/vnd.3gpp-prose+xml":{source:"iana"},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana"},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana"},"application/vnd.3gpp.bsf+xml":{source:"iana"},"application/vnd.3gpp.gmop+xml":{source:"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana"},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana"},"application/vnd.3gpp.mcptt-info+xml":{source:"iana"},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana"},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana"},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana"},"application/vnd.3gpp.mid-call+xml":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana"},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana"},"application/vnd.3gpp.srvcc-info+xml":{source:"iana"},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana"},"application/vnd.3gpp.ussd+xml":{source:"iana"},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana"},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",extensions:["mpkg"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana"},"application/vnd.balsamiq.bmml+xml":{source:"iana"},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana"},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana"},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana"},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",extensions:["wbs"]},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana"},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana"},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume-movie":{source:"iana"},"application/vnd.desmume.movie":{source:"apache"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana"},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana"},"application/vnd.dvb.notif-container+xml":{source:"iana"},"application/vnd.dvb.notif-generic+xml":{source:"iana"},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana"},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana"},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana"},"application/vnd.dvb.notif-init+xml":{source:"iana"},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana"},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana"},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana"},"application/vnd.eszigno3+xml":{source:"iana",extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana"},"application/vnd.etsi.asic-e+zip":{source:"iana"},"application/vnd.etsi.asic-s+zip":{source:"iana"},"application/vnd.etsi.cug+xml":{source:"iana"},"application/vnd.etsi.iptvcommand+xml":{source:"iana"},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana"},"application/vnd.etsi.iptvprofile+xml":{source:"iana"},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana"},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana"},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana"},"application/vnd.etsi.iptvservice+xml":{source:"iana"},"application/vnd.etsi.iptvsync+xml":{source:"iana"},"application/vnd.etsi.iptvueprofile+xml":{source:"iana"},"application/vnd.etsi.mcid+xml":{source:"iana"},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana"},"application/vnd.etsi.pstn+xml":{source:"iana"},"application/vnd.etsi.sci+xml":{source:"iana"},"application/vnd.etsi.simservs+xml":{source:"iana"},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana"},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana"},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana"},"application/vnd.gov.sk.e-form+zip":{source:"iana"},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana"},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana"},"application/vnd.imagemeter.image+zip":{source:"iana"},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana"},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana"},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana"},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana"},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana"},"application/vnd.iptc.g2.newsitem+xml":{source:"iana"},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana"},"application/vnd.iptc.g2.packageitem+xml":{source:"iana"},"application/vnd.iptc.g2.planningitem+xml":{source:"iana"},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",extensions:["lasxml"]},"application/vnd.liberty-request+xml":{source:"iana"},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",extensions:["lbe"]},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana"},"application/vnd.marlin.drm.conftoken+xml":{source:"iana"},"application/vnd.marlin.drm.license+xml":{source:"iana"},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana"},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana"},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana"},"application/vnd.ms-printing.printticket+xml":{source:"apache"},"application/vnd.ms-printschematicket+xml":{source:"iana"},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana"},"application/vnd.nokia.iptv.config+xml":{source:"iana"},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana"},"application/vnd.nokia.landmarkcollection+xml":{source:"iana"},"application/vnd.nokia.n-gage.ac+xml":{source:"iana"},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana"},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana"},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana"},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana"},"application/vnd.oipf.dae.xhtml+xml":{source:"iana"},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana"},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana"},"application/vnd.oipf.spdlist+xml":{source:"iana"},"application/vnd.oipf.ueprofile+xml":{source:"iana"},"application/vnd.oipf.userprofile+xml":{source:"iana"},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana"},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana"},"application/vnd.oma.bcast.imd+xml":{source:"iana"},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana"},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana"},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana"},"application/vnd.oma.bcast.sprov+xml":{source:"iana"},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana"},"application/vnd.oma.cab-feature-handler+xml":{source:"iana"},"application/vnd.oma.cab-pcc+xml":{source:"iana"},"application/vnd.oma.cab-subs-invite+xml":{source:"iana"},"application/vnd.oma.cab-user-prefs+xml":{source:"iana"},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana"},"application/vnd.oma.group-usage-list+xml":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana"},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana"},"application/vnd.oma.poc.final-report+xml":{source:"iana"},"application/vnd.oma.poc.groups+xml":{source:"iana"},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana"},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana"},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana"},"application/vnd.oma.xcap-directory+xml":{source:"iana"},"application/vnd.omads-email+xml":{source:"iana"},"application/vnd.omads-file+xml":{source:"iana"},"application/vnd.omads-folder+xml":{source:"iana"},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana"},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana"},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana"},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana"},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana"},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana"},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos+xml":{source:"iana"},"application/vnd.paos.xml":{source:"apache"},"application/vnd.patentdive":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana"},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana"},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana"},"application/vnd.radisys.msml+xml":{source:"iana"},"application/vnd.radisys.msml-audit+xml":{source:"iana"},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana"},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana"},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana"},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana"},"application/vnd.radisys.msml-conf+xml":{source:"iana"},"application/vnd.radisys.msml-dialog+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana"},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana"},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.software602.filler.form+xml":{source:"iana"},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana"},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana"},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.tmd.mediaflex.api+xml":{source:"iana"},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana"},"application/vnd.wv.ssp+xml":{source:"iana"},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana"},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",extensions:["zaz"]},"application/voicexml+xml":{source:"iana",extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana"},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"apache",extensions:["der","crt","pem"]},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana"},"application/xaml+xml":{source:"apache",extensions:["xaml"]},"application/xcap-att+xml":{source:"iana"},"application/xcap-caps+xml":{source:"iana"},"application/xcap-diff+xml":{source:"iana",extensions:["xdf"]},"application/xcap-el+xml":{source:"iana"},"application/xcap-error+xml":{source:"iana"},"application/xcap-ns+xml":{source:"iana"},"application/xcon-conference-info+xml":{source:"iana"},"application/xcon-conference-info-diff+xml":{source:"iana"},"application/xenc+xml":{source:"iana",extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache"},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana"},"application/xmpp+xml":{source:"iana"},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",extensions:["xpl"]},"application/xslt+xml":{source:"iana",extensions:["xslt"]},"application/xspf+xml":{source:"apache",extensions:["xspf"]},"application/xv+xml":{source:"iana",extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana"},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana"},"application/yin+xml":{source:"iana",extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana"},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana"},"image/apng":{compressible:!1,extensions:["apng"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana"},"image/emf":{source:"iana"},"image/fits":{source:"iana"},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana"},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana"},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana"},"image/tiff":{source:"iana",compressible:!1,extensions:["tiff","tif"]},"image/tiff-fx":{source:"iana"},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana"},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana"},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana"},"image/vnd.valve.source.texture":{source:"iana"},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana"},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana"},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/vnd.collada+xml":{source:"iana",extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana"},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana"},"model/vnd.parasolid.transmit.binary":{source:"iana"},"model/vnd.parasolid.transmit.text":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.valve.source.compiled-map":{source:"iana"},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana"},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana"},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana",compressible:!1},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}},function(e,n,t){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=t(189)},function(e,n,t){var r=t(23);e.exports=function(e,n){return e instanceof r&&!~e.listeners("error").indexOf(n)&&e.on("error",n),e}},function(e,n,t){"use strict";
/*!
 * content-disposition
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,n){var t=n||{},a=t.type||"attachment",o=function(e,n){if(void 0===e)return;var t={};if("string"!=typeof e)throw new TypeError("filename must be a string");void 0===n&&(n=!0);if("string"!=typeof n&&"boolean"!=typeof n)throw new TypeError("fallback must be a string or boolean");if("string"==typeof n&&s.test(n))throw new TypeError("fallback must be ISO-8859-1 string");var a=r(e),o=l.test(a),c="string"!=typeof n?n&&v(a):r(n),u="string"==typeof c&&c!==a;(u||!o||i.test(a))&&(t["filename*"]=a);(o||u)&&(t.filename=u?c:a);return t}(e,t.fallback);return function(e){var n=e.parameters,t=e.type;if(!t||"string"!=typeof t||!f.test(t))throw new TypeError("invalid type");var r=String(t).toLowerCase();if(n&&"object"==typeof n)for(var a,i=Object.keys(n).sort(),o=0;o<i.length;o++){var s="*"===(a=i[o]).substr(-1)?x(n[a]):b(n[a]);r+="; "+a+"="+s}return r}(new w(a,o))},e.exports.parse=function(e){if(!e||"string"!=typeof e)throw new TypeError("argument string is required");var n=m.exec(e);if(!n)throw new TypeError("invalid type format");var t,r,a=n[0].length,i=n[1].toLowerCase(),o=[],s={};a=p.lastIndex=";"===n[0].substr(-1)?a-1:a;for(;n=p.exec(e);){if(n.index!==a)throw new TypeError("invalid parameter format");if(a+=n[0].length,t=n[1].toLowerCase(),r=n[2],-1!==o.indexOf(t))throw new TypeError("invalid duplicate parameter");o.push(t),t.indexOf("*")+1!==t.length?"string"!=typeof s[t]&&('"'===r[0]&&(r=r.substr(1,r.length-2).replace(c,"$1")),s[t]=r):(t=t.slice(0,-1),r=h(r),s[t]=r)}if(-1!==a&&a!==e.length)throw new TypeError("invalid parameter format");return new w(i,s)};var r=t(26).basename,a=/[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g,i=/%[0-9A-Fa-f]{2}/,o=/%([0-9A-Fa-f]{2})/g,s=/[^\x20-\x7e\xa0-\xff]/g,c=/\\([\u0000-\u007f])/g,u=/([\\"])/g,p=/;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g,l=/^[\x20-\x7e\x80-\xff]+$/,f=/^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/,d=/^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/,m=/^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;function h(e){var n=d.exec(e);if(!n)throw new TypeError("invalid extended field value");var t,r=n[1].toLowerCase(),a=n[2].replace(o,g);switch(r){case"iso-8859-1":t=v(a);break;case"utf-8":t=new Buffer(a,"binary").toString("utf8");break;default:throw new TypeError("unsupported charset in extended field")}return t}function v(e){return String(e).replace(s,"?")}function g(e,n){return String.fromCharCode(parseInt(n,16))}function y(e){var n=String(e).charCodeAt(0).toString(16).toUpperCase();return 1===n.length?"%0"+n:"%"+n}function b(e){return'"'+String(e).replace(u,"\\$1")+'"'}function x(e){var n=String(e);return"UTF-8''"+encodeURIComponent(n).replace(a,y)}function w(e,n){this.type=e,this.parameters=n}},function(e,n,t){"use strict";const r=t(192),a=t(191),i=t(46).contentType,o=t(77),s=t(76),c=t(188),u=t(45).is,p=t(25),l=t(185),f=t(75),d=t(26).extname,m=t(184),h=t(44);e.exports={get socket(){return this.ctx.req.socket},get header(){const{res:e}=this;return"function"==typeof e.getHeaders?e.getHeaders():e._headers||{}},get headers(){return this.header},get status(){return this.res.statusCode},set status(e){this.headerSent||(f("number"==typeof e,"status code must be a number"),f(p[e],`invalid status code: ${e}`),this._explicitStatus=!0,this.res.statusCode=e,this.req.httpVersionMajor<2&&(this.res.statusMessage=p[e]),this.body&&p.empty[e]&&(this.body=null))},get message(){return this.res.statusMessage||p[this.status]},set message(e){this.res.statusMessage=e},get body(){return this._body},set body(e){const n=this._body;if(this._body=e,null==e)return p.empty[this.status]||(this.status=204),this.remove("Content-Type"),this.remove("Content-Length"),void this.remove("Transfer-Encoding");this._explicitStatus||(this.status=200);const t=!this.header["content-type"];return"string"==typeof e?(t&&(this.type=/^\s*</.test(e)?"html":"text"),void(this.length=Buffer.byteLength(e))):Buffer.isBuffer(e)?(t&&(this.type="bin"),void(this.length=e.length)):"function"==typeof e.pipe?(o(this.res,l.bind(null,e)),a(e,e=>this.ctx.onerror(e)),null!=n&&n!=e&&this.remove("Content-Length"),void(t&&(this.type="bin"))):(this.remove("Content-Length"),void(this.type="json"))},set length(e){this.set("Content-Length",e)},get length(){const e=this.header["content-length"],n=this.body;if(null==e){if(!n)return;return"string"==typeof n?Buffer.byteLength(n):Buffer.isBuffer(n)?n.length:s(n)?Buffer.byteLength(JSON.stringify(n)):void 0}return~~e},get headerSent(){return this.res.headersSent},vary(e){this.headerSent||m(this.res,e)},redirect(e,n){if("back"==e&&(e=this.ctx.get("Referrer")||n||"/"),this.set("Location",e),p.redirect[this.status]||(this.status=302),this.ctx.accepts("html"))return e=c(e),this.type="text/html; charset=utf-8",void(this.body=`Redirecting to <a href="${e}">${e}</a>.`);this.type="text/plain; charset=utf-8",this.body=`Redirecting to ${e}.`},attachment(e){e&&(this.type=d(e)),this.set("Content-Disposition",r(e))},set type(e){(e=i(e))?this.set("Content-Type",e):this.remove("Content-Type")},set lastModified(e){"string"==typeof e&&(e=new Date(e)),this.set("Last-Modified",e.toUTCString())},get lastModified(){const e=this.get("last-modified");if(e)return new Date(e)},set etag(e){/^(W\/)?"/.test(e)||(e=`"${e}"`),this.set("ETag",e)},get etag(){return this.get("ETag")},get type(){const e=this.get("Content-Type");return e?e.split(";")[0]:""},is(e){const n=this.type;return e?(Array.isArray(e)||(e=[].slice.call(arguments)),u(n,e)):n||!1},get(e){return this.header[e.toLowerCase()]||""},set(e,n){if(!this.headerSent)if(2==arguments.length)n=Array.isArray(n)?n.map(String):String(n),this.res.setHeader(e,n);else for(const n in e)this.set(n,e[n])},append(e,n){const t=this.get(e);return t&&(n=Array.isArray(t)?t.concat(n):[t].concat(n)),this.set(e,n)},remove(e){this.headerSent||this.res.removeHeader(e)},get writable(){if(this.res.finished)return!1;const e=this.res.socket;return!e||e.writable},inspect(){if(!this.res)return;const e=this.toJSON();return e.body=this.body,e},toJSON(){return h(this,["status","message","header"])},flushHeaders(){this.res.flushHeaders()}}},function(e,n,t){"use strict";
/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */function r(e,n){return function(t){for(var r=new Array(arguments.length),a="error"===e?t:null,i=0;i<r.length;i++)r[i]=arguments[i];n(a,this,e,r)}}e.exports=function(e,n){if(!Array.isArray(e))throw new TypeError("arg must be an array of [ee, events...] arrays");for(var t=[],a=0;a<e.length;a++){var i=e[a];if(!Array.isArray(i)||i.length<2)throw new TypeError("each array member must be [ee, events...]");for(var o=i[0],s=1;s<i.length;s++){var c=i[s],u=r(c,p);o.on(c,u),t.push({ee:o,event:c,fn:u})}}function p(){l(),n.apply(null,arguments)}function l(){for(var e,n=0;n<t.length;n++)(e=t[n]).ee.removeListener(e.event,e.fn)}function f(e){n=e}return f.cancel=l,f}},function(e,n,t){var r=t(80),a=t(28);(n=e.exports=t(82)).init=function(e){e.inspectOpts={};for(var t=Object.keys(n.inspectOpts),r=0;r<t.length;r++)e.inspectOpts[t[r]]=n.inspectOpts[t[r]]},n.log=function(){return o.write(a.format.apply(a,arguments)+"\n")},n.formatArgs=function(e){var t=this.namespace;if(this.useColors){var r=this.color,a="  [3"+r+";1m"+t+" [0m";e[0]=a+e[0].split("\n").join("\n"+a),e.push("[3"+r+"m+"+n.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+t+" "+e[0]},n.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},n.load=s,n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):r.isatty(i)},n.colors=[6,2,3,4,5,1],n.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,n){var t=n.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,n){return n.toUpperCase()}),r=process.env[n];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[t]=r,e},{});var i=parseInt(process.env.DEBUG_FD,10)||2;1!==i&&2!==i&&a.deprecate(function(){},"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var o=1===i?process.stdout:2===i?process.stderr:function(e){var n;switch(process.binding("tty_wrap").guessHandleType(e)){case"TTY":(n=new r.WriteStream(e))._type="tty",n._handle&&n._handle.unref&&n._handle.unref();break;case"FILE":var a=t(79);(n=new a.SyncWriteStream(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":var i=t(78);(n=new i.Socket({fd:e,readable:!1,writable:!0})).readable=!1,n.read=null,n._type="pipe",n._handle&&n._handle.unref&&n._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return n.fd=e,n._isStdio=!0,n}(i);function s(){return process.env.DEBUG}n.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).split("\n").map(function(e){return e.trim()}).join(" ")},n.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)},n.enable(s())},function(e,n,t){function r(){var e;try{e=n.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(n=e.exports=t(82)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),!t)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var a=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++a)}),e.splice(i,0,r)},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=r,n.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(r())},function(e,n,t){"undefined"!=typeof process&&"renderer"===process.type?e.exports=t(196):e.exports=t(195)},function(e,n,t){"use strict";var r=Object.prototype.toString,a=Function.prototype.toString,i=/^\s*(?:function)?\*/,o="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,s=Object.getPrototypeOf,c=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}(),u=c?s(c):{};e.exports=function(e){return"function"==typeof e&&(!!i.test(a.call(e))||(o?s(e)===u:"[object GeneratorFunction]"===r.call(e)))}},function(e,n,t){"use strict";const r=t(198),a=t(197)("koa:application"),i=t(77),o=t(193),s=t(183),c=t(76),u=t(182),p=t(172),l=t(25),f=t(167),d=t(165),m=t(41),h=t(75),v=t(23),g=t(39),y=t(44),b=t(159),x=t(42)("koa");e.exports=class extends m{constructor(){super(),this.proxy=!1,this.middleware=[],this.subdomainOffset=2,this.env="production",this.context=Object.create(u),this.request=Object.create(p),this.response=Object.create(o)}listen(...e){return a("listen"),g.createServer(this.callback()).listen(...e)}toJSON(){return y(this,["subdomainOffset","proxy","env"])}inspect(){return this.toJSON()}use(e){if("function"!=typeof e)throw new TypeError("middleware must be a function!");return r(e)&&(x("Support for generators will be removed in v3. See the documentation for examples of how to convert old middleware https://github.com/koajs/koa/blob/master/docs/migration.md"),e=b(e)),a("use %s",e._name||e.name||"-"),this.middleware.push(e),this}callback(){const e=s(this.middleware);this.listeners("error").length||this.on("error",this.onerror);return(n,t)=>{const r=this.createContext(n,t);return this.handleRequest(r,e)}}handleRequest(e,n){const t=e.res;t.statusCode=404;const r=n=>e.onerror(n);return i(t,r),n(e).then(()=>(function(e){if(!1===e.respond)return;const n=e.res;if(!e.writable)return;let t=e.body;const r=e.status;return l.empty[r]?(e.body=null,n.end()):"HEAD"==e.method?(!n.headersSent&&c(t)&&(e.length=Buffer.byteLength(JSON.stringify(t))),n.end()):null==t?(t=e.message||String(r),n.headersSent||(e.type="text",e.length=Buffer.byteLength(t)),n.end(t)):Buffer.isBuffer(t)?n.end(t):"string"==typeof t?n.end(t):t instanceof v?t.pipe(n):(t=JSON.stringify(t),n.headersSent||(e.length=Buffer.byteLength(t)),void n.end(t))})(e)).catch(r)}createContext(e,n){const t=Object.create(this.context),r=t.request=Object.create(this.request),a=t.response=Object.create(this.response);return t.app=r.app=a.app=this,t.req=r.req=a.req=e,t.res=r.res=a.res=n,r.ctx=a.ctx=t,r.response=a,a.request=r,t.originalUrl=r.originalUrl=e.url,t.cookies=new f(e,n,{keys:this.keys,secure:r.secure}),r.ip=r.ips[0]||e.socket.remoteAddress||"",t.accept=r.accept=d(e),t.state={},t}onerror(e){if(h(e instanceof Error,`non-error thrown: ${e}`),404==e.status||e.expose)return;if(this.silent)return;const n=e.stack||e.toString();console.error(),console.error(n.replace(/^/gm,"  ")),console.error()}}},function(e,n,t){"use strict";var r=u(t(199)),a=u(t(201)),i=u(t(153)),o=u(t(142)),s=t(108),c=u(t(99));function u(e){return e&&e.__esModule?e:{default:e}}var p=new r.default,l=new i.default;p.use((0,a.default)()),l.post("/graphql",(0,o.default)(),(0,s.graphqlKoa)({schema:c.default})),l.get("/graphql",(0,s.graphqlKoa)({schema:c.default})),l.get("/graphiql",(0,s.graphiqlKoa)({endpointURL:"/graphql"})),p.use(l.routes()),p.use(l.allowedMethods()),p.listen(3e3)},function(e,n,t){"use strict";e.exports=function(e){e=e||{};var n={origin:!0,methods:"GET,HEAD,PUT,POST,DELETE"};for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t]);return Array.isArray(e.expose)&&(e.expose=e.expose.join(",")),"number"==typeof e.maxAge?e.maxAge=e.maxAge.toString():e.maxAge=null,Array.isArray(e.methods)&&(e.methods=e.methods.join(",")),Array.isArray(e.headers)&&(e.headers=e.headers.join(",")),function*(n){var t,r;("string"==typeof e.origin?t=e.origin:!0===e.origin?t=this.get("origin")||"*":!1===e.origin?t=e.origin:"function"==typeof e.origin&&(t=e.origin(this.request)),!1!==t)&&(this.set("Access-Control-Allow-Origin",t),e.expose&&this.set("Access-Control-Expose-Headers",e.expose),e.maxAge&&this.set("Access-Control-Max-Age",e.maxAge),!0===e.credentials&&this.set("Access-Control-Allow-Credentials","true"),this.set("Access-Control-Allow-Methods",e.methods),(r=e.headers?e.headers:this.get("access-control-request-headers"))&&this.set("Access-Control-Allow-Headers",r),"OPTIONS"===this.method?this.status=204:yield n)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,